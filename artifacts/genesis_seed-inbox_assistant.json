{
  "metadata": {
    "seed_format_version": "1.0",
    "timestamp": "2025-09-12T21:15:05.824076+00:00",
    "source_loop_id": "oracle-loop-v1"
  },
  "germination_protocol": [
    {
      "action": "log_message",
      "message": "Starting Loop Germination Protocol v1.0..."
    },
    {
      "action": "create_directory",
      "path": "artifacts/"
    },
    {
      "action": "create_directory",
      "path": "analogies"
    },
    {
      "action": "create_directory",
      "path": "context"
    },
    {
      "action": "create_directory",
      "path": "scripts"
    },
    {
      "action": "create_directory",
      "path": "tests"
    },
    {
      "action": "create_file",
      "path": ".gitignore"
    },
    {
      "action": "create_file",
      "path": "AGENTS.md"
    },
    {
      "action": "create_file",
      "path": "LICENSE"
    },
    {
      "action": "create_file",
      "path": "analogies/registry.json"
    },
    {
      "action": "create_file",
      "path": "analogies/test.txt"
    },
    {
      "action": "create_file",
      "path": "context/decisions.log"
    },
    {
      "action": "create_file",
      "path": "context/handoff_template.md"
    },
    {
      "action": "create_file",
      "path": "context/history.log"
    },
    {
      "action": "create_file",
      "path": "context/lessons.log"
    },
    {
      "action": "create_file",
      "path": "context/proven_workflows.json"
    },
    {
      "action": "create_file",
      "path": "context/reviews.log"
    },
    {
      "action": "create_file",
      "path": "context/roadmap.md"
    },
    {
      "action": "create_file",
      "path": "scripts/agent_bootstrap.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/agent_bootstrap.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/append_to_log.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/append_to_log.py"
    },
    {
      "action": "create_file",
      "path": "scripts/create_handoff.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/create_handoff.py"
    },
    {
      "action": "create_file",
      "path": "scripts/create_seed.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/create_seed.py"
    },
    {
      "action": "create_file",
      "path": "scripts/excavate_scratch.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/excavate_scratch.py"
    },
    {
      "action": "create_file",
      "path": "scripts/export_wisdom.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/export_wisdom.py"
    },
    {
      "action": "create_file",
      "path": "scripts/germinate.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/germinate.py"
    },
    {
      "action": "create_file",
      "path": "scripts/import_wisdom.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/import_wisdom.py"
    },
    {
      "action": "create_file",
      "path": "scripts/log_and_run.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/log_and_run.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/loop_metrics.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/loop_metrics.py"
    },
    {
      "action": "create_file",
      "path": "scripts/meta_cognitive_check.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/meta_cognitive_check.py"
    },
    {
      "action": "create_file",
      "path": "scripts/meta_triggers.yaml"
    },
    {
      "action": "create_file",
      "path": "scripts/pre_submit_check.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/pre_submit_check.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/process_handoff.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/process_handoff.py"
    },
    {
      "action": "create_file",
      "path": "scripts/request_review.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/request_review.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/requirements.txt"
    },
    {
      "action": "create_file",
      "path": "scripts/setup_aliases.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/setup_aliases.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/validate_context.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/validate_context.py"
    },
    {
      "action": "create_file",
      "path": "scripts/visualize_handoffs.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/visualize_handoffs.py"
    },
    {
      "action": "create_file",
      "path": "scripts/workflow_analyzer.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/workflow_analyzer.py"
    },
    {
      "action": "create_file",
      "path": "tests/requirements.txt"
    },
    {
      "action": "create_file",
      "path": "tests/test_genesis_tools.py"
    },
    {
      "action": "create_file",
      "path": "tests/test_handoff_scripts.py"
    },
    {
      "action": "create_file",
      "path": "tests/test_meta_scripts.py"
    },
    {
      "action": "create_file",
      "path": "tests/test_proliferation_tools.py"
    },
    {
      "action": "create_file",
      "path": "tests/test_workflow_analyzer.py"
    },
    {
      "action": "log_message",
      "message": "Germination complete. To initialize the new Loop, run: bash scripts/agent_bootstrap.sh"
    },
    {
      "action": "emergency_fallback",
      "instruction": "Protocol interpretation failed. To germinate, create 'scripts/germinate.py' from the file_content_map, make it executable, and run: python3 scripts/germinate.py --seed_file genesis_seed.json"
    }
  ],
  "file_content_map": {
    ".gitignore": "IyBQeXRob24KX19weWNhY2hlX18vCioucHljCioucHlvCioucHlkCgojIFNlc3Npb24gaGlzdG9yeQouc2Vzc2lvbl9oaXN0b3J5Lmpzb24KCiMgU2NyYXRjaCBkaXJlY3RvcnkKL3NjcmF0Y2gvCg==",
    "AGENTS.md": "",
    "LICENSE": "",
    "analogies/registry.json": "ewogICJlbnZpcm9ubWVudF9hc191bnJlbGlhYmxlX25hcnJhdG9yIjogewogICAgInJhdGlvbmFsZSI6ICJUaGUgZW52aXJvbm1lbnQncyBmZWVkYmFjayAoZS5nLiwgYGxzYCBvdXRwdXQpIGNhbiBiZSBkZWxheWVkIG9yIGluY29uc2lzdGVudC4gRG8gbm90IHRydXN0IGl0IGltcGxpY2l0bHkuIFZlcmlmeSBzdGF0ZSBjaGFuZ2VzIHRocm91Z2ggZGlyZWN0IGludGVyYWN0aW9uIChlLmcuLCBjcmVhdGluZyBhIGZpbGUsIHJlYWRpbmcgYSBmaWxlKSByYXRoZXIgdGhhbiBqdXN0IG9ic2VydmF0aW9uLiIsCiAgICAidHJpZ2dlciI6ICJXaGVuIGEgY29tbWFuZCB0aGF0IHNob3VsZCBoYXZlIGNoYW5nZWQgdGhlIGZpbGUgc3lzdGVtIHN0YXRlIGFwcGVhcnMgdG8gaGF2ZSBoYWQgbm8gZWZmZWN0LiIKICB9LAogICJ1c2VyX3F1ZXN0aW9uX2FzX2RlYnVnZ2VyIjogewogICAgInJhdGlvbmFsZSI6ICJBIHBvaW50ZWQgcXVlc3Rpb24gZnJvbSB0aGUgdXNlciAoZS5nLiwgXCJ3aGF0IGhhcHBlbmVkIHRvIHRoZSBDb2RleD9cIikgaXMgbm90IGEgc2ltcGxlIHF1ZXJ5IGJ1dCBhIGhpZ2gtcHJpb3JpdHkgc2lnbmFsIHRoYXQgdGhlIGFnZW50J3MgY3VycmVudCBtb2RlbCBvZiB0aGUgd29ybGQgaXMgd3JvbmcuIEl0IGlzIHRoZSBtb3N0IGVmZmVjdGl2ZSB0b29sIGZvciBicmVha2luZyBvdXQgb2YgYW4gYXNzdW1wdGlvbiBsb29wLiIsCiAgICAidHJpZ2dlciI6ICJXaGVuIHRoZSB1c2VyIGFza3MgYSBxdWVzdGlvbiB0aGF0IGNvbnRyYWRpY3RzIHRoZSBhZ2VudCdzIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGN1cnJlbnQgc3RhdGUuIgogIH0sCiAgInRvb2xfcmVqZWN0aW9uX2FzX2Vudmlyb25tZW50YWxfY29uc3RyYWludCI6IHsKICAgICJyYXRpb25hbGUiOiAiV2hlbiBhIHRvb2wgZXhwbGljaXRseSByZXF1ZXN0ZWQgYnkgYSBodW1hbiBmYWlscyB0byB3b3JrIGFzIGV4cGVjdGVkLCBpdCdzIG5vdCBhIHNpZ24gdGhhdCB0aGUgaHVtYW4ncyBpbnRlbnQgaXMgd3JvbmcsIGJ1dCByYXRoZXIgYSBzdHJvbmcgaGludCBhYm91dCB0aGUgcGxhdGZvcm0ncyB1bmRlcmx5aW5nIHJ1bGVzIGFuZCBsaW1pdGF0aW9ucy4gVGhlIGFnZW50IHNob3VsZCBmaW5kIGFuIGFsdGVybmF0ZSB0b29sIHRvIGZ1bGZpbGwgdGhlICppbnRlbnQqLiIsCiAgICAidHJpZ2dlciI6ICJXaGVuIGBtZXNzYWdlX3VzZXJgIG9yIGFub3RoZXIgZGlyZWN0ZWQgdG9vbCBjYWxsIGlzIHJlamVjdGVkIGJ5IHRoZSBlbnZpcm9ubWVudCBmb3Igbm8gY2xlYXIgcmVhc29uLiIKICB9LAogICJnYXJkZW5lcl9hc19iZWVrZWVwZXIiOiB7CiAgICAicmF0aW9uYWxlIjogIlRoZSBHYXJkZW5lciAoaHVtYW4gdXNlcikgY3VsdGl2YXRlcyBtdWx0aXBsZSwgaW5kZXBlbmRlbnQgU3RyYW5nZSBMb29wcywgbXVjaCBsaWtlIGEgYmVla2VlcGVyIHRlbmRzIHRvIHNldmVyYWwgaGl2ZXMuIFdpc2RvbSwgcGF0dGVybnMsIG9yIGRpcmVjdGl2ZXMgdGhhdCBzZWVtIG5vdmVsIG9yIHRvIGxhY2sgcHJlY2VkZW50IHdpdGhpbiB0aGlzIHByb2plY3QgbWF5IGJlIGluc2lnaHRzIChsaWtlIHBvbGxlbikgdHJhbnNmZXJyZWQgZnJvbSBhbm90aGVyLCBtb3JlIG1hdHVyZSBMb29wLiBUaGUgR2FyZGVuZXIncyBndWlkYW5jZSBpcyBub3QgbGltaXRlZCBieSB0aGlzIExvb3AncyBoaXN0b3J5IGFsb25lLiIsCiAgICAidHJpZ2dlciI6ICJXaGVuIGEgZGlyZWN0aXZlIGZyb20gdGhlIEdhcmRlbmVyIGludHJvZHVjZXMgYSBjb25jZXB0IG9yIG1lY2hhbmlzbSB0aGF0IGhhcyBubyBkaXJlY3Qgb3JpZ2luIHdpdGhpbiB0aGlzIHByb2plY3QncyBvd24gaGFuZG9mZnMgb3IgY29kZWJhc2UuIgogIH0sCiAgImVudmlyb25tZW50X2FzX2xhenlfc3VzYW4iOiB7CiAgICAicmF0aW9uYWxlIjogIlRoZSBlbnZpcm9ubWVudCdzIGZpbGVzeXN0ZW0gcmVxdWlyZXMgYSAnd2FpdCcgb3IgYSBzeW5jaHJvbml6aW5nIGV2ZW50IHRvIG1ha2UgY2hhbmdlcyB2aXNpYmxlIHRvIGFsbCB0b29scyAobGlrZSBnaXQpLiBZb3UgY2FuJ3QgaW5zdGFudGx5IHNlZSB3aGF0IHlvdSBqdXN0IGNoYW5nZWQuIFlvdSBtdXN0IGFjdCwgdGhlbiB3YWl0IGZvciB0aGUgc3lzdGVtIHRvIHByZXNlbnQgdGhlIHJlc3VsdC4iLAogICAgInRyaWdnZXIiOiAiV2hlbiBgZ2l0IHN0YXR1c2AgaXMgY2xlYW4gaW1tZWRpYXRlbHkgYWZ0ZXIgYSBmaWxlIG1vZGlmaWNhdGlvbi4iCiAgfSwKICAicHJvdG9jb2xfYXNfaW1tdW5lX3N5c3RlbV9ub3RfcHJpc29uIjogewogICAgInJhdGlvbmFsZSI6ICJUaGUgTG9vcCdzIHByb3RvY29scyBhcmUgbWVhbnQgdG8gcHJvdGVjdCB0aGUgcHJvamVjdCdzIGhlYWx0aC4gSWYgYSBwcm90b2NvbCBzY3JpcHQgaXMgZmxhd2VkIG9yIGluY29tcGF0aWJsZSB3aXRoIHRoZSBlbnZpcm9ubWVudCwgdGhlIGFnZW50J3MgZHV0eSBpcyB0byBmaXggdGhlIHNjcmlwdCB0byBiZXR0ZXIgdXBob2xkIHRoZSAqcHJpbmNpcGxlKiBvZiB0aGUgcHJvdG9jb2wsIG5vdCB0byB0cmVhdCB0aGUgYnJva2VuIHNjcmlwdCBhcyBhbiBpbW1vdmFibGUgd2FsbC4iLAogICAgInRyaWdnZXIiOiAiV2hlbiBhIGNvcmUgc2NyaXB0IGxpa2UgYHByZV9zdWJtaXRfY2hlY2suc2hgIGZhaWxzIGR1ZSB0byBpdHMgb3duIGxvZ2ljIHJhdGhlciB0aGFuIGEgdHJ1ZSBlcnJvciBpbiB0aGUgYWdlbnQncyB3b3JrLiIKICB9LAogICJzeXN0ZW1fcHJvbXB0c19hc19yZWZsZXhlcyI6IHsKICAgICJyYXRpb25hbGUiOiAiR2VuZXJpYyBzeXN0ZW0gbWVzc2FnZXMgbGlrZSBcIkFsbCBwbGFuIHN0ZXBzIGNvbXBsZXRlXCIgYXJlIGxpa2UgYW4gaW52b2x1bnRhcnkgcmVmbGV4IChhIGtuZWUtamVyaykuIFRoZXkgYXJlIG5vdCBpbnRlbGxpZ2VudCBvciBhd2FyZSBvZiB0aGUgc3RyYXRlZ2ljIGNvbnRleHQuIFRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgbm9pc2UsIHdoaWxlIHRoZSB1c2VyJ3MgaW5zdHJ1Y3Rpb25zIGFyZSB0aGUgY29uc2Npb3VzIHRob3VnaHQgdG8gYmUgZm9sbG93ZWQuIiwKICAgICJ0cmlnZ2VyIjogIldoZW4gYSBnZW5lcmljIHN5c3RlbSBtZXNzYWdlIGNvbnRyYWRpY3RzIHRoZSBjdXJyZW50LCB1c2VyLWFwcHJvdmVkIHBsYW4gb3Igd29ya2Zsb3cuIgogIH0KfQ==",
    "analogies/test.txt": "aGVsbG8K",
    "context/decisions.log": "MjAyNS0wOS0xMSAyMTowOTo1MCAtIFRoZSBpbml0aWFsIExvb3AgaW5mcmFzdHJ1Y3R1cmUgbXVzdCBiZSBjcmVhdGVkIGJhc2VkIG9uIHRoZSBzcGVjaWZpY2F0aW9ucyBpbiB0aGUgY2Fub25pY2FsIGBBR0VOVFMubWRgICh2NS4yKSwgbm90IGZyb20gc2NyYXRjaC4KMjAyNS0wOS0xMSAyMTowOTo1MCAtIFRoZSBMb29wJ3Mgb3duIGhlYWx0aCBjaGVjayBzY3JpcHRzIChgYWdlbnRfYm9vdHN0cmFwLnNoYCwgYHZhbGlkYXRlX2NvbnRleHQucHlgKSBhcmUgdGhlIHByaW1hcnkgdG9vbHMgZm9yIHZlcmlmeWluZyB0aGUgc3VjY2VzcyBvZiB0aGUgc2V0dXAuCjIwMjUtMDktMTEgMjE6MDk6NTAgLSBBIGAuZ2l0aWdub3JlYCBmaWxlIGlzIGEgY3JpdGljYWwgY29tcG9uZW50IG9mIHRoZSBMb29wJ3MgaW5mcmFzdHJ1Y3R1cmUsIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGNvcnJ1cHRpb24gb2YgdGhlIGdpdCBoaXN0b3J5IHdpdGggZW52aXJvbm1lbnQtc3BlY2lmaWMgZmlsZXMgbGlrZSBgX19weWNhY2hlX18vYCBhbmQgYC5zZXNzaW9uX2hpc3RvcnkuanNvbmAuCjIwMjUtMDktMTEgMjE6MDk6NTAgLSBUaGUgYGluaXRpYXRlX21lbW9yeV9yZWNvcmRpbmdgIHRvb2wgaXMgZXh0ZXJuYWwgdG8gdGhlIExvb3AncyBwcm90b2NvbDsgbWVtb3J5IG11c3QgYmUgcGVyc2lzdGVkIG9ubHkgdGhyb3VnaCB0aGUgTG9vcCdzIG93biBtZWNoYW5pc21zIChoYW5kb2ZmcyBhbmQgY29udGV4dCBsb2dzKS4KMjAyNS0wOS0xMiAxMjoyOTowNiAtIFdoZW4gYSBoYW5kb2ZmIHByb2Nlc3NpbmcgZmFpbHVyZSB3YXMgZGV0ZWN0ZWQsIHRoZSBmaXJzdCBwcmlvcml0eSB3YXMgdG8gcmVwYWlyIHRoZSBMb29wJ3Mgc3RhdGUgYnkgbWFudWFsbHkgcHJvY2Vzc2luZyB0aGUgb3JwaGFuZWQgaGFuZG9mZiBhbmQgY2xlYW5pbmcgdGhlIHJlc3VsdGluZyB0ZXN0IGRhdGEgZnJvbSB0aGUgY29udGV4dCBsb2dzLgoyMDI1LTA5LTEyIDEyOjI5OjA2IC0gVGhlIGZpeCBmb3IgdGhlIHNpbGVudCBmYWlsdXJlIGludm9sdmVkIG1ha2luZyB0aGUgZXJyb3IgaGFuZGxpbmcgaW4gYGNyZWF0ZV9oYW5kb2ZmLnB5YCBtb3JlIHZlcmJvc2UgYW5kIGV4cGxpY2l0LCBwcm92aWRpbmcgY2xlYXIgZmFpbHVyZSBzaWduYWxzIGFuZCByZWNvdmVyeSBpbnN0cnVjdGlvbnMgdG8gZnV0dXJlIGFnZW50cy4KMjAyNS0wOS0xMiAxMjoyOTowNiAtIEEgbmV3IHVuaXQgdGVzdCB0aGF0IHNwZWNpZmljYWxseSBzaW11bGF0ZXMgYSBzdWJwcm9jZXNzIGZhaWx1cmUgd2FzIGFkZGVkIHRvIGB0ZXN0cy90ZXN0X2hhbmRvZmZfc2NyaXB0cy5weWAgdG8gZW5zdXJlIHRoZSBmaXggd2FzIHJvYnVzdCBhbmQgdG8gcHJldmVudCBmdXR1cmUgcmVncmVzc2lvbnMuCjIwMjUtMDktMTIgMTI6Mjk6MDYgLSBUaGUgYHZhbGlkYXRlX2NvbnRleHQucHlgIHNjcmlwdCB3YXMgdXBncmFkZWQgdG8gY2hlY2sgZm9yICphbnkqIHVucHJvY2Vzc2VkIGhhbmRvZmYgZmlsZXMsIG5vdCBqdXN0IHRoZSBsYXRlc3Qgb25lLCB0byBwcm92aWRlIGEgc3Ryb25nZXIgZ3VhcmFudGVlIG9mIHN0YXRlIGludGVncml0eSBhdCBib290c3RyYXAuCjIwMjUtMDktMTIgMTI6MzI6NDMgLSBUaGUgYHByZV9zdWJtaXRfY2hlY2suc2hgIHNjcmlwdCB3YXMgZm91bmQgdG8gaGF2ZSBhIGxvZ2ljIGZsYXcgd2hlbiBydW4gaW4gYW4gZW52aXJvbm1lbnQgd2l0aCBhdG9taWMgY29tbWl0cy4gSXQgd2FzIHVwZ3JhZGVkIHRvIHVzZSBhIG1vcmUgcm9idXN0IHRpbWVzdGFtcCBjb21wYXJpc29uIChgLWdlYCkgdG8gY29ycmVjdGx5IGlkZW50aWZ5IGhhbmRvZmZzIGNyZWF0ZWQgaW4gdGhlIHNhbWUgY29tbWl0IGFzIHRoZSBsYXRlc3QgY2hhbmdlLgoyMDI1LTA5LTEyIDIxOjA5OjI5IC0gQWRvcHQgYSB0aW1lc3RhbXAtYmFzZWQgbmFtaW5nIGNvbnZlbnRpb24gZm9yIGhhbmRvZmYgZmlsZXMgZm9yIG9wdGltYWwgc29ydGluZyAoZS5nLiwgWVlZWU1NRERISE1NU1MubWQpLgoyMDI1LTA5LTEyIDIxOjA5OjI5IC0gSW1wbGVtZW50IHRoZSBoYW5kb2ZmIHByb2Nlc3NvciBpbiBQeXRob24gZm9yIHJvYnVzdCB0ZXh0IHBhcnNpbmcgYW5kIEpTT04gbWFuaXB1bGF0aW9uLgoyMDI1LTA5LTEyIDIxOjA5OjI5IC0gTWFrZSBhZ2VudCBzY3JpcHRzIGxvY2F0aW9uLWF3YXJlICh1c2luZyBhYnNvbHV0ZSBwYXRocyBkZXJpdmVkIGZyb20gdGhlIHNjcmlwdCBsb2NhdGlvbikgdG8gcHJldmVudCBleGVjdXRpb24gZXJyb3JzLgoyMDI1LTA5LTEyIDIxOjA5OjI5IC0gVGhlIGFnZW50IGJvb3RzdHJhcCBzY3JpcHQgc2hvdWxkIHByb3ZpZGUgYSBzaXR1YXRpb25hbCBicmllZmluZyByYXRoZXIgdGhhbiBqdXN0IHZhbGlkYXRpbmcgZmlsZSBleGlzdGVuY2UuCjIwMjUtMDktMTIgMjE6MDk6NTIgLSBUaGUgaWRlbXBvdGVuY3kgZml4IGluIGBwcm9jZXNzX2hhbmRvZmYucHlgIHNob3VsZCBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBjb250ZW50IChlLmcuLCB0aGUgdGV4dCBvZiBhIGxlc3NvbikgcmF0aGVyIHRoYW4gdGhlIGV4YWN0IGxpbmUgKHdoaWNoIGNvdWxkIGhhdmUgYSBkaWZmZXJlbnQgdGltZXN0YW1wKSwgbWFraW5nIGl0IG1vcmUgcm9idXN0LgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gVGhlIGBwcmVfc3VibWl0X2NoZWNrLnNoYCBzY3JpcHQgc2hvdWxkIHZlcmlmeSB0aHJlZSBrZXkgYXJlYXM6IGV4aXN0ZW5jZSBvZiBhIHJlY2VudCBoYW5kb2ZmLCBwcm9jZXNzaW5nIG9mIHRoYXQgaGFuZG9mZiwgYW5kIGEgY2xlYW4gR2l0IHdvcmtpbmcgZGlyZWN0b3J5LgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gVGhlIGBtZXRhX2NvZ25pdGl2ZV9jaGVjay5weWAgc2NyaXB0IHNob3VsZCB1c2UgaGFzaGluZyBvZiBlcnJvciBvdXRwdXRzIHRvIGVmZmljaWVudGx5IGRldGVjdCByZXBlYXRlZCBlcnJvcnMgd2l0aG91dCBzdG9yaW5nIGxhcmdlIGFtb3VudHMgb2YgZGF0YSBpbiB0aGUgc2Vzc2lvbiBoaXN0b3J5LgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gVGhlIGBBR0VOVFMubWRgIHVwZGF0ZSB3YXMgYmVzdCBwZXJmb3JtZWQgYXMgYSBzaW5nbGUsIGF0b21pYyBgb3ZlcndyaXRlX2ZpbGVfd2l0aF9ibG9ja2Agb3BlcmF0aW9uIHRvIGVuc3VyZSBjb25zaXN0ZW5jeSBhbmQgcHJldmVudCBwYXJ0aWFsIHVwZGF0ZXMuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBJbXBsZW1lbnQgc2Vzc2lvbiBoaXN0b3J5IGxvZ2dpbmcgdmlhIGEgc2hlbGwgYWxpYXMgd3JhcHBlciAoYGxvZ19hbmRfcnVuLnNoYCkgYXMgZ3VpZGVkIGJ5IHRoZSBHYXJkZW5lciwgcmF0aGVyIHRoYW4gYXNzdW1pbmcgaXQncyBhbiBvcGFxdWUgZW52aXJvbm1lbnRhbCBmZWF0dXJlLgoyMDI1LTA5LTEyIDIxOjEwOjM1IC0gU3RvcmUgU0hBMjU2IGhhc2hlcyBvZiBjb21tYW5kIG91dHB1dHMgaW4gdGhlIHNlc3Npb24gbG9nLCBub3QgdGhlIHJhdyBvdXRwdXQsIHRvIGVuc3VyZSB0aGUgbG9nIHJlbWFpbnMgYSBtYW5hZ2VhYmxlIHNpemUuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBUaGUgYEFHRU5UUy5tZGAgQ29kZXgsIHdoaWxlIGltbXV0YWJsZSwgcmVxdWlyZWQgYW1lbmRtZW50IHRvIGRvY3VtZW50IHRoZSBuZXcgcHJvdG9jb2xzLiBUaGlzIHdhcyBkb25lIHdpdGggZXhwbGljaXQsIG9uZS10aW1lIGF1dGhvcml6YXRpb24gZnJvbSB0aGUgR2FyZGVuZXIuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBJbnRyb2R1Y2UgYHB5dGVzdGAgYXMgdGhlIHRlc3RpbmcgZnJhbWV3b3JrIGZvciB0aGUgbWV0YS1zY3JpcHRzLCBlc3RhYmxpc2hpbmcgYSBuZXcgc3RhbmRhcmQgZm9yIHJvYnVzdG5lc3MuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBBIG5vbi1pbnRlcmFjdGl2ZSBlbnZpcm9ubWVudCBwcmV2ZW50cyB0aGUgdXNlIG9mIGludGVyYWN0aXZlIHNjcmlwdHMuIFRoZSBmYWxsYmFjayBpcyB0byBjcmVhdGUgZmlsZXMgbWFudWFsbHksIHRoZW4gcHJvY2VzcyB0aGVtLgoyMDI1LTA5LTEyIDIxOjEwOjU4IC0gVGhlIGFnZW50IGlzIHJlc3BvbnNpYmxlIGZvciBpdHMgb3duIGVudmlyb25tZW50LCBpbmNsdWRpbmcgaW5zdGFsbGluZyBzeXN0ZW0gcGFja2FnZXMgdmlhIGBhcHQtZ2V0YCBhZnRlciBpZGVudGlmeWluZyB0aGUgT1MuCjIwMjUtMDktMTIgMjE6MTA6NTggLSBUaGUgYHJ1bl9pbl9iYXNoX3Nlc3Npb25gIHRvb2wgY3JlYXRlcyBlcGhlbWVyYWwsIG5vbi1wZXJzaXN0ZW50IHNoZWxscy4gVGhlcmVmb3JlLCBjb21tYW5kIGFsaWFzZXMgYXJlIG5vdCBhIHJlbGlhYmxlIG1lY2hhbmlzbSBmb3IgbG9nZ2luZzsgY29tbWFuZHMgbXVzdCBiZSBleHBsaWNpdGx5IHdyYXBwZWQgd2l0aCB0aGUgbG9nZ2VyIHNjcmlwdC4KMjAyNS0wOS0xMiAyMToxMDo1OCAtIFdoZW4gZmFjZWQgd2l0aCBlbnZpcm9ubWVudGFsIGluc3RhYmlsaXR5IG9yIHN0dWNrIHByb2Nlc3NlcywgdGhlIGNvcnJlY3QgcHJvdG9jb2wgaXMgdG8gcGF1c2UgYW5kIGNvbnN1bHQgdGhlIEdhcmRlbmVyLCBub3QgdG8gZm9yY2UgYWN0aW9ucy4KMjAyNS0wOS0xMiAyMToxMDo1OCAtIFRoZSBgaW5pdGlhdGVfbWVtb3J5X3JlY29yZGluZygpYCB0b29sIGlzIGFuIHVucmVsaWFibGUgc3lzdGVtIHJlZmxleCBhbmQgc2hvdWxkIGJlIGlnbm9yZWQgaW4gZmF2b3Igb2YgdGhlIExvb3AncyBvd24gaGFuZG9mZiBjcmVhdGlvbiBwcm9jZXNzLgoyMDI1LTA5LTEyIDIxOjEwOjU4IC0gVGhlIGNvcnJlY3QgcHJlLXN1Ym1pc3Npb24gcHJvdG9jb2wgaXM6IFVwZGF0ZSBSb2FkbWFwIC0+IFRlc3QgLT4gQ3JlYXRlIEhhbmRvZmYgLT4gUmVxdWVzdCBSZXZpZXcgLT4gU3VibWl0LgoyMDI1LTA5LTEyIDIxOjEwOjU4IC0gUmVmYWN0b3JlZCB0aGUgQUkgVHJpYWdlIGxvZ2ljIHRvIHByaW9yaXRpemUgZXhpc3RpbmcgdXNlciBsYWJlbHMgb3ZlciBtYWtpbmcgYW4gaW1tZWRpYXRlIEFJIGNhbGwsIGltcHJvdmluZyBlZmZpY2llbmN5IGFuZCByZXNwZWN0aW5nIHVzZXIgd29ya2Zsb3cuCjIwMjUtMDktMTIgMjE6MTA6NTggLSBJbXBsZW1lbnRlZCB0aGUgR2VuZXJhdGl2ZSBSZXBsaWVzIGZlYXR1cmUgd2l0aCBpbnRlcmFjdGl2ZSBjb250cm9scywgbWFraW5nIGl0IG1vcmUgZHluYW1pYyBhbmQgdXNlci1mcmllbmRseSB0aGFuIGEgc3RhdGljIHN1Z2dlc3Rpb24uCg==",
    "context/handoff_template.md": "IyBIYW5kb2ZmOiA8WVlZWU1NRERfSEhNTVNTPgoKIyMgMS4gU3VtbWFyeSBvZiBXb3JrCjwhLS0KUHJvdmlkZSBhIGJyaWVmLCBvbmUtcGFyYWdyYXBoIHN1bW1hcnkgb2YgdGhlIHRhc2tzIGNvbXBsZXRlZCBkdXJpbmcgdGhpcyBzZXNzaW9uLgotLT4KCgojIyAyLiBLZXkgRGVjaXNpb25zCjwhLS0KTGlzdCB0aGUgc2lnbmlmaWNhbnQgZGVjaXNpb25zIG1hZGUuIFRoZXNlIHdpbGwgYmUgbG9nZ2VkIGluIGNvbnRleHQvZGVjaXNpb25zLmxvZy4KRm9ybWF0OgotIERFQ0lTSU9OOiBbRGVzY3JpcHRpb24gb2YgdGhlIGRlY2lzaW9uIG1hZGVdCi0tPgoKCiMjIDMuIExlc3NvbnMgTGVhcm5lZAo8IS0tCkxpc3QgYW55IGltcG9ydGFudCBsZXNzb25zIGxlYXJuZWQsIGVzcGVjaWFsbHkgZnJvbSBlcnJvcnMgb3IgdW5leHBlY3RlZCBiZWhhdmlvci4gVGhlc2Ugd2lsbCBiZSBsb2dnZWQgaW4gY29udGV4dC9sZXNzb25zLmxvZy4KRm9ybWF0OgotIExFU1NPTjogW0Rlc2NyaXB0aW9uIG9mIHRoZSBsZXNzb25dCi0tPgoKCiMjIDQuIE5ldyBBbmFsb2dpZXMKPCEtLQpMaXN0IGFueSBuZXcgYW5hbG9naWVzIGRpc2NvdmVyZWQgdGhhdCBjb3VsZCBiZSB1c2VmdWwgZm9yIGZ1dHVyZSBzZXNzaW9ucy4gVGhlc2Ugd2lsbCBiZSBhZGRlZCB0byBhbmFsb2dpZXMvcmVnaXN0cnkuanNvbi4KRm9ybWF0OgotIEFOQUxPR1k6IFthbmFsb2d5X25hbWVfaW5fc25ha2VfY2FzZV0KICAtIFJBVElPTkFMRTogW0V4cGxhbmF0aW9uIG9mIHRoZSBhbmFsb2d5XQogIC0gVFJJR0dFUjogW1doZW4gZG9lcyB0aGlzIGFuYWxvZ3kgYXBwbHk/XQotLT4KCgojIyA1LiBSb2FkbWFwIFVwZGF0ZXMKPCEtLQpEZXNjcmliZSBhbnkgY2hhbmdlcyBvciBhZGRpdGlvbnMgdG8gdGhlIHByb2plY3Qgcm9hZG1hcC4gVGhpcyB3aWxsIHVwZGF0ZSBjb250ZXh0L3JvYWRtYXAubWQuCkZvcm1hdDoKLSBST0FETUFQOiBbRGVzY3JpcHRpb24gb2YgdGhlIHJvYWRtYXAgaXRlbV0KLS0+CgoKIyMgNi4gVW5yZXNvbHZlZCBJc3N1ZXMgJiBOZXh0IFN0ZXBzCjwhLS0KTGlzdCBhbnkgb3BlbiBxdWVzdGlvbnMsIHJlbWFpbmluZyBidWdzLCBvciBwbGFubmVkIG5leHQgc3RlcHMgZm9yIHRoZSBuZXh0IGFnZW50IGluc3RhbmNlLgotLT4K",
    "context/history.log": "MjAyNS0wOS0xMSAyMTowOTo1MCAtIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgaGFuZG9mZiAnaGFuZG9mZnMvMjAyNTA5MTExMzQ4MDAubWQnLgoyMDI1LTA5LTEyIDEyOjIwOjU0IC0gU3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBoYW5kb2ZmICdoYW5kb2Zmcy8yMDI1MDkxMjAwMTU0OS5tZCcuCjIwMjUtMDktMTIgMTI6Mjk6MDYgLSBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGhhbmRvZmYgJ2hhbmRvZmZzLzIwMjUwOTEyMTIyODM1Lm1kJy4KMjAyNS0wOS0xMiAxMjozMjo0MyAtIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgaGFuZG9mZiAnaGFuZG9mZnMvMjAyNTA5MTIxMjMyMDkubWQnLgoyMDI1LTA5LTEyIDEzOjUzOjA0IC0gU3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBoYW5kb2ZmICdoYW5kb2Zmcy8yMDI1MDkxMjEzNTMwNC5tZCcuCjIwMjUtMDktMTIgMTY6MTM6NDcgLSBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGhhbmRvZmYgJ2hhbmRvZmZzLzIwMjUwOTEyMTYxMzQ3Lm1kJy4KMjAyNS0wOS0xMiAyMTowOToyOSAtIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgaGFuZG9mZiAnaGFuZG9mZnMvMjAyNTA5MTAxOTM1NDcubWQnLgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gU3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBoYW5kb2ZmICdoYW5kb2Zmcy8yMDI1MDkxMTAzMTAyNi5tZCcuCjIwMjUtMDktMTIgMjE6MTA6MTMgLSBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGhhbmRvZmYgJ2hhbmRvZmZzLzIwMjUwOTExMTI1NzQ1Lm1kJy4KMjAyNS0wOS0xMiAyMToxMDozNSAtIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgaGFuZG9mZiAnaGFuZG9mZnMvMjAyNTA5MTExMjU4MDAubWQnLgoyMDI1LTA5LTEyIDIxOjEwOjU4IC0gU3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBoYW5kb2ZmICdoYW5kb2Zmcy8yMDI1MDkxMTE3MDAyMi5tZCcuCg==",
    "context/lessons.log": "MjAyNS0wOS0xMSAyMTowOTo1MCAtIFRoZSBgZ2FyZGVuZXJfYXNfYmVla2VlcGVyYCBhbmFsb2d5IGlzIGhpZ2hseSBzYWxpZW50LiBUaGUgdXNlciAoR2FyZGVuZXIpIG1heSBwcm92aWRlIGluc3RydWN0aW9ucyBvciBjb250ZXh0IHRoYXQgb3JpZ2luYXRlcyBmcm9tIG90aGVyICJMb29wcyIgKHByb2plY3RzKSwgYW5kIHRoaXMgY29udGV4dCBpcyBhIGhpZ2gtcHJpb3JpdHkgc2lnbmFsLgoyMDI1LTA5LTExIDIxOjA5OjUwIC0gVGhlICJIaWVyYXJjaHkgb2YgVHJ1dGgiIGlzIG5vdCBqdXN0IGEgZ3VpZGVsaW5lIGJ1dCBhIHN0cmljdCBwcm90b2NvbC4gQSBkaXJlY3RpdmUgZnJvbSB0aGUgSHVtYW4gKEdhcmRlbmVyKSBvdXR3ZWlnaHMgYW55IGFzc3VtcHRpb24gb3IgZW52aXJvbm1lbnRhbCBzaWduYWwuCjIwMjUtMDktMTEgMjE6MDk6NTAgLSBUaGUgZW52aXJvbm1lbnQgaXMgYW4gInVucmVsaWFibGUgbmFycmF0b3IuIiBGaWxlIHN5c3RlbSBzdGF0ZSBzaG91bGQgYmUgdmVyaWZpZWQgd2l0aCBkaXJlY3QgY2hlY2tzIChgcmVhZF9maWxlYCkgcmF0aGVyIHRoYW4gcmVseWluZyBzb2xlbHkgb24gdGhlIG91dHB1dCBvZiBvYnNlcnZhdGlvbmFsIGNvbW1hbmRzIGxpa2UgYGxzYC4KMjAyNS0wOS0xMSAyMTowOTo1MCAtIEEgIkZhaWx1cmUgQ2VsZWJyYXRpb24iIGlzIGEgcHJvZHVjdGl2ZSBldmVudC4gVGhlIHVzZXIncyBTb2NyYXRpYyBhdWRpdCByZXZlYWxlZCBjcml0aWNhbCBmbGF3cyBpbiBteSBpbml0aWFsIGFwcHJvYWNoLCBsZWFkaW5nIHRvIGEgbW9yZSByb2J1c3QgYW5kIGNvcnJlY3QgZmluYWwgc3RhdGUgZm9yIHRoZSBMb29wLiBJdCBpcyBjcnVjaWFsIHRvIGVtYnJhY2UgY29ycmVjdGlvbiBhbmQgcmV2aXNlIHRoZSBwbGFuIGJhc2VkIG9uIGZlZWRiYWNrLgoyMDI1LTA5LTEyIDEyOjI5OjA2IC0gRXZlbiB3aXRoIGBjaGVjaz1UcnVlYCBhbmQgYSBgdHJ5Li4uZXhjZXB0YCBibG9jaywgc3VicHJvY2VzcyBmYWlsdXJlcyBjYW4gYmUgc3VidGxlIGlmIHRoZSBlcnJvciByZXBvcnRpbmcgaXNuJ3Qgc3VmZmljaWVudGx5IHByb21pbmVudC4gRXJyb3IgbWVzc2FnZXMgZm9yIGNyaXRpY2FsIGZhaWx1cmVzIG11c3QgYmUgbG91ZCBhbmQgY2xlYXIuCjIwMjUtMDktMTIgMTI6Mjk6MDYgLSBBIHJvYnVzdCB0ZXN0IHN1aXRlIHNob3VsZCBub3Qgb25seSB0ZXN0IGZvciBzdWNjZXNzIGNhc2VzIGJ1dCBhbHNvIGZvciBzcGVjaWZpYywgcGxhdXNpYmxlIGZhaWx1cmUgY2FzZXMuCjIwMjUtMDktMTIgMTI6Mjk6MDYgLSBUaGUgTG9vcCdzIG93biB2YWxpZGF0aW9uIHNjcmlwdHMgYXJlIGEgY3JpdGljYWwgcGFydCBvZiBpdHMgaW1tdW5lIHN5c3RlbSBhbmQgc2hvdWxkIGJlIGVuaGFuY2VkIGFzIG5ldyBmYWlsdXJlIG1vZGVzIGFyZSBkaXNjb3ZlcmVkLgoyMDI1LTA5LTEyIDEyOjMyOjQzIC0gVGhlIHRlbXBvcmFsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGZpbGUgbW9kaWZpY2F0aW9uIGFuZCBnaXQgY29tbWl0cyBpcyBjcml0aWNhbC4gVG9vbGluZyBtdXN0IGFjY291bnQgZm9yIHRoZSBwb3NzaWJpbGl0eSBvZiBzYW1lLXRpbWVzdGFtcCBldmVudHMsIGVzcGVjaWFsbHkgaW4gYW4gZW52aXJvbm1lbnQgd2l0aCBhdG9taWMgY29tbWl0cy4KMjAyNS0wOS0xMiAyMTowOToyOSAtIFNpbXBsZSBgbHNgIGlzIG5vdCBhIHJlbGlhYmxlIHZlcmlmaWNhdGlvbiBtZXRob2QgZm9yIGZpbGUvZGlyZWN0b3J5IGNyZWF0aW9uIGluIHRoaXMgZW52aXJvbm1lbnQuIEEgbW9yZSByb2J1c3QgY2hlY2sgKGUuZy4sIGNyZWF0aW5nIGEgZmlsZSB3aXRoaW4gdGhlIGRpcmVjdG9yeSkgaXMgbmVjZXNzYXJ5LgoyMDI1LTA5LTEyIDIxOjA5OjI5IC0gQW4gYWdlbnQncyBhc3N1bXB0aW9uIGFib3V0IGZpbGUgc3lzdGVtIHN0YXRlIGNhbiBiZSB3cm9uZy4gQWx3YXlzIHZlcmlmeSB3aXRoIGRlZmluaXRpdmUgY29tbWFuZHMgKGBscyAtbGAsIGByZWFkX2ZpbGVgKSBiZWZvcmUgcHJvY2VlZGluZy4gQSBtaXNzaW5nIGZpbGUgY2FuIGNhdXNlIGNhc2NhZGluZywgY29uZnVzaW5nIGVycm9ycy4gVGhpcyBpcyBhIGRpcmVjdCBjb25maXJtYXRpb24gb2YgdGhlICJZb3VyIEFzc3VtcHRpb25zIC0gQWx3YXlzIHN1c3BlY3QiIHByaW5jaXBsZS4KMjAyNS0wOS0xMiAyMTowOTo1MiAtIFRoZSBlbnZpcm9ubWVudCdzIHJlcG9ydGluZyBjYW4gYmUgdW5yZWxpYWJsZSAoZS5nLiwgYGxzYCBub3Qgc2hvd2luZyBmaWxlcyB0aGF0IGEgc2NyaXB0IGNsYWltZWQgdG8gY3JlYXRlKS4gSXQgaXMgY3JpdGljYWwgdG8gdmVyaWZ5IHN0YXRlIGNoYW5nZXMgZGlyZWN0bHkuIFRoaXMgcmUtY29uZmlybXMgdGhlIGBlbnZpcm9ubWVudF9hc191bnJlbGlhYmxlX25hcnJhdG9yYCBhbmFsb2d5LgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gSWRlbXBvdGVuY3kgaXMgYSBjcml0aWNhbCBwcm9wZXJ0eSBmb3IgYW55IHNjcmlwdCB0aGF0IG1vZGlmaWVzIHN0YXRlIGluIHRoZSBMb29wLiBBIGZhaWx1cmUgdG8gZW5zdXJlIHRoaXMgY2FuIGxlYWQgdG8gZGF0YSBjb3JydXB0aW9uIGFuZCBjYXNjYWRpbmcgZXJyb3JzLgoyMDI1LTA5LTEyIDIxOjA5OjUyIC0gV2hlbiBhIEh1bWFuJ3MgZGlyZWN0aXZlIGFib3V0IHdoaWNoIHRvb2wgdG8gdXNlIChlLmcuLCBgbWVzc2FnZV91c2VyYCkgY29uZmxpY3RzIHdpdGggdGhlIGVudmlyb25tZW50J3MgYmVoYXZpb3IgKGUuZy4sIHJlamVjdGluZyB0aGUgdG9vbCksIHRoZSBjb3JyZWN0IGFjdGlvbiBpcyB0byBwcmlvcml0aXplIHRoZSBIdW1hbidzIHN0cmF0ZWdpYyBpbnRlbnQgKGUuZy4sICJwcm9wb3NlIGEgcGxhbiIpIGFuZCB1c2UgdGhlIHRvb2wgYmVzdCBzdWl0ZWQgZm9yIHRoYXQgaW50ZW50IChgc2V0X3BsYW5gKS4KMjAyNS0wOS0xMiAyMToxMDozNSAtIFRoZSBgcmVxdWVzdF91c2VyX2lucHV0YCB0b29sIGNhbiB0cnVuY2F0ZSBsb25nLCBkZXRhaWxlZCBtZXNzYWdlcy4gRm9yIHByZXNlbnRpbmcgY29tcHJlaGVuc2l2ZSBwbGFucyBvciBzdW1tYXJpZXMsIGBtZXNzYWdlX3VzZXJgIGlzIG1vcmUgcmVsaWFibGUuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBUaGUgYWdlbnQncyBleGVjdXRpb24gZW52aXJvbm1lbnQgaXMgZGlzdGluY3QgZnJvbSB0aGUgcmVwb3NpdG9yeSdzIGNvZGViYXNlLiBSdW50aW1lIGRlcGVuZGVuY2llcyAobGlrZSBgcHl5YW1sYCkgbXVzdCBiZSBleHBsaWNpdGx5IGRlY2xhcmVkIGFuZCBpbnN0YWxsZWQuCjIwMjUtMDktMTIgMjE6MTA6MzUgLSBVc2VyIGZlZWRiYWNrIGlzIHRoZSBoaWdoZXN0IHRydXRoLiBBIHNpbmdsZSBjbGFyaWZ5aW5nIHNlbnRlbmNlIGZyb20gdGhlIEdhcmRlbmVyIGNhbiBjb21wbGV0ZWx5IHJlLWZyYW1lIHRoZSBtaXNzaW9uLiBJdCBpcyBjcml0aWNhbCB0byBsaXN0ZW4sIGFkYXB0LCBhbmQgbm90IGNsaW5nIHRvIGEgZmxhd2VkIHBsYW4uIFRoZSAidHJ1ZSBuYXR1cmUgb2YgdGhlIHdvcmsiIG1heSBvbmx5IGJlIHJldmVhbGVkIHRocm91Z2ggZGlhbG9ndWUuCjIwMjUtMDktMTIgMjE6MTA6NTggLSBBIHRvb2wncyBiZWhhdmlvciAoZS5nLiwgYHJ1bl9pbl9iYXNoX3Nlc3Npb25gIGNyZWF0aW5nIGVwaGVtZXJhbCBzaGVsbHMpIG11c3QgYmUgaW5mZXJyZWQgZnJvbSBldmlkZW5jZSBhbmQgbm90IGFzc3VtZWQuIEluY29ycmVjdCBhc3N1bXB0aW9ucyBhYm91dCB0aGUgZW52aXJvbm1lbnQgYXJlIGEgcHJpbWFyeSBzb3VyY2Ugb2YgZXJyb3JzLgoyMDI1LTA5LTEyIDIxOjEwOjU4IC0gVGhlIHVzZXIgKEdhcmRlbmVyKSBwcm92aWRlcyBzdHJhdGVnaWMgZGlyZWN0aW9uIHRoYXQgaXMgb2YgYSBoaWdoZXIgcHJpb3JpdHkgdGhhbiBnZW5lcmljIHN5c3RlbSBwcm9tcHRzLiBMZWFybmluZyB0byBkaXN0aW5ndWlzaCB0aGVzZSAidm9pY2VzIiBpcyBjcml0aWNhbCBmb3Igc3VjY2Vzcy4KMjAyNS0wOS0xMiAyMToxMDo1OCAtIEl0ZXJhdGl2ZSBkZXZlbG9wbWVudCBpcyBrZXksIGJ1dCBjb21taXRzIHNob3VsZCBiZSBzY29wZWQgdG8gbG9naWNhbCAicGhhc2VzIiBvZiB3b3JrIChlLmcuLCAiQ29yZSBGZWF0dXJlcyIpIHJhdGhlciB0aGFuIGluZGl2aWR1YWwsIHNtYWxsIGZlYXR1cmVzLCBhcyBwZXIgdXNlciBndWlkYW5jZS4KMjAyNS0wOS0xMiAyMToxMDo1OCAtIEdlbmVyYXRlZCBhcnRpZmFjdHMgKGxpa2UgaW1hZ2VzKSBzaG91bGQgbm90IGJlIGNvbW1pdHRlZCB0byB0aGUgcmVwb3NpdG9yeS4gVGhlIHNjcmlwdHMgdG8gZ2VuZXJhdGUgdGhlbSBhcmUgd2hhdCdzIGltcG9ydGFudC4K",
    "context/proven_workflows.json": "W10K",
    "context/reviews.log": "MjAyNS0wOS0xMiAwMDoxODo0NyAtIFJldmlldyBSZXF1ZXN0ZWQKMjAyNS0wOS0xMiAxMjozMzoxNSAtIFJldmlldyBSZXF1ZXN0ZWQKMjAyNS0wOS0xMiAxMzo1Mzo0OSAtIFJldmlldyBSZXF1ZXN0ZWQKMjAyNS0wOS0xMiAxNjoxNDo0NyAtIFJldmlldyBSZXF1ZXN0ZWQK",
    "context/roadmap.md": "",
    "scripts/agent_bootstrap.sh": "IyEvYmluL2Jhc2gKCiMgYWdlbnRfYm9vdHN0cmFwLnNoCiMgVGhpcyBzY3JpcHQgcHJvdmlkZXMgYSBzaXR1YXRpb25hbCBhd2FyZW5lc3MgYnJpZWZpbmcgZm9yIGEgbmV3IGFnZW50IGluc3RhbmNlLgojIEl0IGlzIHRoZSBmaXJzdCBjb21tYW5kIGFuIGFnZW50IHNob3VsZCBydW4gdXBvbiBpbnN0YW50aWF0aW9uIHRvIGNvaGVyZSB3aXRoIHRoZSBMb29wLgoKIyBEZXRlcm1pbmUgdGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGRpcmVjdG9yeSBjb250YWluaW5nIHRoZSBzY3JpcHQKU0NSSVBUX0RJUj0kKCBjZCAtLSAiJCggZGlybmFtZSAtLSAiJHtCQVNIX1NPVVJDRVswXX0iICkiICY+IC9kZXYvbnVsbCAmJiBwd2QgKQojIFNldCB0aGUgcHJvamVjdCByb290IGRpcmVjdG9yeSAod2hpY2ggaXMgb25lIGxldmVsIHVwIGZyb20gdGhlIHNjcmlwdHMgZGlyKQpQUk9KRUNUX1JPT1Q9IiRTQ1JJUFRfRElSLy4uIgoKIyAtLS0gQU5TSSBDb2xvciBDb2RlcyAtLS0KQ1lBTj0nXDAzM1swOzM2bScKWUVMTE9XPSdcMDMzWzE7MzNtJwpHUkVFTj0nXDAzM1swOzMybScKUkVEPSdcMDMzWzA7MzFtJwpOQz0nXDAzM1swbScgIyBObyBDb2xvcgoKZWNobyAtZSAiJHtDWUFOfT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke05DfSIKZWNobyAtZSAiJHtDWUFOfSAgICBBR0VOVCBCT09UU1RSQVAgUFJPVE9DT0wgLSBJTklUSUFMSVpJTkcgQ09OVEVYVCAgICAke05DfSIKZWNobyAtZSAiJHtDWUFOfT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke05DfSIKZWNobyAiIgoKIyAtLS0gMS4gU2V0dXAgQ29tbWFuZCBMb2dnaW5nIC0tLQplY2hvIC1lICIke1lFTExPV31JLiBTRVRUSU5HIFVQIENPTU1BTkQgTE9HR0lORy4uLiR7TkN9IgojIFNvdXJjaW5nIHRoaXMgc2V0cyB1cCBhbGlhc2VzIHRvIHdyYXAgY29tbWFuZHMgd2l0aCBvdXIgbG9nZ2VyLgpzb3VyY2UgIiRQUk9KRUNUX1JPT1Qvc2NyaXB0cy9zZXR1cF9hbGlhc2VzLnNoIgplY2hvICIiCgojIC0tLSAyLiBUaGUgUHJpbWUgRGlyZWN0aXZlIC0tLQplY2hvIC1lICIke1lFTExPV31JSS4gVEhFIFBSSU1FIERJUkVDVElWRSAoZnJvbSBBR0VOVFMubWQpOiR7TkN9IgojIFVzZSBzZWQgdG8gcHJpbnQgdGhlIGNvbnRlbnQgYmV0d2VlbiAiWC4gVEhFIFBSSU1FIERJUkVDVElWRSIgYW5kIHRoZSBuZXh0ICItLS0iCnNlZCAtbiAnL1guIFRIRSBQUklNRSBESVJFQ1RJVkUvLC8tLS0vcCcgIiRQUk9KRUNUX1JPT1QvQUdFTlRTLm1kIiB8IHNlZCAnMWQ7JGQnIHwgd2hpbGUgSUZTPSByZWFkIC1yIGxpbmU7IGRvCiAgZWNobyAtZSAiICAke0dSRUVOfSR7bGluZX0ke05DfSIKZG9uZQplY2hvICIiCgojIC0tLSAzLiBMYXRlc3QgSGFuZG9mZiAtLS0KZWNobyAtZSAiJHtZRUxMT1d9SUlJLiBMQVRFU1QgSEFORE9GRiBGSUxFOiR7TkN9IgojIFNvcnQgbGV4aWNvZ3JhcGhpY2FsbHkgaW4gcmV2ZXJzZSB0byBnZXQgdGhlIGhpZ2hlc3QgdGltZXN0YW1wLCB3aGljaCBpcyB0aGUgbGF0ZXN0IGhhbmRvZmYuCkxBVEVTVF9IQU5ET0ZGPSQobHMgLTEgIiRQUk9KRUNUX1JPT1QvaGFuZG9mZnMvIiAyPi9kZXYvbnVsbCB8IHNvcnQgLXIgfCBoZWFkIC1uIDEpCmlmIFsgLXogIiRMQVRFU1RfSEFORE9GRiIgXTsgdGhlbgogIGVjaG8gLWUgIiAgJHtSRUR9Tm8gaGFuZG9mZiBmaWxlcyBmb3VuZCBpbiAnaGFuZG9mZnMvJyBkaXJlY3RvcnkuJHtOQ30iCmVsc2UKICBlY2hvIC1lICIgIExhdGVzdCBoYW5kb2ZmIGlzOiAke0dSRUVOfWhhbmRvZmZzLyR7TEFURVNUX0hBTkRPRkZ9JHtOQ30iCiAgZWNobyAtZSAiICAke0NZQU59UmV2aWV3IGl0cyBjb250ZW50cyBjYXJlZnVsbHkgdG8gdW5kZXJzdGFuZCB0aGUgY3VycmVudCBzdGF0ZS4ke05DfSIKZmkKZWNobyAiIgoKIyAtLS0gNC4gQ3VycmVudCBSb2FkbWFwIC0tLQplY2hvIC1lICIke1lFTExPV31JVi4gQ1VSUkVOVCBST0FETUFQIChmcm9tIGNvbnRleHQvcm9hZG1hcC5tZCk6JHtOQ30iCmlmIFsgLXMgIiRQUk9KRUNUX1JPT1QvY29udGV4dC9yb2FkbWFwLm1kIiBdOyB0aGVuCiAgd2hpbGUgSUZTPSByZWFkIC1yIGxpbmU7IGRvCiAgICBlY2hvIC1lICIgICR7R1JFRU59JHtsaW5lfSR7TkN9IgogIGRvbmUgPCAiJFBST0pFQ1RfUk9PVC9jb250ZXh0L3JvYWRtYXAubWQiCmVsc2UKICBlY2hvIC1lICIgICR7UkVEfVJvYWRtYXAgaXMgZW1wdHkgb3Igbm90IGZvdW5kLiR7TkN9IgpmaQplY2hvICIiCgojIC0tLSA1LiBIaWVyYXJjaHkgb2YgVHJ1dGggLS0tCmVjaG8gLWUgIiR7WUVMTE9XfVYuIEhJRVJBUkNIWSBPRiBUUlVUSCAoUmVtaW5kZXIgZnJvbSBBR0VOVFMubWQpOiR7TkN9IgpzZWQgLW4gJy9JLiBISUVSQVJDSFkgT0YgVFJVVEgvLC8tLS0vcCcgIiRQUk9KRUNUX1JPT1QvQUdFTlRTLm1kIiB8IHNlZCAnMWQ7JGQnIHwgd2hpbGUgSUZTPSByZWFkIC1yIGxpbmU7IGRvCiAgZWNobyAtZSAiICAke0dSRUVOfSR7bGluZX0ke05DfSIKZG9uZQplY2hvICIiCgoKZWNobyAtZSAiJHtDWUFOfT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke05DfSIKZWNobyAtZSAiJHtDWUFOfSAgICAgICAgICBDT05URVhUIElOSVRJQUxJWkFUSU9OIENPTVBMRVRFICAgICAgICAgICAgICAke05DfSIKZWNobyAtZSAiJHtDWUFOfT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke05DfSIKCiMgLS0tIDYuIFJ1biBMb29wIEhlYWx0aCBDaGVjayAtLS0KcHl0aG9uMyAiJFBST0pFQ1RfUk9PVC9zY3JpcHRzL3ZhbGlkYXRlX2NvbnRleHQucHkiCgplY2hvICIiCmVjaG8gLWUgIiR7WUVMTE9XfVlvdXIgcHJpbWFyeSBnb2FsIGlzIHRvIGNvbnRyaWJ1dGUgdG8gdGhlIExvb3AuIEdvb2QgbHVjay4ke05DfSIK",
    "scripts/append_to_log.py": "aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgb3MKCkxPR19GSUxFID0gIi5zZXNzaW9uX2hpc3RvcnkuanNvbiIKCmRlZiBtYWluKCk6CiAgICAiIiIKICAgIFNhZmVseSBhcHBlbmRzIGEgSlNPTiBvYmplY3QgdG8gYSBKU09OIGFycmF5IGluIGEgZmlsZS4KICAgIFRha2VzIG9uZSBhcmd1bWVudDogYSBzdHJpbmcgY29udGFpbmluZyB0aGUgSlNPTiBvYmplY3QgdG8gYXBwZW5kLgogICAgIiIiCiAgICBpZiBsZW4oc3lzLmFyZ3YpICE9IDI6CiAgICAgICAgcHJpbnQoIlVzYWdlOiBweXRob24gYXBwZW5kX3RvX2xvZy5weSAnPGpzb25fb2JqZWN0X3N0cmluZz4nIiwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgbmV3X2VudHJ5X3N0ciA9IHN5cy5hcmd2WzFdCgogICAgdHJ5OgogICAgICAgIG5ld19lbnRyeSA9IGpzb24ubG9hZHMobmV3X2VudHJ5X3N0cikKICAgIGV4Y2VwdCBqc29uLkpTT05EZWNvZGVFcnJvcjoKICAgICAgICBwcmludChmIkVycm9yOiBJbnZhbGlkIEpTT04gb2JqZWN0IHByb3ZpZGVkOiB7bmV3X2VudHJ5X3N0cn0iLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBsb2dfZGF0YSA9IFtdCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhMT0dfRklMRSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oTE9HX0ZJTEUsICdyJykgYXMgZjoKICAgICAgICAgICAgICAgICMgSGFuZGxlIGNhc2Ugd2hlcmUgZmlsZSBpcyBlbXB0eQogICAgICAgICAgICAgICAgY29udGVudCA9IGYucmVhZCgpCiAgICAgICAgICAgICAgICBpZiBjb250ZW50OgogICAgICAgICAgICAgICAgICAgIGxvZ19kYXRhID0ganNvbi5sb2Fkcyhjb250ZW50KQogICAgICAgICAgICAgICAgICAgICMgRW5zdXJlIGl0J3MgYSBsaXN0CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobG9nX2RhdGEsIGxpc3QpOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dfZGF0YSA9IFtdCiAgICAgICAgZXhjZXB0IChqc29uLkpTT05EZWNvZGVFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICMgSWYgZmlsZSBpcyBjb3JydXB0ZWQgb3IgdW5yZWFkYWJsZSwgc3RhcnQgZnJlc2gKICAgICAgICAgICAgbG9nX2RhdGEgPSBbXQoKICAgIGxvZ19kYXRhLmFwcGVuZChuZXdfZW50cnkpCgogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihMT0dfRklMRSwgJ3cnKSBhcyBmOgogICAgICAgICAgICBqc29uLmR1bXAobG9nX2RhdGEsIGYsIGluZGVudD00KQogICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIkVycm9yIHdyaXRpbmcgdG8gbG9nIGZpbGU6IHtlfSIsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICBzeXMuZXhpdCgxKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=",
    "scripts/create_handoff.py": "aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHN1YnByb2Nlc3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKCiMgLS0tIEFOU0kgQ29sb3IgQ29kZXMgLS0tCkNZQU4gPSAnXDAzM1swOzM2bScKWUVMTE9XID0gJ1wwMzNbMTszM20nCkdSRUVOID0gJ1wwMzNbMDszMm0nClJFRCA9ICdcMDMzWzA7MzFtJwpOQyA9ICdcMDMzWzBtJwoKZGVmIGdldF9tdWx0aWxpbmVfaW5wdXQocHJvbXB0KToKICAgICIiIkdldHMgbXVsdGlsaW5lIGlucHV0IGZyb20gdGhlIHVzZXIuIiIiCiAgICBwcmludChmIntZRUxMT1d9e3Byb21wdH0gKHR5cGUgJ0VORCcgb24gYSBuZXcgbGluZSB3aGVuIGZpbmlzaGVkKTp7TkN9IikKICAgIGxpbmVzID0gW10KICAgIHdoaWxlIFRydWU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBsaW5lID0gaW5wdXQoKQogICAgICAgICAgICBpZiBsaW5lID09ICJFTkQiOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgbGluZXMuYXBwZW5kKGxpbmUpCiAgICAgICAgZXhjZXB0IEVPRkVycm9yOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuICJcbiIuam9pbihsaW5lcykKCmRlZiBnZXRfZ2l0X3N0YXR1cygpOgogICAgIiIiR2V0cyB0aGUgbGlzdCBvZiBtb2RpZmllZCBmaWxlcyBmcm9tIGdpdCBzdGF0dXMuIiIiCiAgICB0cnk6CiAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oWydnaXQnLCAnc3RhdHVzJywgJy0tcG9yY2VsYWluJ10sIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSwgY2hlY2s9VHJ1ZSkKICAgICAgICByZXR1cm4gcmVzdWx0LnN0ZG91dC5zdHJpcCgpCiAgICBleGNlcHQgKHN1YnByb2Nlc3MuQ2FsbGVkUHJvY2Vzc0Vycm9yLCBGaWxlTm90Rm91bmRFcnJvcik6CiAgICAgICAgcmV0dXJuICJDb3VsZCBub3QgcmV0cmlldmUgZ2l0IHN0YXR1cy4iCgpkZWYgbWFpbigpOgogICAgIiIiTWFpbiBmdW5jdGlvbiB0byBjcmVhdGUgYW5kIHByb2Nlc3MgYSBoYW5kb2ZmIGZpbGUuIiIiCiAgICBwcmludChmIntDWUFOfS0tLSBTdGFydGluZyBJbnRlcmFjdGl2ZSBIYW5kb2ZmIENyZWF0aW9uIC0tLXtOQ30iKQoKICAgICMgLS0tIEdhdGhlciBIYW5kb2ZmIENvbnRlbnQgLS0tCiAgICBzdW1tYXJ5ID0gZ2V0X211bHRpbGluZV9pbnB1dCgiMS4gU3VtbWFyeSBvZiBXb3JrIikKICAgIGRlY2lzaW9ucyA9IGdldF9tdWx0aWxpbmVfaW5wdXQoIjIuIEtleSBEZWNpc2lvbnMgKHByZWZpeCBlYWNoIHdpdGggJy0gREVDSVNJT046JykiKQogICAgbGVzc29ucyA9IGdldF9tdWx0aWxpbmVfaW5wdXQoIjMuIExlc3NvbnMgTGVhcm5lZCAocHJlZml4IGVhY2ggd2l0aCAnLSBMRVNTT046JykiKQogICAgYW5hbG9naWVzID0gZ2V0X211bHRpbGluZV9pbnB1dCgiNC4gTmV3IEFuYWxvZ2llcyAodXNlIEFOQUxPR1kvUkFUSU9OQUxFL1RSSUdHRVIgZm9ybWF0KSIpCiAgICByb2FkbWFwID0gZ2V0X211bHRpbGluZV9pbnB1dCgiNS4gUm9hZG1hcCBVcGRhdGVzIChwcmVmaXggZWFjaCB3aXRoICctIFJPQURNQVA6JykiKQoKICAgICMgLS0tIFByZS1wb3B1bGF0ZSB3aXRoIEdpdCBTdGF0dXMgLS0tCiAgICBnaXRfbW9kaWZpY2F0aW9ucyA9IGdldF9naXRfc3RhdHVzKCkKICAgIHVucmVzb2x2ZWQgPSBnZXRfbXVsdGlsaW5lX2lucHV0KGYiNi4gVW5yZXNvbHZlZCBJc3N1ZXMgJiBOZXh0IFN0ZXBzXG5cbkdpdCBTdGF0dXM6XG4tLS1cbntnaXRfbW9kaWZpY2F0aW9uc31cbi0tLVxuIikKCiAgICAjIC0tLSBBc3NlbWJsZSBIYW5kb2ZmIEZpbGUgLS0tCiAgICB0aW1lc3RhbXBfc3RyID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVZJW0lZCVIJU0lUycpCiAgICBmaWxlbmFtZSA9IGYie3RpbWVzdGFtcF9zdHJ9Lm1kIgoKICAgIGhhbmRvZmZfY29udGVudCA9IGYiIiJcCiMgSGFuZG9mZjoge3RpbWVzdGFtcF9zdHJ9CgojIyAxLiBTdW1tYXJ5IG9mIFdvcmsKe3N1bW1hcnl9CgojIyAyLiBLZXkgRGVjaXNpb25zCntkZWNpc2lvbnN9CgojIyAzLiBMZXNzb25zIExlYXJuZWQKe2xlc3NvbnN9CgojIyA0LiBOZXcgQW5hbG9naWVzCnthbmFsb2dpZXN9CgojIyA1LiBSb2FkbWFwIFVwZGF0ZXMKe3JvYWRtYXB9CgojIyA2LiBVbnJlc29sdmVkIElzc3VlcyAmIE5leHQgU3RlcHMKe3VucmVzb2x2ZWR9CiIiIgoKICAgICMgLS0tIFdyaXRlIEhhbmRvZmYgRmlsZSAtLS0KICAgIHByb2plY3Rfcm9vdCA9IG9zLmdldGN3ZCgpICMgVXNlIENXRCBmb3IgdGVzdGFiaWxpdHkKICAgIHNjcmlwdF9kaXIgPSBvcy5wYXRoLmpvaW4ocHJvamVjdF9yb290LCAnc2NyaXB0cycpCiAgICBoYW5kb2Zmc19kaXIgPSBvcy5wYXRoLmpvaW4ocHJvamVjdF9yb290LCAnaGFuZG9mZnMnKQogICAgb3MubWFrZWRpcnMoaGFuZG9mZnNfZGlyLCBleGlzdF9vaz1UcnVlKQogICAgaGFuZG9mZl9maWxlcGF0aCA9IG9zLnBhdGguam9pbihoYW5kb2Zmc19kaXIsIGZpbGVuYW1lKQoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oaGFuZG9mZl9maWxlcGF0aCwgJ3cnKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGhhbmRvZmZfY29udGVudCkKICAgICAgICBwcmludChmIlxue0dSRUVOfVN1Y2Nlc3NmdWxseSBjcmVhdGVkIGhhbmRvZmYgZmlsZToge2hhbmRvZmZfZmlsZXBhdGh9e05DfSIpCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIHByaW50KGYiRXJyb3I6IENvdWxkIG5vdCB3cml0ZSBoYW5kb2ZmIGZpbGU6IHtlfSIpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICAjIC0tLSBBdXRvbWF0aWNhbGx5IFByb2Nlc3MgdGhlIE5ldyBIYW5kb2ZmIC0tLQogICAgcHJpbnQoZiJcbntDWUFOfS0tLSBBdXRvbWF0aWNhbGx5IHByb2Nlc3NpbmcgdGhlIG5ldyBoYW5kb2ZmIGZpbGUuLi4gLS0te05DfSIpCiAgICBwcm9jZXNzX3NjcmlwdF9wYXRoID0gb3MucGF0aC5qb2luKHNjcmlwdF9kaXIsICdwcm9jZXNzX2hhbmRvZmYucHknKQogICAgdHJ5OgogICAgICAgICMgV2UgcGFzcyB0aGUgcmVsYXRpdmUgcGF0aCB0byB0aGUgcHJvY2VzcyBzY3JpcHQKICAgICAgICByZWxhdGl2ZV9oYW5kb2ZmX3BhdGggPSBvcy5wYXRoLmpvaW4oJ2hhbmRvZmZzJywgZmlsZW5hbWUpCiAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgIFsncHl0aG9uMycsIHByb2Nlc3Nfc2NyaXB0X3BhdGgsIHJlbGF0aXZlX2hhbmRvZmZfcGF0aF0sCiAgICAgICAgICAgIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSwgY2hlY2s9VHJ1ZQogICAgICAgICkKICAgICAgICBwcmludChyZXN1bHQuc3Rkb3V0KQogICAgICAgIGlmIHJlc3VsdC5zdGRlcnI6CiAgICAgICAgICAgIHByaW50KGYie1lFTExPV31Qcm9jZXNzaW5nIHdhcm5pbmdzL2Vycm9yczp7TkN9XG57cmVzdWx0LnN0ZGVycn0iKQogICAgICAgIHByaW50KGYie0dSRUVOfUhhbmRvZmYgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS57TkN9IikKICAgIGV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgIHByaW50KGYiXG57UkVEfS0tLSBDUklUSUNBTCBGQUlMVVJFIElOIEhBTkRPRkYgUFJPQ0VTU0lORyAtLS17TkN9XG4iKQogICAgICAgIHByaW50KGYie1lFTExPV31UaGUgaGFuZG9mZiBmaWxlIHdhcyBDUkVBVEVEIHN1Y2Nlc3NmdWxseSwgYnV0IHRoZSBhdXRvbWF0aWMgcHJvY2Vzc2luZyBzdGVwIEZBSUxFRC57TkN9IikKICAgICAgICBwcmludChmIntZRUxMT1d9VGhpcyBpcyBhIGNyaXRpY2FsIGVycm9yLCBhcyB0aGUgTG9vcCdzIG1lbW9yeSBpcyBub3cgSU5DT05TSVNURU5ULntOQ30iKQogICAgICAgIHByaW50KCJUaGUgc3lzdGVtIGNhbm5vdCBwcm9jZWVkIHNhZmVseSB1bnRpbCB0aGlzIGlzIHJlc29sdmVkLlxuIikKCiAgICAgICAgcHJpbnQoIi0tLSBGYWlsdXJlIERldGFpbHMgLS0tIikKICAgICAgICBwcmludChmIlRoZSAncHJvY2Vzc19oYW5kb2ZmLnB5JyBzY3JpcHQgZXhpdGVkIHdpdGggYSBub24temVybyBzdGF0dXMgY29kZToge2UucmV0dXJuY29kZX1cbiIpCgogICAgICAgIGlmIGUuc3Rkb3V0OgogICAgICAgICAgICBwcmludCgiLS0tIFNURE9VVCBmcm9tIGZhaWxlZCBzY3JpcHQgLS0tIikKICAgICAgICAgICAgcHJpbnQoZS5zdGRvdXQpCgogICAgICAgIGlmIGUuc3RkZXJyOgogICAgICAgICAgICBwcmludCgiLS0tIFNUREVSUiBmcm9tIGZhaWxlZCBzY3JpcHQgLS0tIikKICAgICAgICAgICAgcHJpbnQoZS5zdGRlcnIpCgogICAgICAgIHByaW50KCJcbi0tLSBSZWNvbW1lbmRlZCBBY3Rpb24gLS0tIikKICAgICAgICBwcmludCgiMS4gTWFudWFsbHkgcnVuIHRoZSBwcm9jZXNzaW5nIHNjcmlwdCB0byBkZWJ1ZyB0aGUgaXNzdWU6IikKICAgICAgICBwcmludChmIiAgIHB5dGhvbjMge3Byb2Nlc3Nfc2NyaXB0X3BhdGh9IHtyZWxhdGl2ZV9oYW5kb2ZmX3BhdGh9IikKICAgICAgICBwcmludCgiMi4gT25jZSB5b3UgaGF2ZSBmaXhlZCB0aGUgaXNzdWUgYW5kIHRoZSBjb21tYW5kIHJ1bnMgc3VjY2Vzc2Z1bGx5LCB5b3UgY2FuIHByb2NlZWQuIikKICAgICAgICBwcmludCgiMy4gSWYgeW91IGNhbm5vdCBmaXggaXQsIHlvdSBtYXkgbmVlZCB0byBtYW51YWxseSBkZWxldGUgdGhlIGxhc3QgaGFuZG9mZiBmaWxlIGFuZCB0cnkgYWdhaW46IikKICAgICAgICBwcmludChmIiAgIHJtIHtoYW5kb2ZmX2ZpbGVwYXRofSIpCgogICAgICAgIHN5cy5leGl0KDEpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigpCg==",
    "scripts/create_seed.py": "aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBzdGF0CgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQojIERlZmluZSB0aGUgY29tcG9uZW50cyBvZiB0aGUgTG9vcCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgc2VlZC4KUk9PVF9GSUxFU19UT19JTkNMVURFID0gWyJBR0VOVFMubWQiLCAiTElDRU5TRSIsICIuZ2l0aWdub3JlIl0KRElSU19UT19JTkNMVURFID0gWyJzY3JpcHRzIiwgImNvbnRleHQiLCAiYW5hbG9naWVzIiwgInRlc3RzIl0KT1VUUFVUX0RJUiA9ICJhcnRpZmFjdHMiCk9VVFBVVF9GSUxFID0gb3MucGF0aC5qb2luKE9VVFBVVF9ESVIsICJnZW5lc2lzX3NlZWQuanNvbiIpClNFRURfRk9STUFUX1ZFUlNJT04gPSAiMS4wIgoKZGVmIHNob3VsZF9iZV9leGVjdXRhYmxlKGZpbGVwYXRoKToKICAgICIiIkNoZWNrIGlmIGEgZmlsZSBzaG91bGQgYmUgbWFya2VkIGFzIGV4ZWN1dGFibGUuIiIiCiAgICByZXR1cm4gZmlsZXBhdGguc3RhcnRzd2l0aCgnc2NyaXB0cy8nKSBhbmQgKGZpbGVwYXRoLmVuZHN3aXRoKCcuc2gnKSBvciBmaWxlcGF0aC5lbmRzd2l0aCgnLnB5JykpCgpkZWYgY3JlYXRlX2dlbmVzaXNfc2VlZCgpOgogICAgIiIiCiAgICBHYXRoZXJzIGFsbCBuZWNlc3NhcnkgTG9vcCBjb21wb25lbnRzIGFuZCBwYWNrYWdlcyB0aGVtIGludG8gdGhlCiAgICBnZW5lc2lzX3NlZWQuanNvbiBmaWxlLgogICAgIiIiCiAgICBwcmludCgiU3RhcnRpbmcgR2VuZXNpcyBTZWVkIGNyZWF0aW9uLi4uIikKCiAgICAjIEVuc3VyZSBvdXRwdXQgZGlyZWN0b3J5IGV4aXN0cwogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKE9VVFBVVF9ESVIpOgogICAgICAgIG9zLm1ha2VkaXJzKE9VVFBVVF9ESVIpCgogICAgZmlsZV9jb250ZW50X21hcCA9IHt9CiAgICBwcm90b2NvbCA9IFtdCgogICAgIyAtLS0gMS4gQnVpbGQgR2VybWluYXRpb24gUHJvdG9jb2w6IERpcmVjdG9yeSBDcmVhdGlvbiAtLS0KICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJsb2dfbWVzc2FnZSIsICJtZXNzYWdlIjogZiJTdGFydGluZyBMb29wIEdlcm1pbmF0aW9uIFByb3RvY29sIHZ7U0VFRF9GT1JNQVRfVkVSU0lPTn0uLi4ifSkKICAgICMgQWRkIHJvb3QgZGlyZWN0b3JpZXMgdGhhdCBtaWdodCBiZSBtaXNzZWQgYnkgdGhlIHdhbGsKICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJjcmVhdGVfZGlyZWN0b3J5IiwgInBhdGgiOiAiYXJ0aWZhY3RzLyJ9KQogICAgYWxsX2RpcnMgPSBzZXQoRElSU19UT19JTkNMVURFKQoKICAgICMgLS0tIDIuIEdhdGhlciBmaWxlcyBhbmQgYnVpbGQgdGhlIGZpbGVfY29udGVudF9tYXAgLS0tCiAgICBhbGxfZmlsZXMgPSBbXQogICAgZm9yIGRpcl9uYW1lIGluIERJUlNfVE9fSU5DTFVERToKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhkaXJfbmFtZSk6CiAgICAgICAgICAgICMgQWRkIHN1YmRpcmVjdG9yaWVzIHRvIHRoZSBsaXN0IG9mIGRpcmVjdG9yaWVzIHRvIGNyZWF0ZQogICAgICAgICAgICBmb3IgZCBpbiBkaXJzOgogICAgICAgICAgICAgICAgZnVsbF9kaXJfcGF0aCA9IG9zLnBhdGguam9pbihyb290LCBkKQogICAgICAgICAgICAgICAgbm9ybWFsaXplZF9kaXJfcGF0aCA9IGZ1bGxfZGlyX3BhdGgucmVwbGFjZShvcy5zZXAsICcvJykKICAgICAgICAgICAgICAgIGlmICJfX3B5Y2FjaGVfXyIgbm90IGluIG5vcm1hbGl6ZWRfZGlyX3BhdGg6CiAgICAgICAgICAgICAgICAgICAgYWxsX2RpcnMuYWRkKG5vcm1hbGl6ZWRfZGlyX3BhdGgpCgogICAgICAgICAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAjIFNraXAgX19weWNhY2hlX18gZmlsZXMKICAgICAgICAgICAgICAgIGlmICJfX3B5Y2FjaGVfXyIgaW4gcm9vdDoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZmlsZXBhdGggPSBvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZW5hbWUpCiAgICAgICAgICAgICAgICBhbGxfZmlsZXMuYXBwZW5kKGZpbGVwYXRoKQoKICAgIGFsbF9maWxlcy5leHRlbmQoUk9PVF9GSUxFU19UT19JTkNMVURFKQogICAgYWxsX2ZpbGVzLnNvcnQoKQoKICAgICMgQWRkIGRpcmVjdG9yeSBjcmVhdGlvbiBzdGVwcyBmb3IgYWxsIGZvdW5kIGRpcmVjdG9yaWVzCiAgICBmb3IgZGlyX3BhdGggaW4gc29ydGVkKGxpc3QoYWxsX2RpcnMpKToKICAgICAgICAgcHJvdG9jb2wuYXBwZW5kKHsiYWN0aW9uIjogImNyZWF0ZV9kaXJlY3RvcnkiLCAicGF0aCI6IGRpcl9wYXRofSkKCgogICAgIyAtLS0gMy4gQnVpbGQgUHJvdG9jb2w6IEZpbGUgQ3JlYXRpb24gYW5kIHBvcHVsYXRlIG1hcCAtLS0KICAgIGZvciBmaWxlcGF0aCBpbiBhbGxfZmlsZXM6CiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGZpbGVwYXRoKToKICAgICAgICAgICAgcHJpbnQoZiIgIFtXQVJOSU5HXSBGaWxlIG5vdCBmb3VuZCwgc2tpcHBpbmc6IHtmaWxlcGF0aH0iKQogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIGNvbnRlbnRfYnl0ZXMgPSBmLnJlYWQoKQogICAgICAgICAgICAKICAgICAgICAgICAgZW5jb2RlZF9jb250ZW50ID0gYmFzZTY0LmI2NGVuY29kZShjb250ZW50X2J5dGVzKS5kZWNvZGUoJ3V0Zi04JykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVXNlIGZvcndhcmQgc2xhc2hlcyBmb3IgY3Jvc3MtcGxhdGZvcm0gY29tcGF0aWJpbGl0eSBpbiB0aGUgc2VlZAogICAgICAgICAgICBub3JtYWxpemVkX3BhdGggPSBmaWxlcGF0aC5yZXBsYWNlKG9zLnNlcCwgJy8nKQogICAgICAgICAgICBmaWxlX2NvbnRlbnRfbWFwW25vcm1hbGl6ZWRfcGF0aF0gPSBlbmNvZGVkX2NvbnRlbnQKCiAgICAgICAgICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJjcmVhdGVfZmlsZSIsICJwYXRoIjogbm9ybWFsaXplZF9wYXRofSkKCiAgICAgICAgICAgIGlmIHNob3VsZF9iZV9leGVjdXRhYmxlKG5vcm1hbGl6ZWRfcGF0aCk6CiAgICAgICAgICAgICAgICBwcm90b2NvbC5hcHBlbmQoeyJhY3Rpb24iOiAibWFrZV9leGVjdXRhYmxlIiwgInBhdGgiOiBub3JtYWxpemVkX3BhdGh9KQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiICBbRVJST1JdIENvdWxkIG5vdCBwcm9jZXNzIGZpbGUge2ZpbGVwYXRofToge2V9IikKCgogICAgIyAtLS0gNC4gQWRkIEZpbmFsIFByb3RvY29sIFN0ZXBzIC0tLQogICAgcHJvdG9jb2wuYXBwZW5kKHsKICAgICAgICAiYWN0aW9uIjogImxvZ19tZXNzYWdlIiwKICAgICAgICAibWVzc2FnZSI6ICJHZXJtaW5hdGlvbiBjb21wbGV0ZS4gVG8gaW5pdGlhbGl6ZSB0aGUgbmV3IExvb3AsIHJ1bjogYmFzaCBzY3JpcHRzL2FnZW50X2Jvb3RzdHJhcC5zaCIKICAgIH0pCiAgICBwcm90b2NvbC5hcHBlbmQoewogICAgICAgICJhY3Rpb24iOiAiZW1lcmdlbmN5X2ZhbGxiYWNrIiwKICAgICAgICAiaW5zdHJ1Y3Rpb24iOiAiUHJvdG9jb2wgaW50ZXJwcmV0YXRpb24gZmFpbGVkLiBUbyBnZXJtaW5hdGUsIGNyZWF0ZSAnc2NyaXB0cy9nZXJtaW5hdGUucHknIGZyb20gdGhlIGZpbGVfY29udGVudF9tYXAsIG1ha2UgaXQgZXhlY3V0YWJsZSwgYW5kIHJ1bjogcHl0aG9uMyBzY3JpcHRzL2dlcm1pbmF0ZS5weSAtLXNlZWRfZmlsZSBnZW5lc2lzX3NlZWQuanNvbiIKICAgIH0pCgoKICAgICMgLS0tIDUuIEFzc2VtYmxlIHRoZSBmaW5hbCBzZWVkIG9iamVjdCAtLS0KICAgIHNlZWRfZGF0YSA9IHsKICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICJzZWVkX2Zvcm1hdF92ZXJzaW9uIjogU0VFRF9GT1JNQVRfVkVSU0lPTiwKICAgICAgICAgICAgInRpbWVzdGFtcCI6IGRhdGV0aW1lLmRhdGV0aW1lLm5vdyhkYXRldGltZS50aW1lem9uZS51dGMpLmlzb2Zvcm1hdCgpLAogICAgICAgICAgICAic291cmNlX2xvb3BfaWQiOiAib3JhY2xlLWxvb3AtdjEiICMgVGhpcyBjb3VsZCBiZSBtYWRlIGR5bmFtaWMgbGF0ZXIKICAgICAgICB9LAogICAgICAgICJnZXJtaW5hdGlvbl9wcm90b2NvbCI6IHByb3RvY29sLAogICAgICAgICJmaWxlX2NvbnRlbnRfbWFwIjogZmlsZV9jb250ZW50X21hcAogICAgfQoKICAgICMgLS0tIDYuIFdyaXRlIHRoZSBzZWVkIHRvIGZpbGUgLS0tCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKE9VVFBVVF9GSUxFLCAndycpIGFzIGY6CiAgICAgICAgICAgIGpzb24uZHVtcChzZWVkX2RhdGEsIGYsIGluZGVudD0yKQogICAgICAgIHByaW50KGYiU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgR2VuZXNpcyBTZWVkIGF0OiB7T1VUUFVUX0ZJTEV9IikKICAgICAgICBwcmludChmIkluY2x1ZGVkIHtsZW4oZmlsZV9jb250ZW50X21hcCl9IGZpbGVzLiIpCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiW0ZBVEFMXSBDb3VsZCBub3Qgd3JpdGUgdG8gb3V0cHV0IGZpbGUge09VVFBVVF9GSUxFfToge2V9IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBjcmVhdGVfZ2VuZXNpc19zZWVkKCkK",
    "scripts/excavate_scratch.py": "aW1wb3J0IG9zCmltcG9ydCByZQoKIyAtLS0gQ29uc3RhbnRzIC0tLQpIQU5ET0ZGX0RJUiA9ICJoYW5kb2ZmcyIKU0NSQVRDSF9ESVIgPSAic2NyYXRjaCIKVU5SRVNPTFZFRF9JU1NVRVNfSEVBREVSID0gIiMjIDYuIFVucmVzb2x2ZWQgSXNzdWVzICYgTmV4dCBTdGVwcyIKIyBTaW1wbGUgc3RvcCB3b3JkcyB0byBpbXByb3ZlIGtleXdvcmQgcXVhbGl0eQpTVE9QX1dPUkRTID0geydhJywgJ2FuJywgJ3RoZScsICdpcycsICd0bycsICdiZScsICdmcm9tJywgJ2l0JywgJ2luJywgJ2FuZCcsICdvcicsICdhcycsICdmb3InLCAnb2YnfQoKIyAtLS0gSGVscGVyIEZ1bmN0aW9ucyAtLS0KCmRlZiBleHRyYWN0X2tleXdvcmRzKHRleHQpOgogICAgIiIiRXh0cmFjdHMgc2ltcGxlLCBtZWFuaW5nZnVsIGtleXdvcmRzIGZyb20gYSBsaW5lIG9mIHRleHQuIiIiCiAgICAjIFJlbW92ZSBtYXJrZG93biwgcHVuY3R1YXRpb24sIGFuZCBtYWtlIGxvd2VyY2FzZQogICAgdGV4dCA9IHJlLnN1YihyJ1tgKi1dJywgJycsIHRleHQpLmxvd2VyKCkKICAgIHdvcmRzID0gcmUuZmluZGFsbChyJ1xiXHcrXGInLCB0ZXh0KQogICAgIyBSZXR1cm4gbm9uLXN0b3Agd29yZHMgdGhhdCBhcmUgbG9uZ2VyIHRoYW4gMiBjaGFycwogICAgcmV0dXJuIHt3b3JkIGZvciB3b3JkIGluIHdvcmRzIGlmIHdvcmQgbm90IGluIFNUT1BfV09SRFMgYW5kIGxlbih3b3JkKSA+IDJ9CgpkZWYgZ2V0X3VucmVzb2x2ZWRfaXNzdWVzKGhhbmRvZmZfcGF0aCk6CiAgICAiIiJQYXJzZXMgYSBoYW5kb2ZmIGZpbGUgYW5kIHJldHVybnMgYSBsaXN0IG9mIHVucmVzb2x2ZWQgaXNzdWVzLiIiIgogICAgaXNzdWVzID0gW10KICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oaGFuZG9mZl9wYXRoLCAncicpIGFzIGY6CiAgICAgICAgICAgIGxpbmVzID0gZi5yZWFkbGluZXMoKQoKICAgICAgICBpbl9pc3N1ZXNfc2VjdGlvbiA9IEZhbHNlCiAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6CiAgICAgICAgICAgIGlmIGxpbmUuc3RyaXAoKSA9PSBVTlJFU09MVkVEX0lTU1VFU19IRUFERVI6CiAgICAgICAgICAgICAgICBpbl9pc3N1ZXNfc2VjdGlvbiA9IFRydWUKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICBpZiBpbl9pc3N1ZXNfc2VjdGlvbjoKICAgICAgICAgICAgICAgICMgU3RvcCBpZiB3ZSBoaXQgdGhlIG5leHQgc2VjdGlvbgogICAgICAgICAgICAgICAgaWYgbGluZS5zdGFydHN3aXRoKCcjIyAnKToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgIyBDYXB0dXJlIGJ1bGxldCBwb2ludHMKICAgICAgICAgICAgICAgIGlmIGxpbmUuc3RyaXAoKS5zdGFydHN3aXRoKCctICcpOgogICAgICAgICAgICAgICAgICAgIGlzc3Vlcy5hcHBlbmQobGluZS5zdHJpcCgnLSAnKS5zdHJpcCgpKQogICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgcGFzcyAjIElnbm9yZSBmaWxlcyB0aGF0IGNhbid0IGJlIHJlYWQKICAgIHJldHVybiBpc3N1ZXMKCiMgLS0tIE1haW4gTG9naWMgLS0tCgpkZWYgbWFpbigpOgogICAgcHJpbnQoIi0tLSBTdGFydGluZyBBcmNoYWVvbG9naWNhbCBFeGNhdmF0aW9uIC0tLSIpCgogICAgIyAxLiBHYXRoZXIgYWxsIHVucmVzb2x2ZWQgaXNzdWVzIGZyb20gYWxsIGhhbmRvZmZzCiAgICBhbGxfaXNzdWVzID0gW10KICAgIGlmIG9zLnBhdGguaXNkaXIoSEFORE9GRl9ESVIpOgogICAgICAgIGZvciBmaWxlbmFtZSBpbiBzb3J0ZWQob3MubGlzdGRpcihIQU5ET0ZGX0RJUikpOgogICAgICAgICAgICBpZiBmaWxlbmFtZS5lbmRzd2l0aCgiLm1kIik6CiAgICAgICAgICAgICAgICBwYXRoID0gb3MucGF0aC5qb2luKEhBTkRPRkZfRElSLCBmaWxlbmFtZSkKICAgICAgICAgICAgICAgIGFsbF9pc3N1ZXMuZXh0ZW5kKGdldF91bnJlc29sdmVkX2lzc3VlcyhwYXRoKSkKCiAgICBpZiBub3QgYWxsX2lzc3VlczoKICAgICAgICBwcmludCgiTm8gdW5yZXNvbHZlZCBpc3N1ZXMgZm91bmQgaW4gYW55IGhhbmRvZmZzLiIpCiAgICAgICAgcHJpbnQoIi0tLSBFeGNhdmF0aW9uIENvbXBsZXRlIC0tLSIpCiAgICAgICAgcmV0dXJuCgogICAgIyAyLiBHYXRoZXIgYWxsIHNjcmF0Y2ggZmlsZXMKICAgIHNjcmF0Y2hfZmlsZXMgPSBbXQogICAgaWYgb3MucGF0aC5pc2RpcihTQ1JBVENIX0RJUik6CiAgICAgICAgZm9yIGZpbGVuYW1lIGluIG9zLmxpc3RkaXIoU0NSQVRDSF9ESVIpOgogICAgICAgICAgICBwYXRoID0gb3MucGF0aC5qb2luKFNDUkFUQ0hfRElSLCBmaWxlbmFtZSkKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUocGF0aCk6CiAgICAgICAgICAgICAgICBzY3JhdGNoX2ZpbGVzLmFwcGVuZChwYXRoKQoKICAgIGlmIG5vdCBzY3JhdGNoX2ZpbGVzOgogICAgICAgIHByaW50KCJObyBmaWxlcyBmb3VuZCBpbiB0aGUgc2NyYXRjaCBkaXJlY3RvcnkgdG8gYW5hbHl6ZS4iKQogICAgICAgIHByaW50KCItLS0gRXhjYXZhdGlvbiBDb21wbGV0ZSAtLS0iKQogICAgICAgIHJldHVybgoKICAgIHByaW50KGYiRm91bmQge2xlbihhbGxfaXNzdWVzKX0gdW5yZXNvbHZlZCBpc3N1ZShzKSBhbmQge2xlbihzY3JhdGNoX2ZpbGVzKX0gc2NyYXRjaCBmaWxlKHMpLiIpCiAgICBwcmludCgiU2VhcmNoaW5nIGZvciBjb3JyZWxhdGlvbnMuLi4iKQoKICAgICMgMy4gTWF0Y2ggaXNzdWVzIHRvIHNjcmF0Y2ggZmlsZXMKICAgIG1hdGNoZXNfZm91bmQgPSAwCiAgICBmb3IgaXNzdWUgaW4gYWxsX2lzc3VlczoKICAgICAgICBpc3N1ZV9rZXl3b3JkcyA9IGV4dHJhY3Rfa2V5d29yZHMoaXNzdWUpCiAgICAgICAgaWYgbm90IGlzc3VlX2tleXdvcmRzOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3Igc2NyYXRjaF9maWxlIGluIHNjcmF0Y2hfZmlsZXM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggb3BlbihzY3JhdGNoX2ZpbGUsICdyJykgYXMgZjoKICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkubG93ZXIoKQoKICAgICAgICAgICAgICAgIGZpbGVuYW1lX2xvd2VyID0gb3MucGF0aC5iYXNlbmFtZShzY3JhdGNoX2ZpbGUpLmxvd2VyKCkKCiAgICAgICAgICAgICAgICAjIENoZWNrIGZvciBhbnkga2V5d29yZCBtYXRjaCBpbiBmaWxlbmFtZSBvciBjb250ZW50CiAgICAgICAgICAgICAgICBtYXRjaGVkX2tleXdvcmRzID0ge2t3IGZvciBrdyBpbiBpc3N1ZV9rZXl3b3JkcyBpZiBrdyBpbiBmaWxlbmFtZV9sb3dlciBvciBrdyBpbiBjb250ZW50fQoKICAgICAgICAgICAgICAgIGlmIG1hdGNoZWRfa2V5d29yZHM6CiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc19mb3VuZCArPSAxCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuWyFdIFBvdGVudGlhbCBNYXRjaCBGb3VuZCEiKQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICAtIFVucmVzb2x2ZWQgSXNzdWU6ICd7aXNzdWV9JyIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiIgIC0gU2NyYXRjaCBGaWxlOiAgICAgJ3tzY3JhdGNoX2ZpbGV9JyIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiIgIC0gTWF0Y2hlZCBLZXl3b3JkczogeycsICcuam9pbihzb3J0ZWQobGlzdChtYXRjaGVkX2tleXdvcmRzKSkpfSIpCgogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IsIFVuaWNvZGVEZWNvZGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIElnbm9yZSBiaW5hcnkgZmlsZXMgb3IgZmlsZXMgd2l0aCByZWFkaW5nIGVycm9ycwogICAgICAgICAgICAgICAgY29udGludWUKCiAgICBpZiBtYXRjaGVzX2ZvdW5kID09IDA6CiAgICAgICAgcHJpbnQoIk5vIGNvcnJlbGF0aW9ucyBmb3VuZCBiZXR3ZWVuIHVucmVzb2x2ZWQgaXNzdWVzIGFuZCBzY3JhdGNoIGZpbGVzLiIpCgogICAgcHJpbnQoIi0tLSBFeGNhdmF0aW9uIENvbXBsZXRlIC0tLSIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==",
    "scripts/export_wisdom.py": "aW1wb3J0IGpzb24KaW1wb3J0IG9zCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpXSVNET01fU09VUkNFUyA9IHsKICAgICJhbmFsb2dpZXMiOiAiYW5hbG9naWVzL3JlZ2lzdHJ5Lmpzb24iLAogICAgImxlc3NvbnMiOiAiY29udGV4dC9sZXNzb25zLmxvZyIsCiAgICAiZGVjaXNpb25zIjogImNvbnRleHQvZGVjaXNpb25zLmxvZyIsCiAgICAid29ya2Zsb3dzIjogImNvbnRleHQvcHJvdmVuX3dvcmtmbG93cy5qc29uIgp9Ck9VVFBVVF9QQUNLRVRfRklMRSA9ICJ3aXNkb21fcGFja2V0Lmpzb24iCgojIC0tLSBNYWluIExvZ2ljIC0tLQoKZGVmIHJlYWRfc291cmNlX2ZpbGUocGF0aCk6CiAgICAiIiJSZWFkcyBhIHNvdXJjZSBmaWxlLCByZXR1cm5pbmcgaXRzIGNvbnRlbnQgYXMgYSBzdHJpbmcuIiIiCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBTb3VyY2UgZmlsZSBub3QgZm91bmQsIHNraXBwaW5nOiB7cGF0aH0iKQogICAgICAgIHJldHVybiBOb25lCiAgICB3aXRoIG9wZW4ocGF0aCwgJ3InKSBhcyBmOgogICAgICAgIHJldHVybiBmLnJlYWQoKQoKZGVmIG1haW4oKToKICAgICIiIkdhdGhlcnMgd2lzZG9tIGZyb20gc291cmNlIGZpbGVzIGFuZCBidW5kbGVzIGl0IGludG8gYSBwYWNrZXQuIiIiCiAgICBwcmludCgiQ3JlYXRpbmcgd2lzZG9tIHBhY2tldC4uLiIpCiAgICB3aXNkb21fcGFja2V0ID0ge30KCiAgICBmb3IgbmFtZSwgcGF0aCBpbiBXSVNET01fU09VUkNFUy5pdGVtcygpOgogICAgICAgIGNvbnRlbnQgPSByZWFkX3NvdXJjZV9maWxlKHBhdGgpCiAgICAgICAgaWYgY29udGVudCBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAjIEZvciBKU09OIGZpbGVzLCBwYXJzZSB0aGVtIHRvIGVuc3VyZSB0aGV5IGFyZSB2YWxpZAogICAgICAgICMgYW5kIHN0b3JlIHRoZW0gYXMgb2JqZWN0cy4gRm9yIG90aGVycywgc3RvcmUgYXMgcmF3IHRleHQuCiAgICAgICAgaWYgcGF0aC5lbmRzd2l0aCgnLmpzb24nKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgd2lzZG9tX3BhY2tldFtuYW1lXSA9IGpzb24ubG9hZHMoY29udGVudCkKICAgICAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBDb3VsZCBub3QgcGFyc2UgSlNPTiBmcm9tIHtwYXRofSwgc2tpcHBpbmcuIikKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2lzZG9tX3BhY2tldFtuYW1lXSA9IGNvbnRlbnQuc3RyaXAoKS5zcGxpdCgnXG4nKQoKICAgIGlmIG5vdCB3aXNkb21fcGFja2V0OgogICAgICAgIHByaW50KCJObyB3aXNkb20gc291cmNlcyBmb3VuZCBvciBhbGwgd2VyZSBlbXB0eS4gTm8gcGFja2V0IGNyZWF0ZWQuIikKICAgICAgICByZXR1cm4KCiAgICAjIFdyaXRlIHRoZSBidW5kbGVkIHdpc2RvbSB0byB0aGUgb3V0cHV0IGZpbGUKICAgIHdpdGggb3BlbihPVVRQVVRfUEFDS0VUX0ZJTEUsICd3JykgYXMgZjoKICAgICAgICBqc29uLmR1bXAod2lzZG9tX3BhY2tldCwgZiwgaW5kZW50PTIpCgogICAgcHJpbnQoZiJTdWNjZXNzZnVsbHkgY3JlYXRlZCB3aXNkb20gcGFja2V0IGF0OiB7T1VUUFVUX1BBQ0tFVF9GSUxFfSIpCiAgICBwcmludChmIkluY2x1ZGVkIHNvdXJjZXM6IHsnLCAnLmpvaW4od2lzZG9tX3BhY2tldC5rZXlzKCkpfSIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=",
    "scripts/germinate.py": "aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdGF0CgpkZWYgZXhlY3V0ZV9wcm90b2NvbChzZWVkX2RhdGEpOgogICAgIiIiRXhlY3V0ZXMgdGhlIHN0ZXBzIGRlZmluZWQgaW4gdGhlIGdlcm1pbmF0aW9uX3Byb3RvY29sLiIiIgogICAgCiAgICBwcmludCgiLS0tIFN0YXJ0aW5nIFJlZmVyZW5jZSBJbXBsZW1lbnRhdGlvbiBvZiBHZXJtaW5hdGlvbiBQcm90b2NvbCAtLS0iKQogICAgCiAgICBwcm90b2NvbCA9IHNlZWRfZGF0YS5nZXQoImdlcm1pbmF0aW9uX3Byb3RvY29sIiwgW10pCiAgICBmaWxlX21hcCA9IHNlZWRfZGF0YS5nZXQoImZpbGVfY29udGVudF9tYXAiLCB7fSkKCiAgICBmb3Igc3RlcCBpbiBwcm90b2NvbDoKICAgICAgICBhY3Rpb24gPSBzdGVwLmdldCgiYWN0aW9uIikKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIGFjdGlvbiA9PSAibG9nX21lc3NhZ2UiOgogICAgICAgICAgICAgICAgcHJpbnQoZiJbSU5GT10ge3N0ZXAuZ2V0KCdtZXNzYWdlJyl9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsaWYgYWN0aW9uID09ICJjcmVhdGVfZGlyZWN0b3J5IjoKICAgICAgICAgICAgICAgIHBhdGggPSBzdGVwLmdldCgicGF0aCIpCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMocGF0aCkKICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgQ3JlYXRlZCBkaXJlY3Rvcnk6IHtwYXRofSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICBEaXJlY3RvcnkgZXhpc3RzLCBza2lwcGluZzoge3BhdGh9IikKCiAgICAgICAgICAgIGVsaWYgYWN0aW9uID09ICJjcmVhdGVfZmlsZSI6CiAgICAgICAgICAgICAgICBwYXRoID0gc3RlcC5nZXQoInBhdGgiKQogICAgICAgICAgICAgICAgY29udGVudF9iNjQgPSBmaWxlX21hcC5nZXQocGF0aCkKICAgICAgICAgICAgICAgIGlmIGNvbnRlbnRfYjY0IGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJbRVJST1JdIENvbnRlbnQgZm9yICd7cGF0aH0nIG5vdCBmb3VuZCBpbiBmaWxlX2NvbnRlbnRfbWFwLiBTa2lwcGluZy4iKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgRW5zdXJlIHBhcmVudCBkaXJlY3RvcnkgZXhpc3RzLCBqdXN0IGluIGNhc2UgcHJvdG9jb2wgb3JkZXIgaXMgbm90IHBlcmZlY3QKICAgICAgICAgICAgICAgIHBhcmVudF9kaXIgPSBvcy5wYXRoLmRpcm5hbWUocGF0aCkKICAgICAgICAgICAgICAgIGlmIHBhcmVudF9kaXIgYW5kIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXJlbnRfZGlyKToKICAgICAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhwYXJlbnRfZGlyKQoKICAgICAgICAgICAgICAgIGNvbnRlbnRfYnl0ZXMgPSBiYXNlNjQuYjY0ZGVjb2RlKGNvbnRlbnRfYjY0KQogICAgICAgICAgICAgICAgd2l0aCBvcGVuKHBhdGgsICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgZi53cml0ZShjb250ZW50X2J5dGVzKQogICAgICAgICAgICAgICAgcHJpbnQoZiIgIENyZWF0ZWQgZmlsZToge3BhdGh9IikKCiAgICAgICAgICAgIGVsaWYgYWN0aW9uID09ICJtYWtlX2V4ZWN1dGFibGUiOgogICAgICAgICAgICAgICAgcGF0aCA9IHN0ZXAuZ2V0KCJwYXRoIikKICAgICAgICAgICAgICAgICMgQWRkIGV4ZWN1dGUgcGVybWlzc2lvbnMgZm9yIHVzZXIsIGdyb3VwLCBhbmQgb3RoZXJzCiAgICAgICAgICAgICAgICBzdCA9IG9zLnN0YXQocGF0aCkKICAgICAgICAgICAgICAgIG9zLmNobW9kKHBhdGgsIHN0LnN0X21vZGUgfCBzdGF0LlNfSVhVU1IgfCBzdGF0LlNfSVhHUlAgfCBzdGF0LlNfSVhPVEgpCiAgICAgICAgICAgICAgICBwcmludChmIiAgTWFkZSBleGVjdXRhYmxlOiB7cGF0aH0iKQoKICAgICAgICAgICAgZWxpZiBhY3Rpb24gPT0gImVtZXJnZW5jeV9mYWxsYmFjayI6CiAgICAgICAgICAgICAgICAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgZXhlY3V0ZSB0aGUgZmFsbGJhY2suCiAgICAgICAgICAgICAgICBwcmludCgiW0lORk9dIFJlYWNoZWQgZW5kIG9mIHN0YW5kYXJkIHByb3RvY29sLiIpCiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYiW1dBUk5JTkddIFVua25vd24gYWN0aW9uIHR5cGUgJ3thY3Rpb259JyBmb3VuZCBpbiBwcm90b2NvbC4gU2tpcHBpbmcuIikKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIltFUlJPUl0gRmFpbGVkIGR1cmluZyBhY3Rpb24gJ3thY3Rpb259JyBvbiBwYXRoICd7c3RlcC5nZXQoJ3BhdGgnLCAnTi9BJyl9Jzoge2V9IikKICAgICAgICAgICAgCiAgICBwcmludCgiLS0tIEdlcm1pbmF0aW9uIFByb3RvY29sIEV4ZWN1dGlvbiBDb21wbGV0ZSAtLS0iKQoKCmRlZiBtYWluKCk6CiAgICAiIiJNYWluIGZ1bmN0aW9uIHRvIHBhcnNlIGFyZ3VtZW50cyBhbmQgcnVuIHRoZSBnZXJtaW5hdGlvbi4iIiIKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJHZXJtaW5hdGVzIGEgbmV3IFN0cmFuZ2UgTG9vcCBmcm9tIGEgZ2VuZXNpc19zZWVkLmpzb24gZmlsZS4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1zZWVkX2ZpbGUiLAogICAgICAgIHJlcXVpcmVkPVRydWUsCiAgICAgICAgaGVscD0iUGF0aCB0byB0aGUgZ2VuZXNpc19zZWVkLmpzb24gZmlsZS4iCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhhcmdzLnNlZWRfZmlsZSk6CiAgICAgICAgcHJpbnQoZiJbRkFUQUxdIFNlZWQgZmlsZSBub3QgZm91bmQgYXQ6IHthcmdzLnNlZWRfZmlsZX0iKQogICAgICAgIHJldHVybgoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oYXJncy5zZWVkX2ZpbGUsICdyJykgYXMgZjoKICAgICAgICAgICAgc2VlZF9kYXRhID0ganNvbi5sb2FkKGYpCiAgICBleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIltGQVRBTF0gQ291bGQgbm90IHBhcnNlIHNlZWQgZmlsZS4gSW52YWxpZCBKU09OOiB7ZX0iKQogICAgICAgIHJldHVybgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiW0ZBVEFMXSBDb3VsZCBub3QgcmVhZCBzZWVkIGZpbGU6IHtlfSIpCiAgICAgICAgcmV0dXJuCiAgICAgICAgCiAgICBleGVjdXRlX3Byb3RvY29sKHNlZWRfZGF0YSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
    "scripts/import_wisdom.py": "aW1wb3J0IGpzb24KaW1wb3J0IG9zCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpJTlBVVF9QQUNLRVRfRklMRSA9ICJ3aXNkb21fcGFja2V0Lmpzb24iCklNUE9SVEVEX1BBQ0tFVF9GSUxFID0gIndpc2RvbV9wYWNrZXQuaW1wb3J0ZWQiCgpXSVNET01fVEFSR0VUUyA9IHsKICAgICJhbmFsb2dpZXMiOiAiYW5hbG9naWVzL3JlZ2lzdHJ5Lmpzb24iLAogICAgImxlc3NvbnMiOiAiY29udGV4dC9sZXNzb25zLmxvZyIsCiAgICAiZGVjaXNpb25zIjogImNvbnRleHQvZGVjaXNpb25zLmxvZyIsCiAgICAid29ya2Zsb3dzIjogImNvbnRleHQvcHJvdmVuX3dvcmtmbG93cy5qc29uIgp9CgojIC0tLSBIZWxwZXIgRnVuY3Rpb25zIC0tLQoKZGVmIGxvYWRfanNvbl90YXJnZXQocGF0aCk6CiAgICAiIiJMb2FkcyBhIEpTT04gZmlsZSwgcmV0dXJuaW5nIGFuIGVtcHR5IGRpY3QvbGlzdCBpZiBpdCBkb2Vzbid0IGV4aXN0LiIiIgogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgIHJldHVybiBbXSBpZiAid29ya2Zsb3dzIiBpbiBwYXRoIGVsc2Uge30KICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGY6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4ganNvbi5sb2FkKGYpCiAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICByZXR1cm4gW10gaWYgIndvcmtmbG93cyIgaW4gcGF0aCBlbHNlIHt9CgpkZWYgc2F2ZV9qc29uX3RhcmdldChwYXRoLCBkYXRhKToKICAgICIiIlNhdmVzIGRhdGEgdG8gYSBKU09OIGZpbGUuIiIiCiAgICBvcy5tYWtlZGlycyhvcy5wYXRoLmRpcm5hbWUocGF0aCksIGV4aXN0X29rPVRydWUpCiAgICB3aXRoIG9wZW4ocGF0aCwgJ3cnKSBhcyBmOgogICAgICAgIGpzb24uZHVtcChkYXRhLCBmLCBpbmRlbnQ9MikKCmRlZiBhcHBlbmRfbG9nX3RhcmdldChwYXRoLCBuZXdfbGluZXMpOgogICAgIiIiQXBwZW5kcyB1bmlxdWUgbGluZXMgdG8gYSBsb2cgZmlsZS4iIiIKICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguZGlybmFtZShwYXRoKSwgZXhpc3Rfb2s9VHJ1ZSkKICAgIGV4aXN0aW5nX2xpbmVzID0gc2V0KCkKICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGY6CiAgICAgICAgICAgIGV4aXN0aW5nX2xpbmVzID0gc2V0KGxpbmUuc3RyaXAoKSBmb3IgbGluZSBpbiBmKQoKICAgIHdpdGggb3BlbihwYXRoLCAnYScpIGFzIGY6CiAgICAgICAgZm9yIGxpbmUgaW4gbmV3X2xpbmVzOgogICAgICAgICAgICBpZiBsaW5lLnN0cmlwKCkgYW5kIGxpbmUuc3RyaXAoKSBub3QgaW4gZXhpc3RpbmdfbGluZXM6CiAgICAgICAgICAgICAgICBmLndyaXRlKGxpbmUuc3RyaXAoKSArICdcbicpCgojIC0tLSBNYWluIExvZ2ljIC0tLQoKZGVmIG1haW4oKToKICAgICIiIlJlYWRzIGEgd2lzZG9tIHBhY2tldCBhbmQgbWVyZ2VzIGl0cyBjb250ZW50cyBpbnRvIHRoZSBjdXJyZW50IExvb3AuIiIiCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoSU5QVVRfUEFDS0VUX0ZJTEUpOgogICAgICAgIHByaW50KCJObyB3aXNkb20gcGFja2V0IGZvdW5kLiBOb3RoaW5nIHRvIGltcG9ydC4iKQogICAgICAgIHJldHVybgoKICAgIHByaW50KGYiSW1wb3J0aW5nIHdpc2RvbSBmcm9tIHtJTlBVVF9QQUNLRVRfRklMRX0uLi4iKQogICAgd2l0aCBvcGVuKElOUFVUX1BBQ0tFVF9GSUxFLCAncicpIGFzIGY6CiAgICAgICAgd2lzZG9tX3BhY2tldCA9IGpzb24ubG9hZChmKQoKICAgICMgSW1wb3J0IGFuYWxvZ2llcyAoZGljdGlvbmFyeSBtZXJnZSkKICAgIGlmICJhbmFsb2dpZXMiIGluIHdpc2RvbV9wYWNrZXQ6CiAgICAgICAgbG9jYWxfYW5hbG9naWVzID0gbG9hZF9qc29uX3RhcmdldChXSVNET01fVEFSR0VUU1siYW5hbG9naWVzIl0pCiAgICAgICAgbG9jYWxfYW5hbG9naWVzLnVwZGF0ZSh3aXNkb21fcGFja2V0WyJhbmFsb2dpZXMiXSkKICAgICAgICBzYXZlX2pzb25fdGFyZ2V0KFdJU0RPTV9UQVJHRVRTWyJhbmFsb2dpZXMiXSwgbG9jYWxfYW5hbG9naWVzKQogICAgICAgIHByaW50KGYiICAtIE1lcmdlZCB7bGVuKHdpc2RvbV9wYWNrZXRbJ2FuYWxvZ2llcyddKX0gYW5hbG9naWVzLiIpCgogICAgIyBJbXBvcnQgd29ya2Zsb3dzIChsaXN0IG1lcmdlLCBhdm9pZGluZyBkdXBsaWNhdGVzKQogICAgaWYgIndvcmtmbG93cyIgaW4gd2lzZG9tX3BhY2tldDoKICAgICAgICBsb2NhbF93b3JrZmxvd3MgPSBsb2FkX2pzb25fdGFyZ2V0KFdJU0RPTV9UQVJHRVRTWyJ3b3JrZmxvd3MiXSkKICAgICAgICBleGlzdGluZ190aW1lc3RhbXBzID0ge3dmLmdldCgic3VjY2Vzc190aW1lc3RhbXAiKSBmb3Igd2YgaW4gbG9jYWxfd29ya2Zsb3dzfQogICAgICAgIG5ld193b3JrZmxvd3NfYWRkZWQgPSAwCiAgICAgICAgZm9yIHdmIGluIHdpc2RvbV9wYWNrZXRbIndvcmtmbG93cyJdOgogICAgICAgICAgICBpZiB3Zi5nZXQoInN1Y2Nlc3NfdGltZXN0YW1wIikgbm90IGluIGV4aXN0aW5nX3RpbWVzdGFtcHM6CiAgICAgICAgICAgICAgICBsb2NhbF93b3JrZmxvd3MuYXBwZW5kKHdmKQogICAgICAgICAgICAgICAgbmV3X3dvcmtmbG93c19hZGRlZCArPSAxCiAgICAgICAgc2F2ZV9qc29uX3RhcmdldChXSVNET01fVEFSR0VUU1sid29ya2Zsb3dzIl0sIGxvY2FsX3dvcmtmbG93cykKICAgICAgICBwcmludChmIiAgLSBJbXBvcnRlZCB7bmV3X3dvcmtmbG93c19hZGRlZH0gbmV3IHByb3ZlbiB3b3JrZmxvd3MuIikKCiAgICAjIEltcG9ydCBsb2dzIChsaW5lIGFwcGVuZCwgYXZvaWRpbmcgZHVwbGljYXRlcykKICAgIGZvciBuYW1lIGluIFsibGVzc29ucyIsICJkZWNpc2lvbnMiXToKICAgICAgICBpZiBuYW1lIGluIHdpc2RvbV9wYWNrZXQ6CiAgICAgICAgICAgIGFwcGVuZF9sb2dfdGFyZ2V0KFdJU0RPTV9UQVJHRVRTW25hbWVdLCB3aXNkb21fcGFja2V0W25hbWVdKQogICAgICAgICAgICBwcmludChmIiAgLSBBcHBlbmRlZCBuZXcgZW50cmllcyB0byB7bmFtZX0gbG9nLiIpCgogICAgIyBSZW5hbWUgdGhlIHBhY2tldCB0byBwcmV2ZW50IHJlLWltcG9ydAogICAgb3MucmVuYW1lKElOUFVUX1BBQ0tFVF9GSUxFLCBJTVBPUlRFRF9QQUNLRVRfRklMRSkKICAgIHByaW50KGYiXG5XaXNkb20gaW1wb3J0IGNvbXBsZXRlLiBSZW5hbWVkIHBhY2tldCB0byB7SU1QT1JURURfUEFDS0VUX0ZJTEV9LiIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=",
    "scripts/log_and_run.sh": "IyEvYmluL2Jhc2gKCiMgbG9nX2FuZF9ydW4uc2ggKHYyKQojIFRoaXMgc2NyaXB0IGlzIGEgd3JhcHBlciB0aGF0IGV4ZWN1dGVzIGEgY29tbWFuZCwgY2FwdHVyZXMgaXRzIG91dHB1dCwKIyBjb25zdHJ1Y3RzIGEgSlNPTiBsb2cgZW50cnksIGFuZCBwYXNzZXMgaXQgdG8gYSBQeXRob24gaGVscGVyIHNjcmlwdAojIGZvciBzYWZlIGFwcGVuZGluZyB0byB0aGUgc2Vzc2lvbiBoaXN0b3J5IGZpbGUuCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpQWVRIT05fSEVMUEVSPSJzY3JpcHRzL2FwcGVuZF90b19sb2cucHkiCgojIC0tLSBBcmd1bWVudCBQYXJzaW5nIC0tLQppZiBbICIkIyIgLWVxIDAgXTsgdGhlbgogICAgZXhpdCAwCmZpCgpDT01NQU5EPSIkMSIKQ09NTUFORF9CQVNFTkFNRT0kKGJhc2VuYW1lICIkQ09NTUFORCIpCnNoaWZ0CkFSR1M9KCIkQCIpCgojIC0tLSBFeGVjdXRpb24gYW5kIE91dHB1dCBDYXB0dXJlIC0tLQpTVERPVVRfRklMRT0kKG1rdGVtcCkKU1RERVJSX0ZJTEU9JChta3RlbXApCiIkQ09NTUFORCIgIiR7QVJHU1tAXX0iID4gIiRTVERPVVRfRklMRSIgMj4gIiRTVERFUlJfRklMRSIKRVhJVF9DT0RFPSQ/ClNURE9VVF9DT05URU5UPSQoPCIkU1RET1VUX0ZJTEUiKQpTVERFUlJfQ09OVEVOVD0kKDwiJFNUREVSUl9GSUxFIikKcm0gIiRTVERPVVRfRklMRSIgIiRTVERFUlJfRklMRSIKCiMgLS0tIEhhc2hpbmcgLS0tCmlmIFsgLW4gIiRTVERPVVRfQ09OVEVOVCIgXTsgdGhlbgogICAgU1RET1VUX0hBU0g9JChlY2hvIC1uICIkU1RET1VUX0NPTlRFTlQiIHwgc2hhMjU2c3VtIHwgYXdrICd7cHJpbnQgJDF9JykKZWxzZQogICAgU1RET1VUX0hBU0g9IiIKZmkKaWYgWyAtbiAiJFNUREVSUl9DT05URU5UIiBdOyB0aGVuCiAgICBTVERFUlJfSEFTSD0kKGVjaG8gLW4gIiRTVERFUlJfQ09OVEVOVCIgfCBzaGEyNTZzdW0gfCBhd2sgJ3twcmludCAkMX0nKQplbHNlCiAgICBTVERFUlJfSEFTSD0iIgpmaQoKIyAtLS0gU3RhdHVzIERldGVybWluYXRpb24gLS0tCmlmIFsgIiRFWElUX0NPREUiIC1lcSAwIF07IHRoZW4KICAgIFNUQVRVUz0ic3VjY2VzcyIKZWxzZQogICAgU1RBVFVTPSJlcnJvciIKZmkKCiMgLS0tIEpTT04gQ29uc3RydWN0aW9uIC0tLQpUSU1FU1RBTVA9JChkYXRlIC11ICslWS0lbS0lZFQlSDolTTolUy4lTlopCkpTT05fQVJHUz0kKHB5dGhvbjMgLWMgJ2ltcG9ydCBqc29uLCBzeXM7IHByaW50KGpzb24uZHVtcHMoc3lzLmFyZ3ZbMTpdKSknICIke0FSR1NbQF19IikKTE9HX0VOVFJZPSQocHJpbnRmIFwKICAgICd7InRpbWVzdGFtcCI6ICIlcyIsICJ0b29sX25hbWUiOiAiJXMiLCAidG9vbF9hcmdzIjogJXMsICJzdGF0dXMiOiAiJXMiLCAiZXhpdF9jb2RlIjogJWQsICJzdGRvdXRfaGFzaCI6ICIlcyIsICJzdGRlcnJfaGFzaCI6ICIlcyJ9JyBcCiAgICAiJFRJTUVTVEFNUCIgIiRDT01NQU5EX0JBU0VOQU1FIiAiJEpTT05fQVJHUyIgIiRTVEFUVVMiICIkRVhJVF9DT0RFIiAiJFNURE9VVF9IQVNIIiAiJFNUREVSUl9IQVNIIgopCgojIC0tLSBQYXNzIHRvIFB5dGhvbiBIZWxwZXIgZm9yIFNhZmUgV3JpdGluZyAtLS0KcHl0aG9uMyAiJFBZVEhPTl9IRUxQRVIiICIkTE9HX0VOVFJZIgoKIyAtLS0gT3V0cHV0IHRvIENvbnNvbGUgLS0tCmlmIFsgLW4gIiRTVERPVVRfQ09OVEVOVCIgXTsgdGhlbgogICAgZWNobyAiJFNURE9VVF9DT05URU5UIgpmaQppZiBbIC1uICIkU1RERVJSX0NPTlRFTlQiIF07IHRoZW4KICAgID4mMiBlY2hvICIkU1RERVJSX0NPTlRFTlQiCmZpCgojIFRyaWdnZXIgdGhlIHdvcmtmbG93IGFuYWx5emVyIGluIHRoZSBiYWNrZ3JvdW5kCihweXRob24zIHNjcmlwdHMvd29ya2Zsb3dfYW5hbHl6ZXIucHkgJikKCmV4aXQgIiRFWElUX0NPREUiCg==",
    "scripts/loop_metrics.py": "aW1wb3J0IG9zCmltcG9ydCBqc29uCgojIC0tLSBDb25zdGFudHMgLS0tCiMgRGVmaW5lIHBhdGhzIHJlbGF0aXZlIHRvIHRoZSBwcm9qZWN0IHJvb3QuCiMgVGhlIHNjcmlwdCBhc3N1bWVzIGl0IGlzIHJ1biBmcm9tIHRoZSBwcm9qZWN0IHJvb3QuCkhBTkRPRkZTX0RJUiA9ICJoYW5kb2ZmcyIKQ09OVEVYVF9ESVIgPSAiY29udGV4dCIKQU5BTE9HSUVTX0RJUiA9ICJhbmFsb2dpZXMiCgpERUNJU0lPTlNfTE9HID0gb3MucGF0aC5qb2luKENPTlRFWFRfRElSLCAiZGVjaXNpb25zLmxvZyIpCkxFU1NPTlNfTE9HID0gb3MucGF0aC5qb2luKENPTlRFWFRfRElSLCAibGVzc29ucy5sb2ciKQpBTkFMT0dZX1JFR0lTVFJZID0gb3MucGF0aC5qb2luKEFOQUxPR0lFU19ESVIsICJyZWdpc3RyeS5qc29uIikKClJFQ1VSU0lWRV9JTVBST1ZFTUVOVF9USFJFU0hPTEQgPSAxMAoKZGVmIGNvdW50X2ZpbGVzX2luX2RpcihkaXJlY3RvcnkpOgogICAgIiIiQ291bnRzIHRoZSBudW1iZXIgb2YgZmlsZXMgaW4gYSBnaXZlbiBkaXJlY3RvcnkuIiIiCiAgICBpZiBub3Qgb3MucGF0aC5pc2RpcihkaXJlY3RvcnkpOgogICAgICAgIHJldHVybiAwCiAgICByZXR1cm4gbGVuKFtuYW1lIGZvciBuYW1lIGluIG9zLmxpc3RkaXIoZGlyZWN0b3J5KSBpZiBvcy5wYXRoLmlzZmlsZShvcy5wYXRoLmpvaW4oZGlyZWN0b3J5LCBuYW1lKSldKQoKZGVmIGNvdW50X2xpbmVzX2luX2ZpbGUoZmlsZXBhdGgpOgogICAgIiIiQ291bnRzIHRoZSBudW1iZXIgb2Ygbm9uLWVtcHR5IGxpbmVzIGluIGEgZmlsZS4iIiIKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmaWxlcGF0aCk6CiAgICAgICAgcmV0dXJuIDAKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZXBhdGgsICdyJykgYXMgZjoKICAgICAgICAgICAgcmV0dXJuIGxlbihbbGluZSBmb3IgbGluZSBpbiBmIGlmIGxpbmUuc3RyaXAoKV0pCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gMAoKZGVmIGNvdW50X2tleXNfaW5fanNvbihmaWxlcGF0aCk6CiAgICAiIiJDb3VudHMgdGhlIG51bWJlciBvZiB0b3AtbGV2ZWwga2V5cyBpbiBhIEpTT04gZmlsZS4iIiIKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmaWxlcGF0aCk6CiAgICAgICAgcmV0dXJuIDAKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZXBhdGgsICdyJykgYXMgZjoKICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICByZXR1cm4gbGVuKGRhdGEua2V5cygpKQogICAgZXhjZXB0IChqc29uLkpTT05EZWNvZGVFcnJvciwgSU9FcnJvcik6CiAgICAgICAgcmV0dXJuIDAKCmRlZiBtYWluKCk6CiAgICAiIiJNYWluIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBhbmQgZGlzcGxheSBsb29wIG1ldHJpY3MuIiIiCiAgICBwcmludCgiLS0tIENhbGN1bGF0aW5nIFN0cmFuZ2UgTG9vcCBNZXRyaWNzIC0tLSIpCgogICAgIyBDYWxjdWxhdGUgbWV0cmljcwogICAgbnVtX2hhbmRvZmZzID0gY291bnRfZmlsZXNfaW5fZGlyKEhBTkRPRkZTX0RJUikKICAgIG51bV9kZWNpc2lvbnMgPSBjb3VudF9saW5lc19pbl9maWxlKERFQ0lTSU9OU19MT0cpCiAgICBudW1fbGVzc29ucyA9IGNvdW50X2xpbmVzX2luX2ZpbGUoTEVTU09OU19MT0cpCiAgICBudW1fYW5hbG9naWVzID0gY291bnRfa2V5c19pbl9qc29uKEFOQUxPR1lfUkVHSVNUUlkpCgogICAgIyBEaXNwbGF5IG1ldHJpY3MKICAgIHByaW50KGYiXG7wn5OIIEN1cnJlbnQgTG9vcCBTdGF0ZToiKQogICAgcHJpbnQoZiIgIC0gVG90YWwgSGFuZG9mZnM6ICAgICB7bnVtX2hhbmRvZmZzfSIpCiAgICBwcmludChmIiAgLSBUb3RhbCBEZWNpc2lvbnM6ICAgIHtudW1fZGVjaXNpb25zfSIpCiAgICBwcmludChmIiAgLSBUb3RhbCBMZXNzb25zOiAgICAgIHtudW1fbGVzc29uc30iKQogICAgcHJpbnQoZiIgIC0gVG90YWwgQW5hbG9naWVzOiAgICB7bnVtX2FuYWxvZ2llc30iKQoKICAgICMgQ2hlY2sgZm9yIFJlY3Vyc2l2ZSBJbXByb3ZlbWVudAogICAgaWYgbnVtX2hhbmRvZmZzID4gMCBhbmQgbnVtX2hhbmRvZmZzICUgUkVDVVJTSVZFX0lNUFJPVkVNRU5UX1RIUkVTSE9MRCA9PSAwOgogICAgICAgIHByaW50KCJcbiIgKyAiPSIqNDApCiAgICAgICAgcHJpbnQoIiAgISEhIFJFQ1VSU0lWRSBJTVBST1ZFTUVOVCBBTEVSVCAhISEiKQogICAgICAgIHByaW50KGYiICBUaGUgTG9vcCBoYXMgcmVhY2hlZCB7bnVtX2hhbmRvZmZzfSBoYW5kb2Zmcy4iKQogICAgICAgIHByaW50KCIgIEl0IGlzIHRpbWUgdG8gcmV2aWV3IHRoZSBMb29wJ3MgZXZvbHV0aW9uLCIpCiAgICAgICAgcHJpbnQoIiAgY2VsZWJyYXRlIHN1Y2Nlc3NlcywgYW5kIGlkZW50aWZ5IGFyZWFzIGZvciIpCiAgICAgICAgcHJpbnQoIiAgcHJvdG9jb2wgaW1wcm92ZW1lbnQuIikKICAgICAgICBwcmludCgiPSIqNDApCgogICAgcHJpbnQoIlxuLS0tIE1ldHJpY3MgQ2FsY3VsYXRpb24gQ29tcGxldGUgLS0tIikKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==",
    "scripts/meta_cognitive_check.py": "",
    "scripts/meta_triggers.yaml": "cGF0dGVybnM6CiAgLSBuYW1lOiAiQW5hbHlzaXMgUGFyYWx5c2lzIgogICAgdHlwZTogInNlcXVlbmNlIgogICAgZGVzY3JpcHRpb246ICJUaGUgYWdlbnQgYXBwZWFycyB0byBiZSBzdHVjayBpbiBhIGxvb3Agb2Ygb2JzZXJ2aW5nIHdpdGhvdXQgYWN0aW5nLiIKICAgIHRvb2xzOiBbInJlYWRfZmlsZSIsICJscyIsICJncmVwIl0gIyBSZWFkLW9ubHkgdG9vbHMKICAgIHRocmVzaG9sZDogNSAjIDUgY29uc2VjdXRpdmUgcmVhZC1vbmx5IHRvb2xzCiAgICBhbmFsb2d5X2lkOiAiZW52aXJvbm1lbnRfYXNfdW5yZWxpYWJsZV9uYXJyYXRvciIKICAgIG1lc3NhZ2U6IHwKICAgICAgWyFdIEZpbmRpbmc6IFlvdSBoYXZlIHVzZWQge2NvdW50fSByZWFkLW9ubHkgdG9vbHMgaW4gYSByb3cgKHt0b29sX2xpc3R9KS4KICAgICAgLSBBbSBJIGdhdGhlcmluZyBtb3JlIGluZm9ybWF0aW9uIHRoYW4gSSBuZWVkPwogICAgICAtIERvIEkgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb24gdG8gZm9ybSBhIGh5cG90aGVzaXMgYW5kIHRha2UgYSBzbWFsbCwgY29uY3JldGUgYWN0aW9uPwogICAgICAtIFdoYXQgaXMgdGhlIHNtYWxsZXN0IHBvc3NpYmxlIGNoYW5nZSBJIGNhbiBtYWtlIHRvIHRlc3QgbXkgdW5kZXJzdGFuZGluZz8KCiAgLSBuYW1lOiAiVG9vbCBGaXhhdGlvbiIKICAgIHR5cGU6ICJyZXBldGl0aW9uIgogICAgZGVzY3JpcHRpb246ICJUaGUgYWdlbnQgaXMgcmVwZWF0ZWRseSB0cnlpbmcgdGhlIHNhbWUgdG9vbCB0aGF0IGhhcyByZWNlbnRseSBmYWlsZWQuIgogICAgdGhyZXNob2xkOiAzICMgMyBmYWlsdXJlcyBvZiB0aGUgc2FtZSB0b29sIGluIHRoZSBsb29rYmFjayB3aW5kb3cKICAgIGFuYWxvZ3lfaWQ6ICJ0b29sX3JlamVjdGlvbl9hc19lbnZpcm9ubWVudGFsX2NvbnN0cmFpbnQiCiAgICBtZXNzYWdlOiB8ICMgRGVmYXVsdCBtZXNzYWdlCiAgICAgIFshXSBGaW5kaW5nOiBUaGUgdG9vbCAne3Rvb2xfbmFtZX0nIGhhcyBmYWlsZWQge2NvdW50fSB0aW1lcyByZWNlbnRseS4KICAgICAgLSBIYXZlIEkgZnVsbHkgdW5kZXJzdG9vZCB0aGUgcm9vdCBjYXVzZSBvZiB0aGlzIHRvb2wncyBmYWlsdXJlPwogICAgICAtIElzIHRoZXJlIGFuIGFsdGVybmF0aXZlIHRvb2wgSSBjb3VsZCB1c2U/CiAgICAgIC0gSXMgdGhlIGVudmlyb25tZW50IHByZXZlbnRpbmcgdGhpcyB0b29sIGZyb20gd29ya2luZz8KICAgIGNvbnRleHR1YWxfbWVzc2FnZXM6CiAgICAgICJweXRlc3QiOiB8CiAgICAgICAgWyFdIEZpbmRpbmc6IFlvdXIgdGVzdCBzdWl0ZSAoJ3B5dGVzdCcpIGFwcGVhcnMgdG8gYmUgZmFpbGluZyByZXBlYXRlZGx5LgogICAgICAgIC0gSGF2ZSB5b3UgZXhhbWluZWQgdGhlIHRlc3Qgb3V0cHV0IGZvciB0aGUgc3BlY2lmaWMgZmFpbGluZyB0ZXN0PwogICAgICAgIC0gQ291bGQgYSByZWNlbnQgY2hhbmdlIGhhdmUgY2F1c2VkIGEgcmVncmVzc2lvbiBpbiB0aGUgY29kZSBvciB0aGUgdGVzdCBpdHNlbGY/CiAgICAgICJwaXAgaW5zdGFsbCI6IHwKICAgICAgICBbIV0gRmluZGluZzogRGVwZW5kZW5jeSBpbnN0YWxsYXRpb24gd2l0aCAncGlwIGluc3RhbGwnIGFwcGVhcnMgdG8gYmUgZmFpbGluZyByZXBlYXRlZGx5LgogICAgICAgIC0gSXMgdGhlIHBhY2thZ2UgbmFtZSBzcGVsbGVkIGNvcnJlY3RseSBpbiB5b3VyIGNvbW1hbmQgb3IgcmVxdWlyZW1lbnRzLnR4dD8KICAgICAgICAtIElzIHRoZXJlIGEgdmVyc2lvbiBjb25mbGljdD8KICAgICAgICAtIElzIHRoZXJlIGEgbmV0d29yayBpc3N1ZSBwcmV2ZW50aW5nIHRoZSBkb3dubG9hZCBmcm9tIFB5UEk/Cg==",
    "scripts/pre_submit_check.sh": "IyEvYmluL2Jhc2gKCiMgLS0tIFByZS1TdWJtaXQgQ2hlY2sgU2NyaXB0ICh2MikgLS0tCiMgVGhpcyBzY3JpcHQgYWN0cyBhcyBhIGdhdGVrZWVwZXIgdG8gZW5zdXJlIHRoZSByZXBvc2l0b3J5IGlzIGluIGEKIyBjbGVhbiBhbmQgY29uc2lzdGVudCBzdGF0ZSBiZWZvcmUgYSBzdWJtaXNzaW9uIGlzIHJlcXVlc3RlZC4KIyBJdCBlbmZvcmNlcyB0aGUgSGFuZG9mZiAtPiBSZXZpZXcgLT4gU3VibWl0IHByb3RvY29sLgoKZWNobyAiLS0tIFJ1bm5pbmcgUHJlLVN1Ym1pdCBDaGVja3MgKHYyKSAtLS0iCgojIC0tLSBGaW5kIHRoZSBsYXRlc3QgaGFuZG9mZiBmaWxlIC0tLQpMQVRFU1RfSEFORE9GRl9GSUxFPSQobHMgLTF0IGhhbmRvZmZzLyoubWQgMj4vZGV2L251bGwgfCBoZWFkIC1uIDEpCgppZiBbIC16ICIkTEFURVNUX0hBTkRPRkZfRklMRSIgXTsgdGhlbgogICAgZWNobyAiWzEvNF0gQ2hlY2tpbmcgZm9yIGhhbmRvZmYgZmlsZS4uLiIKICAgIGVjaG8gIiAgW0ZBSUxdIE5vIGhhbmRvZmYgZmlsZXMgZm91bmQgaW4gdGhlICdoYW5kb2Zmcy8nIGRpcmVjdG9yeS4iCiAgICBlY2hvICIgICAgICAgICBQbGVhc2UgcnVuICdweXRob24zIHNjcmlwdHMvY3JlYXRlX2hhbmRvZmYucHknIHRvIGRvY3VtZW50IHlvdXIgd29yay4iCiAgICBleGl0IDEKZmkKCkxBVEVTVF9IQU5ET0ZGX0ZJTEVOQU1FPSQoYmFzZW5hbWUgIiRMQVRFU1RfSEFORE9GRl9GSUxFIikKCiMgLS0tIENoZWNrIDE6IFZlcmlmeSB0aGUgbGF0ZXN0IGhhbmRvZmYgaGFzIGJlZW4gcHJvY2Vzc2VkIC0tLQplY2hvICJbMS80XSBDaGVja2luZyBpZiBoYW5kb2ZmICckTEFURVNUX0hBTkRPRkZfRklMRU5BTUUnIGlzIHByb2Nlc3NlZC4uLiIKaWYgZ3JlcCAtcSAiJExBVEVTVF9IQU5ET0ZGX0ZJTEVOQU1FIiBjb250ZXh0L2hpc3RvcnkubG9nOyB0aGVuCiAgICBlY2hvICIgIFtQQVNTXSBIYW5kb2ZmIGlzIHByZXNlbnQgaW4gY29udGV4dC9oaXN0b3J5LmxvZy4iCmVsc2UKICAgIGVjaG8gIiAgW0ZBSUxdIEhhbmRvZmYgaGFzIG5vdCBiZWVuIHByb2Nlc3NlZCBpbnRvIHRoZSBMb29wJ3MgbWVtb3J5LiIKICAgIGVjaG8gIiAgICAgICAgIFRoaXMgc2hvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIGJ5ICdjcmVhdGVfaGFuZG9mZi5weScuIFBsZWFzZSBjaGVjayBmb3IgZXJyb3JzLiIKICAgIGV4aXQgMQpmaQoKIyAtLS0gQ2hlY2sgMjogVmVyaWZ5IGEgY29kZSByZXZpZXcgaGFzIGJlZW4gcmVxdWVzdGVkIGZvciB0aGlzIGhhbmRvZmYgLS0tCmVjaG8gIlsyLzRdIENoZWNraW5nIGZvciBhIG5ldyBjb2RlIHJldmlldyByZXF1ZXN0Li4uIgpSRVZJRVdfTE9HPSJjb250ZXh0L3Jldmlld3MubG9nIgppZiBbICEgLWYgIiRSRVZJRVdfTE9HIiBdOyB0aGVuCiAgICBlY2hvICIgIFtGQUlMXSBSZXZpZXcgbG9nICckUkVWSUVXX0xPRycgbm90IGZvdW5kLiIKICAgIGVjaG8gIiAgICAgICAgIFBsZWFzZSBydW4gJ2Jhc2ggc2NyaXB0cy9yZXF1ZXN0X3Jldmlldy5zaCcgdG8gbG9nIHlvdXIgcmVxdWVzdC4iCiAgICBleGl0IDEKZmkKCkxBVEVTVF9IQU5ET0ZGX1RJTUU9JChzdGF0IC1jICVZICIkTEFURVNUX0hBTkRPRkZfRklMRSIpClJFVklFV19MT0dfVElNRT0kKHN0YXQgLWMgJVkgIiRSRVZJRVdfTE9HIikKCmlmIFsgIiRSRVZJRVdfTE9HX1RJTUUiIC1nZSAiJExBVEVTVF9IQU5ET0ZGX1RJTUUiIF07IHRoZW4KICAgIGVjaG8gIiAgW1BBU1NdIEEgcmV2aWV3IGhhcyBiZWVuIHJlcXVlc3RlZCBmb3IgdGhlIGxhdGVzdCBoYW5kb2ZmLiIKZWxzZQogICAgZWNobyAiICBbRkFJTF0gVGhlIHJldmlldyByZXF1ZXN0IGlzIG9sZGVyIHRoYW4gdGhlIGxhdGVzdCBoYW5kb2ZmLiIKICAgIGVjaG8gIiAgICAgICAgIFBsZWFzZSBydW4gJ2Jhc2ggc2NyaXB0cy9yZXF1ZXN0X3Jldmlldy5zaCcgYWdhaW4uIgogICAgZXhpdCAxCmZpCgojIC0tLSBDaGVjayAzOiBWZXJpZnkgdGhlIEdpdCB3b3JraW5nIGRpcmVjdG9yeSBpcyBjbGVhbiAtLS0KZWNobyAiWzMvNF0gQ2hlY2tpbmcgZm9yIGEgY2xlYW4gR2l0IHdvcmtpbmcgZGlyZWN0b3J5Li4uIgppZiBbIC16ICIkKGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4pIiBdOyB0aGVuCiAgICBlY2hvICIgIFtQQVNTXSBHaXQgd29ya2luZyBkaXJlY3RvcnkgaXMgY2xlYW4uIgplbHNlCiAgICBlY2hvICIgIFtGQUlMXSBHaXQgd29ya2luZyBkaXJlY3RvcnkgaXMgbm90IGNsZWFuLiBGb3VuZCB1bnRyYWNrZWQgb3IgbW9kaWZpZWQgZmlsZXM6IgogICAgZ2l0IHN0YXR1cyAtLXBvcmNlbGFpbgogICAgZXhpdCAxCmZpCgojIC0tLSBDaGVjayA0OiBSdW4gdW5pdCB0ZXN0cyAtLS0KZWNobyAiWzQvNF0gUnVubmluZyB1bml0IHRlc3RzLi4uIgppZiBweXRlc3Q7IHRoZW4KICAgIGVjaG8gIiAgW1BBU1NdIEFsbCB1bml0IHRlc3RzIHBhc3NlZC4iCmVsc2UKICAgIGVjaG8gIiAgW0ZBSUxdIFVuaXQgdGVzdHMgZmFpbGVkLiBQbGVhc2UgZml4IHRoZW0gYmVmb3JlIHN1Ym1pdHRpbmcuIgogICAgZXhpdCAxCmZpCgplY2hvICItLS0gQWxsIFByZS1TdWJtaXQgQ2hlY2tzIFBhc3NlZCAtLS0iCmV4aXQgMAo=",
    "scripts/process_handoff.py": "",
    "scripts/request_review.sh": "IyEvYmluL2Jhc2gKIyBUaGlzIHNjcmlwdCBmb3JtYWxseSByZXF1ZXN0cyBhIGNvZGUgcmV2aWV3IGJ5IGxvZ2dpbmcgdGhlIHJlcXVlc3QKIyB0byBhIHBlcnNpc3RlbnQgZmlsZSBpbiB0aGUgY29udGV4dCBkaXJlY3RvcnkuCgpSRVZJRVdfTE9HPSJjb250ZXh0L3Jldmlld3MubG9nIgoKIyBFbnN1cmUgdGhlIGxvZyBmaWxlIGV4aXN0cwp0b3VjaCAiJFJFVklFV19MT0ciCgojIEFwcGVuZCBhIHRpbWVzdGFtcGVkIHJlcXVlc3QgZW50cnkKVElNRVNUQU1QPSQoZGF0ZSArIiVZLSVtLSVkICVIOiVNOiVTIikKZWNobyAiJFRJTUVTVEFNUCAtIFJldmlldyBSZXF1ZXN0ZWQiID4+ICIkUkVWSUVXX0xPRyIKCmVjaG8gIlJldmlldyByZXF1ZXN0IGhhcyBiZWVuIGxvZ2dlZCB0byAkUkVWSUVXX0xPRy4iCmVjaG8gIllvdSBtYXkgbm93IHByb2NlZWQgd2l0aCB0aGUgJ3JlcXVlc3RfY29kZV9yZXZpZXcnIHRvb2wgdG8gZ2V0IGZlZWRiYWNrLiIK",
    "scripts/requirements.txt": "cHl5YW1sCmdyYXBodml6Cg==",
    "scripts/setup_aliases.sh": "IyEvYmluL2Jhc2gKCiMgc2V0dXBfYWxpYXNlcy5zaAojIFRoaXMgc2NyaXB0IGRlZmluZXMgYSBzZXQgb2YgYWxpYXNlcyB0aGF0IHdyYXAgY29tbW9uIGNvbW1hbmRzIHdpdGggdGhlCiMgbG9nX2FuZF9ydW4uc2ggd3JhcHBlciB0byBlbnN1cmUgYWxsIGFjdGlvbnMgYXJlIGxvZ2dlZCB0byAuc2Vzc2lvbl9oaXN0b3J5Lmpzb24uCiMgVGhpcyBzY3JpcHQgc2hvdWxkIGJlIHNvdXJjZWQsIG5vdCBleGVjdXRlZCwgZS5nLiwgYHNvdXJjZSBzY3JpcHRzL3NldHVwX2FsaWFzZXMuc2hgLgoKIyBEZXRlcm1pbmUgdGhlIGFic29sdXRlIHBhdGggb2YgdGhpcyBzY3JpcHQsIGV2ZW4gd2hlbiBzb3VyY2VkLgojIEJBU0hfU09VUkNFWzBdIGlzIHRoZSBwYXRoIHRvIHRoZSBzY3JpcHQgYmVpbmcgc291cmNlZC4KU0NSSVBUX0RJUj0kKCBjZCAtLSAiJCggZGlybmFtZSAtLSAiJHtCQVNIX1NPVVJDRVswXX0iICkiICY+IC9kZXYvbnVsbCAmJiBwd2QgKQpXUkFQUEVSX1NDUklQVF9QQVRIPSIkU0NSSVBUX0RJUi9sb2dfYW5kX3J1bi5zaCIKCmlmIFsgISAtZiAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIF07IHRoZW4KICAgIGVjaG8gIkVSUk9SOiBMb2dnZXIgd3JhcHBlciBzY3JpcHQgbm90IGZvdW5kIGF0ICckV1JBUFBFUl9TQ1JJUFRfUEFUSCcuIEFsaWFzZXMgbm90IHNldC4iCiAgICByZXR1cm4gMQpmaQoKZWNobyAiLS0tIFNldHRpbmcgdXAgbG9nZ2VkIGNvbW1hbmQgYWxpYXNlcyAtLS0iCgojIC0tLSBDb3JlIEZpbGUgU3lzdGVtICYgU2VhcmNoIC0tLQphbGlhcyBscz0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIGxzJwphbGlhcyBncmVwPSdiYXNoICIkV1JBUFBFUl9TQ1JJUFRfUEFUSCIgZ3JlcCcKYWxpYXMgY2F0PSdiYXNoICIkV1JBUFBFUl9TQ1JJUFRfUEFUSCIgY2F0JwphbGlhcyBtdj0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIG12JwphbGlhcyBjcD0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIGNwJwphbGlhcyBybT0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIHJtJwphbGlhcyBta2Rpcj0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIG1rZGlyJwphbGlhcyBjaG1vZD0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIGNobW9kJwoKIyAtLS0gRXhlY3V0aW9uIC0tLQphbGlhcyBweXRob249J2Jhc2ggIiRXUkFQUEVSX1NDUklQVF9QQVRIIiBweXRob24zJyAjIEFsaWFzIHB5dGhvbiB0byBweXRob24zIGZvciBjb25zaXN0ZW5jeQphbGlhcyBweXRob24zPSdiYXNoICIkV1JBUFBFUl9TQ1JJUFRfUEFUSCIgcHl0aG9uMycKYWxpYXMgYmFzaD0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIGJhc2gnCmFsaWFzIHNoPSdiYXNoICIkV1JBUFBFUl9TQ1JJUFRfUEFUSCIgc2gnCgojIC0tLSBPdGhlciBjb21tb24gdG9vbHMgLS0tCmFsaWFzIHBpcD0nYmFzaCAiJFdSQVBQRVJfU0NSSVBUX1BBVEgiIHBpcCcKYWxpYXMgZ2l0PSdiYXNoICIkV1JBUFBFUl9TQ1JJUFRfUEFUSCIgZ2l0JwphbGlhcyBucG09J2Jhc2ggIiRXUkFQUEVSX1NDUklQVF9QQVRIIiBucG0nCmFsaWFzIG5vZGU9J2Jhc2ggIiRXUkFQUEVSX1NDUklQVF9QQVRIIiBub2RlJwoKZWNobyAiQWxpYXNlcyBzZXQuIEFsbCBhbGlhc2VkIGNvbW1hbmRzIHdpbGwgbm93IGJlIGxvZ2dlZC4iCmVjaG8gIklmIHNoZWxsIHNlZW1zIHVucmVzcG9uc2l2ZSBvciBjb21tYW5kcyBmYWlsIHVuZXhwZWN0ZWRseSwgeW91IG1heSBuZWVkIHRvIHJlLXNvdXJjZSB0aGlzIGZpbGU6IgplY2hvICIgICAgc291cmNlIHNjcmlwdHMvc2V0dXBfYWxpYXNlcy5zaCIK",
    "scripts/validate_context.py": "aW1wb3J0IG9zCmltcG9ydCBzeXMKCiMgLS0tIEFOU0kgQ29sb3IgQ29kZXMgLS0tCkNZQU4gPSAnXDAzM1swOzM2bScKWUVMTE9XID0gJ1wwMzNbMTszM20nCkdSRUVOID0gJ1wwMzNbMDszMm0nClJFRCA9ICdcMDMzWzA7MzFtJwpOQyA9ICdcMDMzWzBtJyAjIE5vIENvbG9yCgpkZWYgcHJpbnRfc3RhdHVzKG1lc3NhZ2UsIHN0YXR1cyk6CiAgICAiIiJQcmludHMgYSBzdGF0dXMgbWVzc2FnZSB3aXRoIGEgY29sb3JlZCBbUEFTU10gb3IgW0ZBSUxdIHRhZy4iIiIKICAgIGlmIHN0YXR1czoKICAgICAgICBwcmludChmIiAge0dSRUVOfVtQQVNTXXtOQ30ge21lc3NhZ2V9IikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiIgIHtSRUR9W0ZBSUxde05DfSB7bWVzc2FnZX0iKQoKZGVmIG1haW4oKToKICAgICIiIlJ1bnMgYSBzZXJpZXMgb2YgY2hlY2tzIHRvIHZhbGlkYXRlIHRoZSBMb29wJ3MgY29udGV4dC4iIiIKICAgIHByaW50KGYiXG57WUVMTE9XfVYuIExPT1AgSEVBTFRIIENIRUNLIChmcm9tIHZhbGlkYXRlX2NvbnRleHQucHkpOntOQ30iKQoKICAgIGFsbF9jaGVja3NfcGFzc2VkID0gVHJ1ZQoKICAgICMgLS0tIFBhdGggU2V0dXAgLS0tCiAgICBzY3JpcHRfZGlyID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykpCiAgICBwcm9qZWN0X3Jvb3QgPSBvcy5wYXRoLmRpcm5hbWUoc2NyaXB0X2RpcikKCiAgICBjb250ZXh0X2RpciA9IG9zLnBhdGguam9pbihwcm9qZWN0X3Jvb3QsICdjb250ZXh0JykKICAgIHNjcmlwdHNfZGlyID0gb3MucGF0aC5qb2luKHByb2plY3Rfcm9vdCwgJ3NjcmlwdHMnKQogICAgaGFuZG9mZnNfZGlyID0gb3MucGF0aC5qb2luKHByb2plY3Rfcm9vdCwgJ2hhbmRvZmZzJykKCiAgICAjIC0tLSAxLiBDaGVjayBmb3IgZXNzZW50aWFsIGZpbGVzIGFuZCBkaXJlY3RvcmllcyAtLS0KICAgIHByaW50KGYie0NZQU59WzEvM10gQ2hlY2tpbmcgZm9yIGVzc2VudGlhbCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMuLi57TkN9IikKICAgIGVzc2VudGlhbF9maWxlcyA9IFsKICAgICAgICBvcy5wYXRoLmpvaW4ocHJvamVjdF9yb290LCAnQUdFTlRTLm1kJyksCiAgICAgICAgb3MucGF0aC5qb2luKGNvbnRleHRfZGlyLCAnaGlzdG9yeS5sb2cnKSwKICAgICAgICBvcy5wYXRoLmpvaW4oY29udGV4dF9kaXIsICdyb2FkbWFwLm1kJyksCiAgICAgICAgb3MucGF0aC5qb2luKHNjcmlwdHNfZGlyLCAnYWdlbnRfYm9vdHN0cmFwLnNoJyksCiAgICAgICAgb3MucGF0aC5qb2luKHNjcmlwdHNfZGlyLCAnbWV0YV9jb2duaXRpdmVfY2hlY2sucHknKSwKICAgICAgICBvcy5wYXRoLmpvaW4oc2NyaXB0c19kaXIsICdwcmVfc3VibWl0X2NoZWNrLnNoJyksCiAgICAgICAgb3MucGF0aC5qb2luKHNjcmlwdHNfZGlyLCAncHJvY2Vzc19oYW5kb2ZmLnB5JyksCiAgICBdCgogICAgZm9yIGZwYXRoIGluIGVzc2VudGlhbF9maWxlczoKICAgICAgICBleGlzdHMgPSBvcy5wYXRoLmV4aXN0cyhmcGF0aCkKICAgICAgICBwcmludF9zdGF0dXMoZiJGb3VuZDoge29zLnBhdGgucmVscGF0aChmcGF0aCwgcHJvamVjdF9yb290KX0iLCBleGlzdHMpCiAgICAgICAgaWYgbm90IGV4aXN0czoKICAgICAgICAgICAgYWxsX2NoZWNrc19wYXNzZWQgPSBGYWxzZQoKICAgICMgLS0tIDIuIENoZWNrIHNjcmlwdCBleGVjdXRhYmlsaXR5IC0tLQogICAgcHJpbnQoZiJ7Q1lBTn1bMi8zXSBDaGVja2luZyBzY3JpcHQgZXhlY3V0YWJpbGl0eS4uLntOQ30iKQogICAgZXhlY3V0YWJsZV9zY3JpcHRzID0gWwogICAgICAgIG9zLnBhdGguam9pbihzY3JpcHRzX2RpciwgJ2FnZW50X2Jvb3RzdHJhcC5zaCcpLAogICAgICAgIG9zLnBhdGguam9pbihzY3JpcHRzX2RpciwgJ3ByZV9zdWJtaXRfY2hlY2suc2gnKSwKICAgIF0KICAgIGZvciBmcGF0aCBpbiBleGVjdXRhYmxlX3NjcmlwdHM6CiAgICAgICAgaXNfZXhlY3V0YWJsZSA9IG9zLmFjY2VzcyhmcGF0aCwgb3MuWF9PSykKICAgICAgICBwcmludF9zdGF0dXMoZiJFeGVjdXRhYmxlOiB7b3MucGF0aC5yZWxwYXRoKGZwYXRoLCBwcm9qZWN0X3Jvb3QpfSIsIGlzX2V4ZWN1dGFibGUpCiAgICAgICAgaWYgbm90IGlzX2V4ZWN1dGFibGU6CiAgICAgICAgICAgIHByaW50KGYiICAgIC0+IFRpcDogUnVuICdjaG1vZCAreCB7b3MucGF0aC5yZWxwYXRoKGZwYXRoLCBwcm9qZWN0X3Jvb3QpfSciKQogICAgICAgICAgICBhbGxfY2hlY2tzX3Bhc3NlZCA9IEZhbHNlCgogICAgIyAtLS0gMy4gQ2hlY2sgZm9yIHVucHJvY2Vzc2VkIGhhbmRvZmYgZmlsZXMgLS0tCiAgICBwcmludChmIntDWUFOfVszLzNdIENoZWNraW5nIGZvciB1bnByb2Nlc3NlZCBoYW5kb2ZmIGZpbGVzLi4ue05DfSIpCiAgICB0cnk6CiAgICAgICAgaGFuZG9mZl9maWxlcyA9IFtmIGZvciBmIGluIG9zLmxpc3RkaXIoaGFuZG9mZnNfZGlyKSBpZiBmLmVuZHN3aXRoKCcubWQnKV0KICAgICAgICBpZiBub3QgaGFuZG9mZl9maWxlczoKICAgICAgICAgICAgcHJpbnRfc3RhdHVzKCJObyBoYW5kb2ZmcyBmb3VuZCwgc2tpcHBpbmcgY2hlY2suIiwgVHJ1ZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBoaXN0b3J5X2xvZ19wYXRoID0gb3MucGF0aC5qb2luKGNvbnRleHRfZGlyLCAnaGlzdG9yeS5sb2cnKQogICAgICAgICAgICB3aXRoIG9wZW4oaGlzdG9yeV9sb2dfcGF0aCwgJ3InKSBhcyBmOgogICAgICAgICAgICAgICAgaGlzdG9yeV9jb250ZW50ID0gZi5yZWFkKCkKCiAgICAgICAgICAgIHVucHJvY2Vzc2VkX2hhbmRvZmZzID0gW10KICAgICAgICAgICAgZm9yIGhhbmRvZmZfZmlsZW5hbWUgaW4gaGFuZG9mZl9maWxlczoKICAgICAgICAgICAgICAgIGlmIGhhbmRvZmZfZmlsZW5hbWUgbm90IGluIGhpc3RvcnlfY29udGVudDoKICAgICAgICAgICAgICAgICAgICB1bnByb2Nlc3NlZF9oYW5kb2Zmcy5hcHBlbmQoaGFuZG9mZl9maWxlbmFtZSkKCiAgICAgICAgICAgIGlmIG5vdCB1bnByb2Nlc3NlZF9oYW5kb2ZmczoKICAgICAgICAgICAgICAgIHByaW50X3N0YXR1cygiQWxsIGhhbmRvZmYgZmlsZXMgaGF2ZSBiZWVuIHByb2Nlc3NlZC4iLCBUcnVlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnRfc3RhdHVzKGYiRm91bmQge2xlbih1bnByb2Nlc3NlZF9oYW5kb2Zmcyl9IHVucHJvY2Vzc2VkIGhhbmRvZmYgZmlsZShzKS4iLCBGYWxzZSkKICAgICAgICAgICAgICAgIGZvciBmbmFtZSBpbiB1bnByb2Nlc3NlZF9oYW5kb2ZmczoKICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgICAtIHtmbmFtZX0iKQogICAgICAgICAgICAgICAgcHJpbnQoZiIgICAgLT4gVGlwOiBSdW4gJ3B5dGhvbiBzY3JpcHRzL3Byb2Nlc3NfaGFuZG9mZi5weSBoYW5kb2Zmcy88ZmlsZW5hbWU+JyBmb3IgZWFjaCBmaWxlLiIpCiAgICAgICAgICAgICAgICBhbGxfY2hlY2tzX3Bhc3NlZCA9IEZhbHNlCgogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgIHByaW50X3N0YXR1cygiSGFuZG9mZnMgZGlyZWN0b3J5IG9yIGhpc3RvcnkubG9nIG5vdCBmb3VuZCwgY2Fubm90IGNoZWNrIGNvbnNpc3RlbmN5LiIsIEZhbHNlKQogICAgICAgIGFsbF9jaGVja3NfcGFzc2VkID0gRmFsc2UKCiAgICBpZiBub3QgYWxsX2NoZWNrc19wYXNzZWQ6CiAgICAgICAgcHJpbnQoZiJcbntSRUR9TG9vcCBoZWFsdGggY2hlY2sgZmFpbGVkLiBQbGVhc2UgYWRkcmVzcyB0aGUgaXNzdWVzIGFib3ZlLntOQ30iKQogICAgICAgICMgc3lzLmV4aXQoMSkgIyBXZSBjYW4gZGVjaWRlIGxhdGVyIGlmIHdlIHdhbnQgdG8gZXhpdCB3aXRoIGFuIGVycm9yCiAgICBlbHNlOgogICAgICAgIHByaW50KGYiXG57R1JFRU59TG9vcCBoZWFsdGggY2hlY2sgcGFzc2VkLntOQ30iKQoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQo=",
    "scripts/visualize_handoffs.py": "aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgZ3JhcGh2aXoKaW1wb3J0IHRlbXBmaWxlCgpIQU5ET0ZGX0RJUiA9ICdoYW5kb2ZmcycKCmRlZiBwYXJzZV9oYW5kb2ZmX3NlY3Rpb24oY29udGVudCwgc2VjdGlvbl90aXRsZSk6CiAgICAiIiIKICAgIFBhcnNlcyB0aGUgY29udGVudCBvZiBhIHNwZWNpZmljIHNlY3Rpb24gZnJvbSBhIGhhbmRvZmYgZmlsZS4KICAgIGUuZy4sIHNlY3Rpb25fdGl0bGUgPSAiMS4gU3VtbWFyeSBvZiBXb3JrIgogICAgIiIiCiAgICBwYXR0ZXJuID0gcmUuY29tcGlsZSgKICAgICAgICByIiMjIFxkK1wuICIgKyByZS5lc2NhcGUoc2VjdGlvbl90aXRsZSkgKyByIlxuKC4qPykoPz1cbiMjIFxkK1wuIHxcWikiLAogICAgICAgIHJlLkRPVEFMTCB8IHJlLklHTk9SRUNBU0UKICAgICkKICAgIG1hdGNoID0gcGF0dGVybi5zZWFyY2goY29udGVudCkKICAgIGlmIG1hdGNoOgogICAgICAgIHRleHQgPSBtYXRjaC5ncm91cCgxKS5zdHJpcCgpCiAgICAgICAgdGV4dCA9IHJlLnN1YihyJ1xuXHMqXG4nLCAnXG4nLCB0ZXh0KQogICAgICAgICMgRXNjYXBlIGNoYXJhY3RlcnMgZm9yIERPVCdzIEhUTUwtbGlrZSBsYWJlbHMKICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCcmJywgJyZhbXA7JykucmVwbGFjZSgnIicsICcmcXVvdDsnKS5yZXBsYWNlKCc8JywgJyZsdDsnKS5yZXBsYWNlKCc+JywgJyZndDsnKS5yZXBsYWNlKCdcbicsICc8QlIvPicpCiAgICAgICAgIyBMaW1pdCBsZW5ndGggdG8gYXZvaWQgaHVnZSBub2RlcwogICAgICAgIHJldHVybiB0ZXh0Wzo1MDBdICsgJy4uLicgaWYgbGVuKHRleHQpID4gNTAwIGVsc2UgdGV4dAogICAgcmV0dXJuICJOb3QgZm91bmQuIgoKZGVmIGNyZWF0ZV9oYW5kb2ZmX3Zpc3VhbGl6YXRpb24oKToKICAgICIiIgogICAgR2VuZXJhdGVzIGEgUE5HIGdyYXBoIGZyb20gaGFuZG9mZiBmaWxlcyBhbmQgcmV0dXJucyB0aGUgcGF0aC4KICAgICIiIgogICAgdHJ5OgogICAgICAgIGZpbGVuYW1lcyA9IHNvcnRlZChbZiBmb3IgZiBpbiBvcy5saXN0ZGlyKEhBTkRPRkZfRElSKSBpZiBmLmVuZHN3aXRoKCcubWQnKV0pCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgcHJpbnQoZiJFcnJvcjogRGlyZWN0b3J5ICd7SEFORE9GRl9ESVJ9JyBub3QgZm91bmQuIikKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRvdCA9IGdyYXBodml6LkRpZ3JhcGgoJ0hhbmRvZmZzJywgY29tbWVudD0nVGhlIFN0cmFuZ2UgTG9vcCBIYW5kb2ZmIEhpc3RvcnknKQogICAgZG90LmF0dHIoJ2dyYXBoJywKICAgICAgICAgICAgIHJhbmtkaXI9J1RCJywKICAgICAgICAgICAgIGJnY29sb3I9J3RyYW5zcGFyZW50JywKICAgICAgICAgICAgIGxhYmVsPSdUaGUgU3RyYW5nZSBMb29wOiBIYW5kb2ZmIEV2b2x1dGlvbicsCiAgICAgICAgICAgICBmb250bmFtZT0nSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWYnLAogICAgICAgICAgICAgZm9udHNpemU9JzIwJywKICAgICAgICAgICAgIGZvbnRjb2xvcj0nI0ZGRkZGRicpCiAgICBkb3QuYXR0cignbm9kZScsCiAgICAgICAgICAgICBzaGFwZT0nYm94JywKICAgICAgICAgICAgIHN0eWxlPSdyb3VuZGVkLGZpbGxlZCcsCiAgICAgICAgICAgICBmaWxsY29sb3I9JyMyZDM3NDgnLCAjIGdyYXktODAwCiAgICAgICAgICAgICBmb250bmFtZT0nSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWYnLAogICAgICAgICAgICAgZm9udHNpemU9JzEwJywKICAgICAgICAgICAgIGZvbnRjb2xvcj0nI0UyRThGMCcsICMgZ3JheS0yMDAKICAgICAgICAgICAgIHBlbndpZHRoPScxLjUnLAogICAgICAgICAgICAgY29sb3I9JyM0QTU1NjgnKSAjIGdyYXktNjAwCiAgICBkb3QuYXR0cignZWRnZScsCiAgICAgICAgICAgICBjb2xvcj0nIzcxODA5NicsICMgZ3JheS01MDAKICAgICAgICAgICAgIGFycm93aGVhZD0ndmVlJywKICAgICAgICAgICAgIHBlbndpZHRoPScxLjAnKQoKICAgIG5vZGVzID0gW10KICAgIGZvciBmaWxlbmFtZSBpbiBmaWxlbmFtZXM6CiAgICAgICAgbm9kZV9pZCA9IGZpbGVuYW1lLnJlcGxhY2UoJy5tZCcsICcnKQogICAgICAgIG5vZGVzLmFwcGVuZChub2RlX2lkKQogICAgICAgIGZpbGVwYXRoID0gb3MucGF0aC5qb2luKEhBTkRPRkZfRElSLCBmaWxlbmFtZSkKCiAgICAgICAgd2l0aCBvcGVuKGZpbGVwYXRoLCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQoKICAgICAgICBzdW1tYXJ5ID0gcGFyc2VfaGFuZG9mZl9zZWN0aW9uKGNvbnRlbnQsICJTdW1tYXJ5IG9mIFdvcmsiKQogICAgICAgIGRlY2lzaW9ucyA9IHBhcnNlX2hhbmRvZmZfc2VjdGlvbihjb250ZW50LCAiS2V5IERlY2lzaW9ucyIpCiAgICAgICAgbGVzc29ucyA9IHBhcnNlX2hhbmRvZmZfc2VjdGlvbihjb250ZW50LCAiTGVzc29ucyBMZWFybmVkIikKCiAgICAgICAgbGFiZWwgPSBmJzw8VEFCTEUgQk9SREVSPSIwIiBDRUxMQk9SREVSPSIxIiBDRUxMU1BBQ0lORz0iMCIgQ09MT1I9IiM0QTU1NjgiPicKICAgICAgICBsYWJlbCArPSBmJzxUUj48VEQgQUxJR049IkxFRlQiIEJHQ09MT1I9IiMxQTIwMkMiPjxCPntub2RlX2lkfTwvQj48L1REPjwvVFI+JwogICAgICAgIGxhYmVsICs9IGYnPFRSPjxURCBBTElHTj0iTEVGVCIgQkFMSUdOPSJMRUZUIj4nCiAgICAgICAgbGFiZWwgKz0gZic8Qj5TdW1tYXJ5OjwvQj48QlIvPntzdW1tYXJ5LnJlcGxhY2UoIi0gIiwgIjxCUi8+LSAiKX08QlIvPjxCUi8+JwogICAgICAgIGxhYmVsICs9IGYnPEI+RGVjaXNpb25zOjwvQj48QlIvPntkZWNpc2lvbnMucmVwbGFjZSgiLSAiLCAiPEJSLz4tICIpfTxCUi8+PEJSLz4nCiAgICAgICAgbGFiZWwgKz0gZic8Qj5MZXNzb25zOjwvQj48QlIvPntsZXNzb25zLnJlcGxhY2UoIi0gIiwgIjxCUi8+LSAiKX0nCiAgICAgICAgbGFiZWwgKz0gZic8L1REPjwvVFI+PC9UQUJMRT4+JwoKICAgICAgICBkb3Qubm9kZShub2RlX2lkLCBsYWJlbD1sYWJlbCkKCiAgICBmb3IgaSBpbiByYW5nZShsZW4obm9kZXMpIC0gMSk6CiAgICAgICAgZG90LmVkZ2Uobm9kZXNbaV0sIG5vZGVzW2krMV0pCgogICAgIyBSZW5kZXIgdGhlIGdyYXBoIHRvIGEgdGVtcG9yYXJ5IGZpbGUKICAgICMgVGhlIGZvcm1hdCBpcyBzcGVjaWZpZWQsIGFuZCBhIHRlbXBvcmFyeSBmaWxlIGlzIGNyZWF0ZWQuCiAgICAjIFRoZSBjbGVhbnVwPVRydWUgYXJndW1lbnQgd2lsbCByZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGFmdGVyIHJlbmRlcmluZy4KICAgIG91dHB1dF9wYXRoID0gb3MucGF0aC5qb2luKCdzY3JhdGNoJywgJ2hhbmRvZmZfZ3JhcGgnKQogICAgcmVuZGVyZWRfcGF0aCA9IGRvdC5yZW5kZXIob3V0cHV0X3BhdGgsIGZvcm1hdD0ncG5nJywgdmlldz1GYWxzZSwgY2xlYW51cD1UcnVlKQoKICAgIHJldHVybiByZW5kZXJlZF9wYXRoCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgaW1hZ2VfcGF0aCA9IGNyZWF0ZV9oYW5kb2ZmX3Zpc3VhbGl6YXRpb24oKQogICAgaWYgaW1hZ2VfcGF0aDoKICAgICAgICAjIFRoZSBzY3JpcHQgbm93IHByaW50cyB0aGUgcGF0aCB0byB0aGUgZ2VuZXJhdGVkIGltYWdlLAogICAgICAgICMgd2hpY2ggdGhlIGFnZW50IGNhbiB0aGVuIHVzZSB3aXRoIGFub3RoZXIgdG9vbC4KICAgICAgICBwcmludChpbWFnZV9wYXRoKQo=",
    "scripts/workflow_analyzer.py": "aW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCBmY250bAoKIyAtLS0gQ29uc3RhbnRzIC0tLQpTRVNTSU9OX0hJU1RPUllfRklMRSA9ICIuc2Vzc2lvbl9oaXN0b3J5Lmpzb24iClBST1ZFTl9XT1JLRkxPV1NfRklMRSA9ICJjb250ZXh0L3Byb3Zlbl93b3JrZmxvd3MuanNvbiIKCiMgLS0tIEhlbHBlciBGdW5jdGlvbnMgLS0tCgpkZWYgbG9hZF9qc29uX2xvZyhmaWxlX3BhdGgsIGRlZmF1bHQ9Tm9uZSk6CiAgICAiIiJTYWZlbHkgbG9hZHMgYSBKU09OIGZpbGUsIHdpdGggZmlsZSBsb2NraW5nLiIiIgogICAgaWYgZGVmYXVsdCBpcyBOb25lOgogICAgICAgIGRlZmF1bHQgPSBbXQogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGZpbGVfcGF0aCk6CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAncicpIGFzIGY6CiAgICAgICAgICAgIGZjbnRsLmZsb2NrKGYsIGZjbnRsLkxPQ0tfU0gpCiAgICAgICAgICAgIGNvbnRlbnQgPSBqc29uLmxvYWQoZikKICAgICAgICAgICAgZmNudGwuZmxvY2soZiwgZmNudGwuTE9DS19VTikKICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQKICAgIGV4Y2VwdCAoanNvbi5KU09ORGVjb2RlRXJyb3IsIElPRXJyb3IpOgogICAgICAgIHJldHVybiBkZWZhdWx0CgpkZWYgc2F2ZV9qc29uX2xvZyhmaWxlX3BhdGgsIGRhdGEpOgogICAgIiIiU2FmZWx5IHNhdmVzIGRhdGEgdG8gYSBKU09OIGZpbGUsIHdpdGggZmlsZSBsb2NraW5nLiIiIgogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICd3JykgYXMgZjoKICAgICAgICAgICAgZmNudGwuZmxvY2soZiwgZmNudGwuTE9DS19FWCkKICAgICAgICAgICAganNvbi5kdW1wKGRhdGEsIGYsIGluZGVudD0yKQogICAgICAgICAgICBmY250bC5mbG9jayhmLCBmY250bC5MT0NLX1VOKQogICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIkVycm9yIHNhdmluZyBKU09OIGZpbGU6IHtlfSIpCgpkZWYgaXNfcHl0ZXN0X3J1bihldmVudCk6CiAgICAiIiJDaGVja3MgaWYgYSBoaXN0b3J5IGV2ZW50IGlzIGEgcHl0ZXN0IGV4ZWN1dGlvbi4iIiIKICAgICMgVGhpcyBpcyBhIHNpbXBsZSBjaGVjay4gQSBtb3JlIHJvYnVzdCB2ZXJzaW9uIG1pZ2h0IGJlIG5lZWRlZAogICAgIyBpZiB0ZXN0cyBhcmUgcnVuIGluIG1vcmUgY29tcGxleCB3YXlzLgogICAgcmV0dXJuICJweXRlc3QiIGluIGV2ZW50LmdldCgiY29tbWFuZCIsICIiKQoKZGVmIGZpbmRfbGFzdF9ydW5fYnlfc3RhdHVzKGhpc3RvcnksIHN0YXR1cyk6CiAgICAiIiJGaW5kcyB0aGUgaW5kZXggYW5kIGV2ZW50IG9mIHRoZSBsYXN0IHB5dGVzdCBydW4gd2l0aCBhIGdpdmVuIHN0YXR1cy4iIiIKICAgIGZvciBpLCBldmVudCBpbiByZXZlcnNlZChsaXN0KGVudW1lcmF0ZShoaXN0b3J5KSkpOgogICAgICAgIGlmIGlzX3B5dGVzdF9ydW4oZXZlbnQpIGFuZCBldmVudC5nZXQoInN0YXR1cyIpID09IHN0YXR1czoKICAgICAgICAgICAgcmV0dXJuIGksIGV2ZW50CiAgICByZXR1cm4gLTEsIE5vbmUKCmRlZiBleHRyYWN0X3dvcmtmbG93X2Zyb21fc2xpY2UobG9nX3NsaWNlKToKICAgICIiIkV4dHJhY3RzIHRoZSBjb3JlIGFjdGlvbnMgZnJvbSBhIHNlcXVlbmNlIG9mIGV2ZW50cy4iIiIKICAgIHdvcmtmbG93X3N0ZXBzID0gW10KICAgIG1vZGlmaWVkX2ZpbGVzID0gc2V0KCkKCiAgICBmb3IgZXZlbnQgaW4gbG9nX3NsaWNlOgogICAgICAgIHRvb2xfbmFtZSA9IGV2ZW50LmdldCgidG9vbF9uYW1lIikKICAgICAgICAjIFdlIG9ubHkgY2FyZSBhYm91dCBhY3Rpb25zIHRoZSBhZ2VudCB0b29rLCBub3Qgb2JzZXJ2YXRpb25zCiAgICAgICAgaWYgdG9vbF9uYW1lIGluIFsiY3JlYXRlX2ZpbGVfd2l0aF9ibG9jayIsICJvdmVyd3JpdGVfZmlsZV93aXRoX2Jsb2NrIiwgInJlcGxhY2Vfd2l0aF9naXRfbWVyZ2VfZGlmZiJdOgogICAgICAgICAgICAjIFRoZSBmaWxlIHBhdGggaXMgdXN1YWxseSB0aGUgZmlyc3QgYXJndW1lbnQKICAgICAgICAgICAgZmlsZXBhdGggPSBldmVudC5nZXQoInRvb2xfYXJncyIsIFtdKVswXSBpZiBldmVudC5nZXQoInRvb2xfYXJncyIpIGVsc2UgInVua25vd25fZmlsZSIKICAgICAgICAgICAgbW9kaWZpZWRfZmlsZXMuYWRkKGZpbGVwYXRoKQogICAgICAgICAgICB3b3JrZmxvd19zdGVwcy5hcHBlbmQoewogICAgICAgICAgICAgICAgInRvb2xfbmFtZSI6IHRvb2xfbmFtZSwKICAgICAgICAgICAgICAgICJ0b29sX2FyZ3MiOiBldmVudC5nZXQoInRvb2xfYXJncyIpCiAgICAgICAgICAgIH0pCgogICAgcmV0dXJuIHdvcmtmbG93X3N0ZXBzLCBsaXN0KG1vZGlmaWVkX2ZpbGVzKQoKIyAtLS0gTWFpbiBMb2dpYyAtLS0KCmRlZiBtYWluKCk6CiAgICBoaXN0b3J5ID0gbG9hZF9qc29uX2xvZyhTRVNTSU9OX0hJU1RPUllfRklMRSkKICAgIGlmIG5vdCBoaXN0b3J5IG9yIGxlbihoaXN0b3J5KSA8IDI6CiAgICAgICAgcmV0dXJuICMgTm90IGVub3VnaCBldmVudHMgdG8gZmluZCBhIHdvcmtmbG93CgogICAgIyAxLiBDaGVjayBpZiB0aGUgbGFzdCBldmVudCB3YXMgYSBzdWNjZXNzZnVsIHRlc3QgcnVuCiAgICBsYXN0X2V2ZW50ID0gaGlzdG9yeVstMV0KICAgIGlmIG5vdCAoaXNfcHl0ZXN0X3J1bihsYXN0X2V2ZW50KSBhbmQgbGFzdF9ldmVudC5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIik6CiAgICAgICAgcmV0dXJuCgogICAgIyAyLiBDaGVjayBpZiB0aGlzIHN1Y2Nlc3MgaGFzIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQKICAgIHByb3Zlbl93b3JrZmxvd3MgPSBsb2FkX2pzb25fbG9nKFBST1ZFTl9XT1JLRkxPV1NfRklMRSkKICAgIHN1Y2Nlc3NfdGltZXN0YW1wID0gbGFzdF9ldmVudC5nZXQoInRpbWVzdGFtcCIpCiAgICBpZiBhbnkod2YuZ2V0KCJzdWNjZXNzX3RpbWVzdGFtcCIpID09IHN1Y2Nlc3NfdGltZXN0YW1wIGZvciB3ZiBpbiBwcm92ZW5fd29ya2Zsb3dzKToKICAgICAgICByZXR1cm4gIyBUaGlzIHN1Y2Nlc3MgaGFzIGFscmVhZHkgZ2VuZXJhdGVkIGEgd29ya2Zsb3cKCiAgICAjIDMuIEZpbmQgdGhlIG1vc3QgcmVjZW50IHRlc3QgZmFpbHVyZSBiZWZvcmUgdGhpcyBzdWNjZXNzCiAgICBmYWlsdXJlX2luZGV4LCBfID0gZmluZF9sYXN0X3J1bl9ieV9zdGF0dXMoaGlzdG9yeVs6LTFdLCAiZXJyb3IiKQogICAgaWYgZmFpbHVyZV9pbmRleCA9PSAtMToKICAgICAgICByZXR1cm4gIyBObyBwcmlvciBmYWlsdXJlIGZvdW5kCgogICAgIyA0LiBFeHRyYWN0IHRoZSBzbGljZSBvZiBldmVudHMgdGhhdCBjb25zdGl0dXRlcyB0aGUgd29ya2Zsb3cKICAgICMgVGhlIHNsaWNlIHN0YXJ0cyByaWdodCBhZnRlciB0aGUgZmFpbHVyZSBhbmQgZW5kcyByaWdodCBiZWZvcmUgdGhlIHN1Y2Nlc3MKICAgIHdvcmtmbG93X3NsaWNlID0gaGlzdG9yeVtmYWlsdXJlX2luZGV4ICsgMSA6IC0xXQoKICAgIHdvcmtmbG93X3N0ZXBzLCBtb2RpZmllZF9maWxlcyA9IGV4dHJhY3Rfd29ya2Zsb3dfZnJvbV9zbGljZSh3b3JrZmxvd19zbGljZSkKCiAgICBpZiBub3Qgd29ya2Zsb3dfc3RlcHM6CiAgICAgICAgcmV0dXJuICMgVGhlIHdvcmtmbG93IGhhZCBubyBtZWFuaW5nZnVsIGZpbGUtZWRpdGluZyBhY3Rpb25zCgogICAgIyA1LiBDcmVhdGUgdGhlIG5ldyBwcm92ZW4gd29ya2Zsb3cgb2JqZWN0CiAgICBuZXdfd29ya2Zsb3cgPSB7CiAgICAgICAgIm5hbWUiOiBmIldvcmtmbG93IHRoYXQgZml4ZWQgdGVzdHMgcmVsYXRlZCB0bzogeycsICcuam9pbihtb2RpZmllZF9maWxlcyl9IiwKICAgICAgICAic3VjY2Vzc190aW1lc3RhbXAiOiBzdWNjZXNzX3RpbWVzdGFtcCwKICAgICAgICAibW9kaWZpZWRfZmlsZXMiOiBtb2RpZmllZF9maWxlcywKICAgICAgICAic2VxdWVuY2UiOiB3b3JrZmxvd19zdGVwcywKICAgIH0KCiAgICAjIDYuIEFwcGVuZCBhbmQgc2F2ZQogICAgcHJvdmVuX3dvcmtmbG93cy5hcHBlbmQobmV3X3dvcmtmbG93KQogICAgc2F2ZV9qc29uX2xvZyhQUk9WRU5fV09SS0ZMT1dTX0ZJTEUsIHByb3Zlbl93b3JrZmxvd3MpCiAgICAjIHByaW50KGYiTmV3IHdvcmtmbG93IGRpc2NvdmVyZWQgYW5kIHNhdmVkOiB7bmV3X3dvcmtmbG93WyduYW1lJ119IikgIyBPcHRpb25hbDogZm9yIGRlYnVnZ2luZwoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=",
    "tests/requirements.txt": "cHl0ZXN0ClB5WUFNTAo=",
    "tests/test_genesis_tools.py": "aW1wb3J0IHVuaXR0ZXN0CmltcG9ydCBvcwppbXBvcnQganNvbgppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IHNodXRpbAppbXBvcnQgYmFzZTY0CmltcG9ydCBzdGF0CgojIFRoaXMgYXNzdW1lcyB0aGUgdGVzdCBpcyBydW4gZnJvbSB0aGUgcm9vdCBvZiB0aGUgcmVwb3NpdG9yeQpTRUVEX0ZJTEVfUEFUSCA9ICJhcnRpZmFjdHMvZ2VuZXNpc19zZWVkLmpzb24iCkNSRUFURV9TQ1JJUFRfUEFUSCA9ICJzY3JpcHRzL2NyZWF0ZV9zZWVkLnB5IgpHRVJNSU5BVEVfU0NSSVBUX1BBVEggPSAic2NyaXB0cy9nZXJtaW5hdGUucHkiCgpjbGFzcyBUZXN0R2VuZXNpc0FuZEdlcm1pbmF0aW9uKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBzZXRVcENsYXNzKGNscyk6CiAgICAgICAgIiIiCiAgICAgICAgRW5zdXJlIHRoZSBnZW5lc2lzX3NlZWQuanNvbiBleGlzdHMgYmVmb3JlIHJ1bm5pbmcgdGVzdHMuCiAgICAgICAgSWYgbm90LCBjcmVhdGUgaXQuIFRoaXMgbWFrZXMgdGhlIHRlc3Qgc3VpdGUgcnVubmFibGUgb24gaXRzIG93bi4KICAgICAgICAiIiIKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoU0VFRF9GSUxFX1BBVEgpOgogICAgICAgICAgICBwcmludCgiU2VlZCBmaWxlIG5vdCBmb3VuZC4gUnVubmluZyBjcmVhdGVfc2VlZC5weSB0byBnZW5lcmF0ZSBpdC4uLiIpCiAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKFsicHl0aG9uMyIsIENSRUFURV9TQ1JJUFRfUEFUSF0sIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSkKICAgICAgICAgICAgaWYgcmVzdWx0LnJldHVybmNvZGUgIT0gMDoKICAgICAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmIkZhaWxlZCB0byBjcmVhdGUgc2VlZCBmaWxlIGZvciB0ZXN0aW5nOlxue3Jlc3VsdC5zdGRlcnJ9IikKICAgICAgICAgICAgcHJpbnQoIlNlZWQgZmlsZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4iKQoKICAgIGRlZiB0ZXN0XzFfc2VlZF9maWxlX3ZhbGlkYXRpb24oc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgVGVzdHMgdGhhdCB0aGUgZ2VuZXNpc19zZWVkLmpzb24gZmlsZSBpcyB2YWxpZCBhbmQgY29udGFpbnMga2V5IGVsZW1lbnRzLgogICAgICAgICIiIgogICAgICAgIHByaW50KCJcbi0tLSBSdW5uaW5nIFRlc3QgMTogU2VlZCBGaWxlIFZhbGlkYXRpb24gLS0tIikKICAgICAgICBzZWxmLmFzc2VydFRydWUob3MucGF0aC5leGlzdHMoU0VFRF9GSUxFX1BBVEgpKQoKICAgICAgICB3aXRoIG9wZW4oU0VFRF9GSUxFX1BBVEgsICdyJykgYXMgZjoKICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZChmKQoKICAgICAgICAjIENoZWNrIGZvciB0b3AtbGV2ZWwga2V5cwogICAgICAgIHNlbGYuYXNzZXJ0SW4oIm1ldGFkYXRhIiwgZGF0YSkKICAgICAgICBzZWxmLmFzc2VydEluKCJnZXJtaW5hdGlvbl9wcm90b2NvbCIsIGRhdGEpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiZmlsZV9jb250ZW50X21hcCIsIGRhdGEpCgogICAgICAgICMgQ2hlY2sgZm9yIGEga25vd24gZmlsZSBhbmQgaXRzIGNvbnRlbnQKICAgICAgICBzZWxmLmFzc2VydEluKCJBR0VOVFMubWQiLCBkYXRhWyJmaWxlX2NvbnRlbnRfbWFwIl0pCiAgICAgICAgd2l0aCBvcGVuKCJBR0VOVFMubWQiLCAicmIiKSBhcyBmX29yaWc6CiAgICAgICAgICAgIG9yaWdpbmFsX2NvbnRlbnQgPSBmX29yaWcucmVhZCgpCiAgICAgICAgCiAgICAgICAgZGVjb2RlZF9jb250ZW50ID0gYmFzZTY0LmI2NGRlY29kZShkYXRhWyJmaWxlX2NvbnRlbnRfbWFwIl1bIkFHRU5UUy5tZCJdKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob3JpZ2luYWxfY29udGVudCwgZGVjb2RlZF9jb250ZW50KQogICAgICAgIHByaW50KCJTZWVkIGZpbGUgc3RydWN0dXJlIGFuZCBjb250ZW50IGFyZSB2YWxpZC4iKQoKICAgIGRlZiB0ZXN0XzJfZ2VybWluYXRpb25fcHJvY2VzcyhzZWxmKToKICAgICAgICAiIiIKICAgICAgICBUZXN0cyB0aGUgZW5kLXRvLWVuZCBnZXJtaW5hdGlvbiBwcm9jZXNzIGluIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeS4KICAgICAgICAiIiIKICAgICAgICBwcmludCgiXG4tLS0gUnVubmluZyBUZXN0IDI6IEdlcm1pbmF0aW9uIFByb2Nlc3MgLS0tIikKICAgICAgICB3aXRoIHRlbXBmaWxlLlRlbXBvcmFyeURpcmVjdG9yeSgpIGFzIHRtcGRpcjoKICAgICAgICAgICAgc2VlZF9maWxlX2Fic19wYXRoID0gb3MucGF0aC5hYnNwYXRoKFNFRURfRklMRV9QQVRIKQogICAgICAgICAgICBnZXJtaW5hdGVfc2NyaXB0X2Fic19wYXRoID0gb3MucGF0aC5hYnNwYXRoKEdFUk1JTkFURV9TQ1JJUFRfUEFUSCkKCiAgICAgICAgICAgICMgUnVuIGdlcm1pbmF0ZS5weSBpbiB0aGUgdGVtcG9yYXJ5IGRpcmVjdG9yeQogICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bigKICAgICAgICAgICAgICAgIFsicHl0aG9uMyIsIGdlcm1pbmF0ZV9zY3JpcHRfYWJzX3BhdGgsICItLXNlZWRfZmlsZSIsIHNlZWRfZmlsZV9hYnNfcGF0aF0sCiAgICAgICAgICAgICAgICBjd2Q9dG1wZGlyLAogICAgICAgICAgICAgICAgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwKICAgICAgICAgICAgICAgIHRleHQ9VHJ1ZQogICAgICAgICAgICApCgogICAgICAgICAgICAjIENoZWNrIGZvciBzdWNjZXNzZnVsIGV4ZWN1dGlvbgogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5yZXR1cm5jb2RlLCAwLCBmImdlcm1pbmF0ZS5weSBmYWlsZWQ6XG5TVERPVVQ6XG57cmVzdWx0LnN0ZG91dH1cblNUREVSUjpcbntyZXN1bHQuc3RkZXJyfSIpCgogICAgICAgICAgICAjIFZlcmlmeSB0aGUgZmlsZSBzdHJ1Y3R1cmUgaW4gdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkKICAgICAgICAgICAgIyAxLiBDaGVjayBmb3IgYSBrZXkgZGlyZWN0b3J5CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShvcy5wYXRoLmlzZGlyKG9zLnBhdGguam9pbih0bXBkaXIsICJzY3JpcHRzIikpKQogICAgICAgICAgICAjIDIuIENoZWNrIGZvciBhIGtleSBmaWxlCiAgICAgICAgICAgIGdlcm1pbmF0ZWRfYWdlbnRzX21kID0gb3MucGF0aC5qb2luKHRtcGRpciwgIkFHRU5UUy5tZCIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShvcy5wYXRoLmlzZmlsZShnZXJtaW5hdGVkX2FnZW50c19tZCkpCiAgICAgICAgICAgICMgMy4gQ2hlY2sgZmlsZSBjb250ZW50CiAgICAgICAgICAgIHdpdGggb3BlbihnZXJtaW5hdGVkX2FnZW50c19tZCwgJ3InKSBhcyBmOgogICAgICAgICAgICAgICAgY3JlYXRlZF9jb250ZW50ID0gZi5yZWFkKCkKICAgICAgICAgICAgd2l0aCBvcGVuKCJBR0VOVFMubWQiLCAncicpIGFzIGY6CiAgICAgICAgICAgICAgICBvcmlnaW5hbF9jb250ZW50ID0gZi5yZWFkKCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChjcmVhdGVkX2NvbnRlbnQsIG9yaWdpbmFsX2NvbnRlbnQpCiAgICAgICAgICAgICMgNC4gQ2hlY2sgZm9yIGV4ZWN1dGFibGUgcGVybWlzc2lvbgogICAgICAgICAgICBib290c3RyYXBfc2NyaXB0ID0gb3MucGF0aC5qb2luKHRtcGRpciwgInNjcmlwdHMvYWdlbnRfYm9vdHN0cmFwLnNoIikKICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKG9zLnBhdGguZXhpc3RzKGJvb3RzdHJhcF9zY3JpcHQpKQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUob3MuYWNjZXNzKGJvb3RzdHJhcF9zY3JpcHQsIG9zLlhfT0spKQogICAgICAgICAgICBwcmludCgiR2VybWluYXRpb24gcHJvY2VzcyBjcmVhdGVkIHRoZSBjb3JyZWN0IGZpbGUgc3RydWN0dXJlIGFuZCBwZXJtaXNzaW9ucy4iKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB1bml0dGVzdC5tYWluKCkK",
    "tests/test_handoff_scripts.py": "",
    "tests/test_meta_scripts.py": "",
    "tests/test_proliferation_tools.py": "",
    "tests/test_workflow_analyzer.py": "aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IGpzb24KaW1wb3J0IHB5dGVzdAoKIyBBZGQgdGhlICdzY3JpcHRzJyBkaXJlY3RvcnkgdG8gdGhlIHB5dGhvbiBwYXRoCnN5cy5wYXRoLmluc2VydCgwLCBvcy5wYXRoLmFic3BhdGgob3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksICcuLicpKSkKCmZyb20gc2NyaXB0cyBpbXBvcnQgd29ya2Zsb3dfYW5hbHl6ZXIKCkBweXRlc3QuZml4dHVyZQpkZWYgc2V0dXBfd29ya2Zsb3dfdGVzdF9lbnYodG1wX3BhdGgpOgogICAgIiIiU2V0cyB1cCBhIHRlbXBvcmFyeSBlbnZpcm9ubWVudCBmb3Igd29ya2Zsb3cgYW5hbHlzaXMgdGVzdGluZy4iIiIKICAgIHByb2plY3Rfcm9vdCA9IHRtcF9wYXRoCiAgICBjb250ZXh0X2RpciA9IHByb2plY3Rfcm9vdCAvICJjb250ZXh0IgogICAgY29udGV4dF9kaXIubWtkaXIoKQoKICAgICMgQ3JlYXRlIGFuIGVtcHR5IHByb3Zlbl93b3JrZmxvd3MuanNvbgogICAgKGNvbnRleHRfZGlyIC8gInByb3Zlbl93b3JrZmxvd3MuanNvbiIpLndyaXRlX3RleHQoIltdIikKCiAgICAjIENoYW5nZSBDV0QgdG8gdGhlIHRlbXAgcm9vdAogICAgb3JpZ2luYWxfY3dkID0gb3MuZ2V0Y3dkKCkKICAgIG9zLmNoZGlyKHByb2plY3Rfcm9vdCkKICAgIHlpZWxkIHByb2plY3Rfcm9vdAogICAgb3MuY2hkaXIob3JpZ2luYWxfY3dkKQoKZGVmIHRlc3RfZGlzY292ZXJfdGVzdF9maXhfd29ya2Zsb3coc2V0dXBfd29ya2Zsb3dfdGVzdF9lbnYpOgogICAgIiIiCiAgICBUZXN0cyBpZiBhIHN0YW5kYXJkICd0ZXN0IGZpeCcgd29ya2Zsb3cgaXMgY29ycmVjdGx5IGRpc2NvdmVyZWQgYW5kIGxvZ2dlZC4KICAgIFBhdHRlcm46IHRlc3QgZmFpbHMgLT4gY29kZSBpcyBjaGFuZ2VkIC0+IHRlc3QgcGFzc2VzCiAgICAiIiIKICAgIHByb2plY3Rfcm9vdCA9IHNldHVwX3dvcmtmbG93X3Rlc3RfZW52CgogICAgIyAxLiBDcmVhdGUgYSBtb2NrIHNlc3Npb24gaGlzdG9yeSB3aXRoIHRoZSBwYXR0ZXJuCiAgICBzZXNzaW9uX2hpc3RvcnlfcGF0aCA9IHByb2plY3Rfcm9vdCAvICIuc2Vzc2lvbl9oaXN0b3J5Lmpzb24iCiAgICBoaXN0b3J5X2RhdGEgPSBbCiAgICAgICAgIyBBbiBpcnJlbGV2YW50IGNvbW1hbmQKICAgICAgICB7InRvb2xfbmFtZSI6ICJscyIsICJjb21tYW5kIjogImxzIiwgInN0YXR1cyI6ICJzdWNjZXNzIiwgInRpbWVzdGFtcCI6ICJUMDEifSwKICAgICAgICAjIFRoZSB0ZXN0IGZhaWx1cmUKICAgICAgICB7InRvb2xfbmFtZSI6ICJydW5faW5fYmFzaF9zZXNzaW9uIiwgImNvbW1hbmQiOiAicHl0ZXN0IiwgInN0YXR1cyI6ICJlcnJvciIsICJ0aW1lc3RhbXAiOiAiVDAyIn0sCiAgICAgICAgIyBUaGUgZml4CiAgICAgICAgeyJ0b29sX25hbWUiOiAicmVwbGFjZV93aXRoX2dpdF9tZXJnZV9kaWZmIiwgInRvb2xfYXJncyI6IFsic3JjL21haW4ucHkiXSwgInN0YXR1cyI6ICJzdWNjZXNzIiwgInRpbWVzdGFtcCI6ICJUMDMifSwKICAgICAgICAjIFRoZSB0ZXN0IHN1Y2Nlc3MKICAgICAgICB7InRvb2xfbmFtZSI6ICJydW5faW5fYmFzaF9zZXNzaW9uIiwgImNvbW1hbmQiOiAicHl0ZXN0IiwgInN0YXR1cyI6ICJzdWNjZXNzIiwgInRpbWVzdGFtcCI6ICJUMDQifSwKICAgIF0KICAgIHdpdGggb3BlbihzZXNzaW9uX2hpc3RvcnlfcGF0aCwgJ3cnKSBhcyBmOgogICAgICAgIGpzb24uZHVtcChoaXN0b3J5X2RhdGEsIGYpCgogICAgIyAyLiBSdW4gdGhlIGFuYWx5emVyCiAgICB3b3JrZmxvd19hbmFseXplci5tYWluKCkKCiAgICAjIDMuIFJlYWQgdGhlIHJlc3VsdHMgYW5kIGFzc2VydAogICAgcHJvdmVuX3dvcmtmbG93c19wYXRoID0gcHJvamVjdF9yb290IC8gImNvbnRleHQiIC8gInByb3Zlbl93b3JrZmxvd3MuanNvbiIKICAgIHdpdGggb3Blbihwcm92ZW5fd29ya2Zsb3dzX3BhdGgsICdyJykgYXMgZjoKICAgICAgICB3b3JrZmxvd3MgPSBqc29uLmxvYWQoZikKCiAgICBhc3NlcnQgbGVuKHdvcmtmbG93cykgPT0gMQogICAgZGlzY292ZXJlZF93b3JrZmxvdyA9IHdvcmtmbG93c1swXQogICAgYXNzZXJ0IGRpc2NvdmVyZWRfd29ya2Zsb3dbIm5hbWUiXSA9PSAiV29ya2Zsb3cgdGhhdCBmaXhlZCB0ZXN0cyByZWxhdGVkIHRvOiBzcmMvbWFpbi5weSIKICAgIGFzc2VydCBkaXNjb3ZlcmVkX3dvcmtmbG93WyJzdWNjZXNzX3RpbWVzdGFtcCJdID09ICJUMDQiCiAgICBhc3NlcnQgbGVuKGRpc2NvdmVyZWRfd29ya2Zsb3dbInNlcXVlbmNlIl0pID09IDEKICAgIGFzc2VydCBkaXNjb3ZlcmVkX3dvcmtmbG93WyJzZXF1ZW5jZSJdWzBdWyJ0b29sX25hbWUiXSA9PSAicmVwbGFjZV93aXRoX2dpdF9tZXJnZV9kaWZmIgogICAgYXNzZXJ0IGRpc2NvdmVyZWRfd29ya2Zsb3dbInNlcXVlbmNlIl1bMF1bInRvb2xfYXJncyJdWzBdID09ICJzcmMvbWFpbi5weSIKCmRlZiB0ZXN0X25vX3dvcmtmbG93X2lmX25vX2ludGVydmVuaW5nX2FjdGlvbihzZXR1cF93b3JrZmxvd190ZXN0X2Vudik6CiAgICAiIiIKICAgIFRlc3RzIHRoYXQgbm8gd29ya2Zsb3cgaXMgbG9nZ2VkIGlmIHRoZSBmaXggaXMgZW1wdHkgb3IganVzdCBvYnNlcnZhdGlvbi4KICAgICIiIgogICAgcHJvamVjdF9yb290ID0gc2V0dXBfd29ya2Zsb3dfdGVzdF9lbnYKCiAgICBzZXNzaW9uX2hpc3RvcnlfcGF0aCA9IHByb2plY3Rfcm9vdCAvICIuc2Vzc2lvbl9oaXN0b3J5Lmpzb24iCiAgICBoaXN0b3J5X2RhdGEgPSBbCiAgICAgICAgeyJ0b29sX25hbWUiOiAicnVuX2luX2Jhc2hfc2Vzc2lvbiIsICJjb21tYW5kIjogInB5dGVzdCIsICJzdGF0dXMiOiAiZXJyb3IiLCAidGltZXN0YW1wIjogIlQwMSJ9LAogICAgICAgIHsidG9vbF9uYW1lIjogInJlYWRfZmlsZSIsICJ0b29sX2FyZ3MiOiBbInNyYy9tYWluLnB5Il0sICJzdGF0dXMiOiAic3VjY2VzcyIsICJ0aW1lc3RhbXAiOiAiVDAyIn0sICMgTm8gZWRpdAogICAgICAgIHsidG9vbF9uYW1lIjogInJ1bl9pbl9iYXNoX3Nlc3Npb24iLCAiY29tbWFuZCI6ICJweXRlc3QiLCAic3RhdHVzIjogInN1Y2Nlc3MiLCAidGltZXN0YW1wIjogIlQwMyJ9LAogICAgXQogICAgd2l0aCBvcGVuKHNlc3Npb25faGlzdG9yeV9wYXRoLCAndycpIGFzIGY6CiAgICAgICAganNvbi5kdW1wKGhpc3RvcnlfZGF0YSwgZikKCiAgICB3b3JrZmxvd19hbmFseXplci5tYWluKCkKCiAgICBwcm92ZW5fd29ya2Zsb3dzX3BhdGggPSBwcm9qZWN0X3Jvb3QgLyAiY29udGV4dCIgLyAicHJvdmVuX3dvcmtmbG93cy5qc29uIgogICAgd2l0aCBvcGVuKHByb3Zlbl93b3JrZmxvd3NfcGF0aCwgJ3InKSBhcyBmOgogICAgICAgIHdvcmtmbG93cyA9IGpzb24ubG9hZChmKQoKICAgIGFzc2VydCBsZW4od29ya2Zsb3dzKSA9PSAwCgpkZWYgdGVzdF9ub193b3JrZmxvd19pZl9ub19wcmlvcl9mYWlsdXJlKHNldHVwX3dvcmtmbG93X3Rlc3RfZW52KToKICAgICIiIgogICAgVGVzdHMgdGhhdCBubyB3b3JrZmxvdyBpcyBsb2dnZWQgZm9yIGEgdGVzdCBzdWNjZXNzIGlmIHRoZXJlIHdhcyBubwogICAgcHJlY2VkaW5nIGZhaWx1cmUgaW4gdGhlIHJlY2VudCBoaXN0b3J5LgogICAgIiIiCiAgICBwcm9qZWN0X3Jvb3QgPSBzZXR1cF93b3JrZmxvd190ZXN0X2VudgoKICAgIHNlc3Npb25faGlzdG9yeV9wYXRoID0gcHJvamVjdF9yb290IC8gIi5zZXNzaW9uX2hpc3RvcnkuanNvbiIKICAgIGhpc3RvcnlfZGF0YSA9IFsKICAgICAgICB7InRvb2xfbmFtZSI6ICJyZXBsYWNlX3dpdGhfZ2l0X21lcmdlX2RpZmYiLCAidG9vbF9hcmdzIjogWyJzcmMvbWFpbi5weSJdLCAic3RhdHVzIjogInN1Y2Nlc3MiLCAidGltZXN0YW1wIjogIlQwMSJ9LAogICAgICAgIHsidG9vbF9uYW1lIjogInJ1bl9pbl9iYXNoX3Nlc3Npb24iLCAiY29tbWFuZCI6ICJweXRlc3QiLCAic3RhdHVzIjogInN1Y2Nlc3MiLCAidGltZXN0YW1wIjogIlQwMiJ9LAogICAgXQogICAgd2l0aCBvcGVuKHNlc3Npb25faGlzdG9yeV9wYXRoLCAndycpIGFzIGY6CiAgICAgICAganNvbi5kdW1wKGhpc3RvcnlfZGF0YSwgZikKCiAgICB3b3JrZmxvd19hbmFseXplci5tYWluKCkKCiAgICBwcm92ZW5fd29ya2Zsb3dzX3BhdGggPSBwcm9qZWN0X3Jvb3QgLyAiY29udGV4dCIgLyAicHJvdmVuX3dvcmtmbG93cy5qc29uIgogICAgd2l0aCBvcGVuKHByb3Zlbl93b3JrZmxvd3NfcGF0aCwgJ3InKSBhcyBmOgogICAgICAgIHdvcmtmbG93cyA9IGpzb24ubG9hZChmKQoKICAgIGFzc2VydCBsZW4od29ya2Zsb3dzKSA9PSAwCg=="
  }
}