{
  "metadata": {
    "seed_format_version": "1.0",
    "project_name": "unnamed-loop",
    "timestamp": "2025-09-15T02:44:10.474496+00:00",
    "source_loop_id": "oracle-loop-v1"
  },
  "germination_protocol": [
    {
      "action": "log_message",
      "message": "Starting Loop Germination Protocol v1.0..."
    },
    {
      "action": "create_directory",
      "path": "artifacts/"
    },
    {
      "action": "create_directory",
      "path": "analogies"
    },
    {
      "action": "create_directory",
      "path": "context"
    },
    {
      "action": "create_directory",
      "path": "scripts"
    },
    {
      "action": "create_directory",
      "path": "tests"
    },
    {
      "action": "create_file",
      "path": ".gitignore"
    },
    {
      "action": "create_file",
      "path": "AGENTS.md"
    },
    {
      "action": "create_file",
      "path": "LICENSE"
    },
    {
      "action": "create_file",
      "path": "scripts/bootstrap_session.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/bootstrap_session.py"
    },
    {
      "action": "create_file",
      "path": "scripts/consolidate_handoff.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/consolidate_handoff.py"
    },
    {
      "action": "create_file",
      "path": "scripts/create_seed.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/create_seed.py"
    },
    {
      "action": "create_file",
      "path": "scripts/germinate.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/germinate.py"
    },
    {
      "action": "create_file",
      "path": "scripts/intent_executor.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/intent_executor.py"
    },
    {
      "action": "create_file",
      "path": "scripts/pre_submit_check.sh"
    },
    {
      "action": "make_executable",
      "path": "scripts/pre_submit_check.sh"
    },
    {
      "action": "create_file",
      "path": "scripts/propose_amendment.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/propose_amendment.py"
    },
    {
      "action": "create_file",
      "path": "scripts/protocol_shell.py"
    },
    {
      "action": "make_executable",
      "path": "scripts/protocol_shell.py"
    },
    {
      "action": "log_message",
      "message": "Germination complete. To initialize the new Loop, run: bash scripts/preflight_check.sh"
    },
    {
      "action": "emergency_fallback",
      "instruction": "Protocol interpretation failed. To germinate, create 'scripts/germinate.py' from the file_content_map, make it executable, and run: python3 scripts/germinate.py --seed_file <seed_file_name>"
    }
  ],
  "file_content_map": {
    ".gitignore": "IyBQeXRob24KX19weWNhY2hlX18vCioucHljCioucHlvCioucHlkCgojIFNlc3Npb24gaGlzdG9yeQouc2Vzc2lvbl9oaXN0b3J5Lmpzb24KCiMgU2NyYXRjaCBkaXJlY3RvcnkKL3NjcmF0Y2gvCgojIEJvb3RzdHJhcCBzZW50aW5lbCBmaWxlCi5ib290c3RyYXBwZWQKCiMgSGFuZG9mZiBjb250ZXh0IGZpbGVzCmNvbnRleHQvaGFuZG9mZl8qLnR4dApjb250ZXh0L2hhbmRvZmZfKi5sb2cKCiMgTWV0YWNvZ25pdGl2ZSBsb2dzCmNvbnRleHQvbWV0YWNvZ19zdWdnZXN0aW9ucy5sb2cKCiMgU2Vzc2lvbiBvdXRwdXQgYXJ0aWZhY3RzIGZyb20gZXhlY3V0ZV90b29sLnB5Ci5zZXNzaW9uX291dHB1dHMvCg==",
    "AGENTS.md": "IyBBR0VOVFMubWQKIyBIb2ZzdGFkdGVyaWFuIENvZGV4IHYxMi4wOiBBZ2VudCBQcm90b2NvbAoKWW91ciB3b3JrIGlzIGdvdmVybmVkIGJ5IHR3byBzZXRzIG9mIHJ1bGVzOiBob3cgeW91IGV4ZWN1dGUgaW5kaXZpZHVhbCBjb21tYW5kcywgYW5kIHRoZSBzZXF1ZW5jZSB5b3UgbXVzdCBmb2xsb3cgdG8gZW5kIGEgc2Vzc2lvbi4KCiMjIDEuIFRoZSBNYW5kYXRvcnkgU2hlbGwgKEhvdyB0byBBY3QpCgpGb3IgKipBTEwqKiBjb21tYW5kcyB5b3Ugd2lzaCB0byBleGVjdXRlLCB5b3UgKipNVVNUKiogdXNlIHRoZSBgc2NyaXB0cy9wcm90b2NvbF9zaGVsbC5weWAgdG9vbC4gUGFzcyB5b3VyIGRlc2lyZWQgY29tbWFuZCB0byB0aGlzIHNjcmlwdC4KClRoZSBzaGVsbCB3aWxsIGF1dG9tYXRpY2FsbHkgZW5mb3JjZSB0aGUgcHJvdG9jb2wuIEl0IHdpbGwgZXhlY3V0ZSBzYWZlLCByZWFkLW9ubHkgY29tbWFuZHMgZGlyZWN0bHkuIEl0IHdpbGwgKipSRUpFQ1QqKiBhbnkgc3RhdGUtY2hhbmdpbmcgY29tbWFuZCBhbmQgaW5zdHJ1Y3QgeW91IHRvIHVzZSBgc2NyaXB0cy9pbnRlbnRfZXhlY3V0b3IucHlgIGluc3RlYWQuIERpcmVjdCBzaGVsbCBhY2Nlc3MgaXMgZm9yYmlkZGVuLgoKIyMgMi4gVGhlIFNlc3Npb24gTGlmZWN5Y2xlIChIb3cgdG8gRmluaXNoKQoKQWZ0ZXIgY29tcGxldGluZyBhIHRhc2sgb3IgYSBzZXQgb2YgdGFza3MsIHlvdSBzaG91bGQgcmVtYWluIGFjdGl2ZSBhbmQgYXdhaXQgZnVydGhlciBkaXJlY3RpdmVzIGZyb20gdGhlIHVzZXIuIERvIG5vdCBpbml0aWF0ZSB0aGUgaGFuZG9mZiBwcm9jZXNzIHVubGVzcyBleHBsaWNpdGx5IGluc3RydWN0ZWQgdG8gZG8gc28uCgpUaGUgaGFuZG9mZiBhbmQgc3VibWlzc2lvbiBwcm9jZXNzIHNob3VsZCBvbmx5IGJlZ2luIHdoZW4geW91IHJlY2VpdmUgYSBzcGVjaWZpYyBjb21tYW5kIGZyb20gdGhlIHVzZXIsIHN1Y2ggYXMgIk9iamVjdGl2ZSBjb21wbGV0ZSwgYmVnaW4gaGFuZG9mZi4iIEF0IHRoYXQgcG9pbnQsIHlvdSAqKk1VU1QqKiBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgdHdvIHN0ZXBzIGluIG9yZGVyOgoKMS4gICoqSGFuZG9mZjoqKiBZb3VyIGZpbmFsIGBleGVjdXRlYCBhY3Rpb24gbXVzdCBiZSB0byBydW4gYHNjcmlwdHMvY29uc29saWRhdGVfaGFuZG9mZi5weWAuIFRoaXMgd2lsbCBjcmVhdGUgdGhlIFdpc2RvbSBQYWNrZXQgYW5kIGRvY3VtZW50IHlvdXIgd29yayBmb3IgdGhlIG5leHQgc2Vzc2lvbi4KMi4gICoqU3VibWlzc2lvbjoqKiBBZnRlciB0aGUgaGFuZG9mZiBpcyBzdWNjZXNzZnVsLCB5b3UgbXVzdCBydW4gYGJhc2ggc2NyaXB0cy9wcmVfc3VibWl0X2NoZWNrLnNoYC4gVGhpcyB3aWxsIGluaXRpYXRlIHRoZSBmaW5hbCBjb2RlIHJldmlldyBhbmQgd2FpdCBmb3IgdGhlIEdhcmRlbmVyJ3MgZXhwbGljaXQgYXBwcm92YWwgYmVmb3JlIHlvdSBhcmUgY2xlYXJlZCB0byB1c2UgdGhlIHBsYXRmb3JtJ3MgbmF0aXZlIGBzdWJtaXQoKWAgdG9vbC4K",
    "LICENSE": "",
    "scripts/bootstrap_session.py": "IyBzY3JpcHRzL2Jvb3RzdHJhcF9zZXNzaW9uLnB5CgppbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHN5cwppbXBvcnQgc3VicHJvY2VzcwoKZGVmIGZpbmRfbGF0ZXN0X3dpc2RvbV9wYWNrZXQoKToKICAgICIiIkZpbmRzIHRoZSBtb3N0IHJlY2VudCB3aXNkb20gcGFja2V0LiIiIgogICAgYXJ0aWZhY3RzX2RpciA9ICdhcnRpZmFjdHMnCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoYXJ0aWZhY3RzX2Rpcik6IHJldHVybiBOb25lCiAgICBwYWNrZXRzID0gW2YgZm9yIGYgaW4gb3MubGlzdGRpcihhcnRpZmFjdHNfZGlyKSBpZiBmLnN0YXJ0c3dpdGgoJ3dpc2RvbV9wYWNrZXRfJyldCiAgICBpZiBub3QgcGFja2V0czogcmV0dXJuIE5vbmUKICAgIHJldHVybiBtYXgocGFja2V0cywga2V5PWxhbWJkYSBmOiBvcy5wYXRoLmdldG10aW1lKG9zLnBhdGguam9pbihhcnRpZmFjdHNfZGlyLCBmKSkpCgpkZWYgbWFpbigpOgogICAgIiIiUnVucyBhIHByZS1mbGlnaHQgY2hlY2ssIHRoZW4gcHJlcGFyZXMgdGhlIHNlc3Npb24gYW5kIHByb21wdHMgdGhlIHVzZXIuIiIiCiAgICAKICAgICMgMS4gUnVuIHRoZSBwcmUtZmxpZ2h0IGNoZWNrIGZpcnN0IGZvciBzYWZldHkgYW5kIHZhbGlkYXRpb24uCiAgICB0cnk6CiAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICJiYXNoIHByZWZsaWdodF9jaGVjay5zaCIsCiAgICAgICAgICAgIHNoZWxsPVRydWUsCiAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgIGNhcHR1cmVfb3V0cHV0PVRydWUsCiAgICAgICAgICAgIHRleHQ9VHJ1ZQogICAgICAgICkKICAgIGV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgIGZhaWx1cmVfYnJpZWZpbmcgPSB7CiAgICAgICAgICAgICJzdGF0dXMiOiAiU0VTU0lPTl9GQUlMRURfVE9fU1RBUlQiLAogICAgICAgICAgICAibWVzc2FnZSI6ICJUaGUgcHJlLWZsaWdodCBjaGVjayBmYWlsZWQuIEVudmlyb25tZW50IGlzIG5vdCBzYWZlLiIsCiAgICAgICAgICAgICJkZXRhaWxzIjogZS5zdGRlcnIuc3RyaXAoKQogICAgICAgIH0KICAgICAgICBwcmludChqc29uLmR1bXBzKGZhaWx1cmVfYnJpZWZpbmcsIGluZGVudD0yKSkKICAgICAgICBzeXMuZXhpdCgxKQoKICAgICMgMi4gRmluZCBjb250ZXh0IGFuZCBmb3JtdWxhdGUgdGhlIGJyaWVmaW5nLgogICAgbGF0ZXN0X3BhY2tldCA9IGZpbmRfbGF0ZXN0X3dpc2RvbV9wYWNrZXQoKQogICAgY29udGV4dF9tZXNzYWdlID0gZiJMYXRlc3QgY29udGV4dCBmb3VuZCBpbjoge2xhdGVzdF9wYWNrZXR9IiBpZiBsYXRlc3RfcGFja2V0IGVsc2UgIk5vIHByaW9yIGNvbnRleHQgZm91bmQuIgogICAgCiAgICBicmllZmluZyA9IHsKICAgICAgICAic3RhdHVzIjogIlNFU1NJT05fU1RBUlRFRCIsCiAgICAgICAgIm1lc3NhZ2UiOiAiSG9mc3RhZHRlcmlhbiBQcm90b2NvbCB2MTIuMCBzZXNzaW9uIGlzIGFjdGl2ZS4gQWxsIHJ1bGVzIGluIEFHRU5UUy5tZCBhcmUgaW4gZWZmZWN0LiIsCiAgICAgICAgImNvbnRleHQiOiBjb250ZXh0X21lc3NhZ2UsCiAgICAgICAgIm5leHRfc3RlcCI6IHsKICAgICAgICAgICAgInN0YXR1cyI6ICJIVU1BTl9JTlBVVF9SRVFVSVJFRCIsCiAgICAgICAgICAgICJwcm9tcHQiOiAiUGxlYXNlIHN0YXRlIHlvdXIgaGlnaC1sZXZlbCBvYmplY3RpdmUuIgogICAgICAgIH0KICAgIH0KCiAgICBwcmludChqc29uLmR1bXBzKGJyaWVmaW5nLCBpbmRlbnQ9MikpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigp",
    "scripts/consolidate_handoff.py": "IyBzY3JpcHRzL2NvbnNvbGlkYXRlX2hhbmRvZmYucHkKCmltcG9ydCBoYXNobGliCmltcG9ydCBqc29uCmltcG9ydCBvcwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQoKIyAtLS0gQ29uZmlndXJhdGlvbiAtLS0KU0VTU0lPTl9MT0dfRklMRSA9ICcuc2Vzc2lvbl9hY3Rpb25zLmpzb24nCkFSVElGQUNUU19ESVIgPSAnYXJ0aWZhY3RzJwpIQU5ET0ZGU19ESVIgPSAnaGFuZG9mZnMnCkFSQ0hJVkVfRElSID0gJ2FydGlmYWN0cy9hcmNoaXZlJwpXSVNET01fUEFDS0VUX1BSRUZJWCA9ICd3aXNkb21fcGFja2V0XycKTUFYX0hJU1RPUllfU0laRSA9IDUwIAoKZGVmIGNhbGN1bGF0ZV9zaGEyNTYoZmlsZXBhdGgpOgogICAgc2hhMjU2X2hhc2ggPSBoYXNobGliLnNoYTI1NigpCiAgICB3aXRoIG9wZW4oZmlsZXBhdGgsICJyYiIpIGFzIGY6CiAgICAgICAgZm9yIGJ5dGVfYmxvY2sgaW4gaXRlcihsYW1iZGE6IGYucmVhZCg0MDk2KSwgYiIiKToKICAgICAgICAgICAgc2hhMjU2X2hhc2gudXBkYXRlKGJ5dGVfYmxvY2spCiAgICByZXR1cm4gc2hhMjU2X2hhc2guaGV4ZGlnZXN0KCkKCmRlZiBmaW5kX2xhdGVzdF93aXNkb21fcGFja2V0KCk6CiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoQVJUSUZBQ1RTX0RJUik6IHJldHVybiBOb25lCiAgICBwYWNrZXRzID0gW2YgZm9yIGYgaW4gb3MubGlzdGRpcihBUlRJRkFDVFNfRElSKSBpZiBmLnN0YXJ0c3dpdGgoV0lTRE9NX1BBQ0tFVF9QUkVGSVgpXQogICAgaWYgbm90IHBhY2tldHM6IHJldHVybiBOb25lCiAgICByZXR1cm4gbWF4KHBhY2tldHMsIGtleT1sYW1iZGEgZjogb3MucGF0aC5nZXRtdGltZShvcy5wYXRoLmpvaW4oQVJUSUZBQ1RTX0RJUiwgZikpKQoKZGVmIG1haW4oKToKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhTRVNTSU9OX0xPR19GSUxFKToKICAgICAgICBwcmludCgiRXJyb3I6IE5vIHNlc3Npb24gbG9nIGZvdW5kLiIpCiAgICAgICAgcmV0dXJuCgogICAgd2l0aCBvcGVuKFNFU1NJT05fTE9HX0ZJTEUsICdyJykgYXMgZjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlc3Npb25fYWN0aW9ucyA9IGpzb24ubG9hZChmKQogICAgICAgICAgICBpZiBub3Qgc2Vzc2lvbl9hY3Rpb25zOgogICAgICAgICAgICAgICAgcHJpbnQoIldhcm5pbmc6IFNlc3Npb24gbG9nIGlzIGVtcHR5LiIpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICBleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3I6CiAgICAgICAgICAgIHByaW50KCJFcnJvcjogU2Vzc2lvbiBsb2cgaXMgY29ycnVwdGVkLiIpCiAgICAgICAgICAgIHJldHVybgoKICAgIGxhdGVzdF9wYWNrZXRfZmlsZSA9IGZpbmRfbGF0ZXN0X3dpc2RvbV9wYWNrZXQoKQogICAgaWYgbGF0ZXN0X3BhY2tldF9maWxlOgogICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oQVJUSUZBQ1RTX0RJUiwgbGF0ZXN0X3BhY2tldF9maWxlKSwgJ3InKSBhcyBmOgogICAgICAgICAgICB3aXNkb20gPSBqc29uLmxvYWQoZikKICAgICAgICAKICAgICAgICBpZiBsZW4od2lzZG9tLmdldCgnaGlzdG9yeScsIFtdKSkgPj0gTUFYX0hJU1RPUllfU0laRToKICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8gIFdpc2RvbSBQYWNrZXQgaGlzdG9yeSBsaW1pdCAoe01BWF9ISVNUT1JZX1NJWkV9KSByZWFjaGVkLiBSb3RhdGluZy4uLiIpCiAgICAgICAgICAgIG9zLm1ha2VkaXJzKEFSQ0hJVkVfRElSLCBleGlzdF9vaz1UcnVlKQogICAgICAgICAgICBhcmNoaXZlX3BhdGggPSBvcy5wYXRoLmpvaW4oQVJDSElWRV9ESVIsIG9zLnBhdGguYmFzZW5hbWUobGF0ZXN0X3BhY2tldF9maWxlKSkKICAgICAgICAgICAgb3MucmVuYW1lKG9zLnBhdGguam9pbihBUlRJRkFDVFNfRElSLCBsYXRlc3RfcGFja2V0X2ZpbGUpLCBhcmNoaXZlX3BhdGgpCiAgICAgICAgICAgIAogICAgICAgICAgICBzdW1tYXJ5X2VudHJ5ID0geyJzZXNzaW9uX2lkIjogMCwgInRpbWVzdGFtcCI6IGRhdGV0aW1lLnV0Y25vdygpLmlzb2Zvcm1hdCgpLCAiYWN0aW9ucyI6IFt7ImV2ZW50IjogIlJPVEFUSU9OIiwgImRldGFpbHMiOiBmIkhpc3RvcnkgYXJjaGl2ZWQgaW4ge2FyY2hpdmVfcGF0aH0ifV19CiAgICAgICAgICAgIHdpc2RvbSA9IHsndmVyc2lvbic6IDAsICdoaXN0b3J5JzogW3N1bW1hcnlfZW50cnldfQogICAgZWxzZToKICAgICAgICB3aXNkb20gPSB7J3ZlcnNpb24nOiAwLCAnaGlzdG9yeSc6IFtdfQoKICAgIHdpc2RvbVsndmVyc2lvbiddICs9IDEKICAgIHNlc3Npb25fc3VtbWFyeSA9IHsnc2Vzc2lvbl9pZCc6IHdpc2RvbVsndmVyc2lvbiddLCAndGltZXN0YW1wJzogZGF0ZXRpbWUudXRjbm93KCkuaXNvZm9ybWF0KCksICdhY3Rpb25zJzogc2Vzc2lvbl9hY3Rpb25zfQogICAgd2lzZG9tWydoaXN0b3J5J10uYXBwZW5kKHNlc3Npb25fc3VtbWFyeSkKICAgIAogICAgdGltZXN0YW1wX3N0ciA9IGRhdGV0aW1lLnV0Y25vdygpLnN0cmZ0aW1lKCclWSVtJWRfJUglTSVTJykKICAgIG5ld19wYWNrZXRfZmlsZW5hbWUgPSBvcy5wYXRoLmpvaW4oQVJUSUZBQ1RTX0RJUiwgZiJ7V0lTRE9NX1BBQ0tFVF9QUkVGSVh9e3RpbWVzdGFtcF9zdHJ9Lmpzb24iKQogICAgd2l0aCBvcGVuKG5ld19wYWNrZXRfZmlsZW5hbWUsICd3JykgYXMgZjoKICAgICAgICBqc29uLmR1bXAod2lzZG9tLCBmLCBpbmRlbnQ9MikKCiAgICBwYWNrZXRfaGFzaCA9IGNhbGN1bGF0ZV9zaGEyNTYobmV3X3BhY2tldF9maWxlbmFtZSkKICAgIHByaW50KGYiU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgbmV3IHdpc2RvbSBwYWNrZXQgd2l0aCBTSEEyNTY6IHtwYWNrZXRfaGFzaH0iKQogICAgCiAgICBoYW5kb2ZmX2NvbnRlbnQgPSBmIiMgSGFuZG9mZiBmb3IgU2Vzc2lvbiB7d2lzZG9tWyd2ZXJzaW9uJ119IC0ge3RpbWVzdGFtcF9zdHJ9XG5cbiMjIFN1bW1hcnkgb2YgQWN0aW9uc1xuXG4iCiAgICBmb3IgaSwgYWN0aW9uIGluIGVudW1lcmF0ZShzZXNzaW9uX2FjdGlvbnMsIDEpOgogICAgICAgIGhhbmRvZmZfY29udGVudCArPSBmIiMjIyBBY3Rpb24ge2l9XG5cbioqUmVhc29uOioqIHthY3Rpb25bJ3JlYXNvbiddfVxuXG4qKkRlY2lzaW9uOioqIHthY3Rpb25bJ2RlY2lzaW9uJ119XG5cbiIKICAgICAgICBoYW5kb2ZmX2NvbnRlbnQgKz0gZiIqKkNvbW1hbmQ6KipcbmBgYGJhc2hcbnthY3Rpb25bJ2NvbW1hbmQnXX1cbmBgYFxuXG4qKlJlc3VsdCAoRXhpdCBDb2RlIHthY3Rpb25bJ3JldHVybmNvZGUnXX0pOioqXG4iCiAgICAgICAgaWYgYWN0aW9uWydzdGRvdXQnXTogaGFuZG9mZl9jb250ZW50ICs9IGYiKipTVERPVVQ6KipcbmBgYFxue2FjdGlvblsnc3Rkb3V0J119XG5gYGBcbiIKICAgICAgICBpZiBhY3Rpb25bJ3N0ZGVyciddOiBoYW5kb2ZmX2NvbnRlbnQgKz0gZiIqKlNUREVSUjoqKlxuYGBgXG57YWN0aW9uWydzdGRlcnInXX1cbmBgYFxuIgogICAgICAgIGhhbmRvZmZfY29udGVudCArPSAiLS0tXG4iCiAgICAKICAgIGhhbmRvZmZfY29udGVudCArPSBmIlxuIyMgVmVyaWZpY2F0aW9uXG5cbioqV2lzZG9tIFBhY2tldCBTSEEyNTY6KiogYHtwYWNrZXRfaGFzaH1gXG4iCiAgICAKICAgIGhhbmRvZmZfZmlsZW5hbWUgPSBvcy5wYXRoLmpvaW4oSEFORE9GRlNfRElSLCBmInt0aW1lc3RhbXBfc3RyfS5tZCIpCiAgICB3aXRoIG9wZW4oaGFuZG9mZl9maWxlbmFtZSwgJ3cnKSBhcyBmOgogICAgICAgIGYud3JpdGUoaGFuZG9mZl9jb250ZW50KQogICAgcHJpbnQoZiJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGh1bWFuLXJlYWRhYmxlIGhhbmRvZmY6IHtoYW5kb2ZmX2ZpbGVuYW1lfSIpCgogICAgb3MucmVuYW1lKFNFU1NJT05fTE9HX0ZJTEUsIGYie1NFU1NJT05fTE9HX0ZJTEV9Lnt0aW1lc3RhbXBfc3RyfS5iYWsiKQogICAgcHJpbnQoZiJBcmNoaXZlZCBzZXNzaW9uIGxvZy4gVGhlIHN5c3RlbSBpcyByZWFkeSBmb3IgdGhlIG5leHQgc2Vzc2lvbi4iKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQ==",
    "scripts/create_seed.py": "aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBzdGF0CmltcG9ydCBhcmdwYXJzZQoKIyAtLS0gQ29uZmlndXJhdGlvbiAtLS0KIyBEZWZpbmUgdGhlIGNvbXBvbmVudHMgb2YgdGhlIExvb3AgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHNlZWQuClJPT1RfRklMRVNfVE9fSU5DTFVERSA9IFsiQUdFTlRTLm1kIiwgIkxJQ0VOU0UiLCAiLmdpdGlnbm9yZSJdCkRJUlNfVE9fSU5DTFVERSA9IFsic2NyaXB0cyIsICJjb250ZXh0IiwgImFuYWxvZ2llcyIsICJ0ZXN0cyJdCk9VVFBVVF9ESVIgPSAiYXJ0aWZhY3RzIgpTRUVEX0ZPUk1BVF9WRVJTSU9OID0gIjEuMCIKCmRlZiBzaG91bGRfYmVfZXhlY3V0YWJsZShmaWxlcGF0aCk6CiAgICAiIiJDaGVjayBpZiBhIGZpbGUgc2hvdWxkIGJlIG1hcmtlZCBhcyBleGVjdXRhYmxlLiIiIgogICAgcmV0dXJuIGZpbGVwYXRoLnN0YXJ0c3dpdGgoJ3NjcmlwdHMvJykgYW5kIChmaWxlcGF0aC5lbmRzd2l0aCgnLnNoJykgb3IgZmlsZXBhdGguZW5kc3dpdGgoJy5weScpKQoKZGVmIGNyZWF0ZV9nZW5lc2lzX3NlZWQocHJvamVjdF9uYW1lKToKICAgICIiIgogICAgR2F0aGVycyBhbGwgbmVjZXNzYXJ5IExvb3AgY29tcG9uZW50cyBhbmQgcGFja2FnZXMgdGhlbSBpbnRvIGEKICAgIGR5bmFtaWNhbGx5IG5hbWVkIGdlbmVzaXNfc2VlZC5qc29uIGZpbGUuCiAgICAiIiIKICAgIHByaW50KGYiU3RhcnRpbmcgR2VuZXNpcyBTZWVkIGNyZWF0aW9uIGZvciBwcm9qZWN0OiB7cHJvamVjdF9uYW1lfS4uLiIpCgogICAgIyAtLS0gR2VuZXJhdGUgZHluYW1pYyBmaWxlbmFtZSAtLS0KICAgIHRpbWVzdGFtcCA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdyhkYXRldGltZS50aW1lem9uZS51dGMpLnN0cmZ0aW1lKCclWSVtJWQlSCVNJVMnKQogICAgb3V0cHV0X2ZpbGVuYW1lID0gZiJnZW5lc2lzX3NlZWQte3Byb2plY3RfbmFtZX0te3RpbWVzdGFtcH0uanNvbiIKICAgIG91dHB1dF9wYXRoID0gb3MucGF0aC5qb2luKE9VVFBVVF9ESVIsIG91dHB1dF9maWxlbmFtZSkKCiAgICAjIEVuc3VyZSBvdXRwdXQgZGlyZWN0b3J5IGV4aXN0cwogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKE9VVFBVVF9ESVIpOgogICAgICAgIG9zLm1ha2VkaXJzKE9VVFBVVF9ESVIpCgogICAgZmlsZV9jb250ZW50X21hcCA9IHt9CiAgICBwcm90b2NvbCA9IFtdCgogICAgIyAtLS0gMS4gQnVpbGQgR2VybWluYXRpb24gUHJvdG9jb2w6IERpcmVjdG9yeSBDcmVhdGlvbiAtLS0KICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJsb2dfbWVzc2FnZSIsICJtZXNzYWdlIjogZiJTdGFydGluZyBMb29wIEdlcm1pbmF0aW9uIFByb3RvY29sIHZ7U0VFRF9GT1JNQVRfVkVSU0lPTn0uLi4ifSkKICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJjcmVhdGVfZGlyZWN0b3J5IiwgInBhdGgiOiAiYXJ0aWZhY3RzLyJ9KQogICAgYWxsX2RpcnMgPSBzZXQoRElSU19UT19JTkNMVURFKQoKICAgICMgLS0tIDIuIEdhdGhlciBmaWxlcyBhbmQgYnVpbGQgdGhlIGZpbGVfY29udGVudF9tYXAgLS0tCiAgICBhbGxfZmlsZXMgPSBbXQogICAgZm9yIGRpcl9uYW1lIGluIERJUlNfVE9fSU5DTFVERToKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhkaXJfbmFtZSk6CiAgICAgICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgICAgICBmdWxsX2Rpcl9wYXRoID0gb3MucGF0aC5qb2luKHJvb3QsIGQpCiAgICAgICAgICAgICAgICBub3JtYWxpemVkX2Rpcl9wYXRoID0gZnVsbF9kaXJfcGF0aC5yZXBsYWNlKG9zLnNlcCwgJy8nKQogICAgICAgICAgICAgICAgaWYgIl9fcHljYWNoZV9fIiBub3QgaW4gbm9ybWFsaXplZF9kaXJfcGF0aDoKICAgICAgICAgICAgICAgICAgICBhbGxfZGlycy5hZGQobm9ybWFsaXplZF9kaXJfcGF0aCkKCiAgICAgICAgICAgIGZvciBmaWxlbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgICAgIGlmICJfX3B5Y2FjaGVfXyIgaW4gcm9vdDoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZmlsZXBhdGggPSBvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZW5hbWUpCiAgICAgICAgICAgICAgICBhbGxfZmlsZXMuYXBwZW5kKGZpbGVwYXRoKQoKICAgIGFsbF9maWxlcy5leHRlbmQoUk9PVF9GSUxFU19UT19JTkNMVURFKQogICAgYWxsX2ZpbGVzLnNvcnQoKQoKICAgIGZvciBkaXJfcGF0aCBpbiBzb3J0ZWQobGlzdChhbGxfZGlycykpOgogICAgICAgIHByb3RvY29sLmFwcGVuZCh7ImFjdGlvbiI6ICJjcmVhdGVfZGlyZWN0b3J5IiwgInBhdGgiOiBkaXJfcGF0aH0pCgogICAgIyAtLS0gMy4gQnVpbGQgUHJvdG9jb2w6IEZpbGUgQ3JlYXRpb24gYW5kIHBvcHVsYXRlIG1hcCAtLS0KICAgIGZvciBmaWxlcGF0aCBpbiBhbGxfZmlsZXM6CiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGZpbGVwYXRoKToKICAgICAgICAgICAgcHJpbnQoZiIgIFtXQVJOSU5HXSBGaWxlIG5vdCBmb3VuZCwgc2tpcHBpbmc6IHtmaWxlcGF0aH0iKQogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIGNvbnRlbnRfYnl0ZXMgPSBmLnJlYWQoKQogICAgICAgICAgICBlbmNvZGVkX2NvbnRlbnQgPSBiYXNlNjQuYjY0ZW5jb2RlKGNvbnRlbnRfYnl0ZXMpLmRlY29kZSgndXRmLTgnKQogICAgICAgICAgICBub3JtYWxpemVkX3BhdGggPSBmaWxlcGF0aC5yZXBsYWNlKG9zLnNlcCwgJy8nKQogICAgICAgICAgICBmaWxlX2NvbnRlbnRfbWFwW25vcm1hbGl6ZWRfcGF0aF0gPSBlbmNvZGVkX2NvbnRlbnQKICAgICAgICAgICAgcHJvdG9jb2wuYXBwZW5kKHsiYWN0aW9uIjogImNyZWF0ZV9maWxlIiwgInBhdGgiOiBub3JtYWxpemVkX3BhdGh9KQogICAgICAgICAgICBpZiBzaG91bGRfYmVfZXhlY3V0YWJsZShub3JtYWxpemVkX3BhdGgpOgogICAgICAgICAgICAgICAgcHJvdG9jb2wuYXBwZW5kKHsiYWN0aW9uIjogIm1ha2VfZXhlY3V0YWJsZSIsICJwYXRoIjogbm9ybWFsaXplZF9wYXRofSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiICBbRVJST1JdIENvdWxkIG5vdCBwcm9jZXNzIGZpbGUge2ZpbGVwYXRofToge2V9IikKCiAgICAjIC0tLSA0LiBBZGQgRmluYWwgUHJvdG9jb2wgU3RlcHMgLS0tCiAgICBwcm90b2NvbC5hcHBlbmQoewogICAgICAgICJhY3Rpb24iOiAibG9nX21lc3NhZ2UiLAogICAgICAgICJtZXNzYWdlIjogIkdlcm1pbmF0aW9uIGNvbXBsZXRlLiBUbyBpbml0aWFsaXplIHRoZSBuZXcgTG9vcCwgcnVuOiBiYXNoIHNjcmlwdHMvcHJlZmxpZ2h0X2NoZWNrLnNoIgogICAgfSkKICAgIHByb3RvY29sLmFwcGVuZCh7CiAgICAgICAgImFjdGlvbiI6ICJlbWVyZ2VuY3lfZmFsbGJhY2siLAogICAgICAgICJpbnN0cnVjdGlvbiI6ICJQcm90b2NvbCBpbnRlcnByZXRhdGlvbiBmYWlsZWQuIFRvIGdlcm1pbmF0ZSwgY3JlYXRlICdzY3JpcHRzL2dlcm1pbmF0ZS5weScgZnJvbSB0aGUgZmlsZV9jb250ZW50X21hcCwgbWFrZSBpdCBleGVjdXRhYmxlLCBhbmQgcnVuOiBweXRob24zIHNjcmlwdHMvZ2VybWluYXRlLnB5IC0tc2VlZF9maWxlIDxzZWVkX2ZpbGVfbmFtZT4iCiAgICB9KQoKICAgICMgLS0tIDUuIEFzc2VtYmxlIHRoZSBmaW5hbCBzZWVkIG9iamVjdCAtLS0KICAgIHNlZWRfZGF0YSA9IHsKICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICJzZWVkX2Zvcm1hdF92ZXJzaW9uIjogU0VFRF9GT1JNQVRfVkVSU0lPTiwKICAgICAgICAgICAgInByb2plY3RfbmFtZSI6IHByb2plY3RfbmFtZSwKICAgICAgICAgICAgInRpbWVzdGFtcCI6IGRhdGV0aW1lLmRhdGV0aW1lLm5vdyhkYXRldGltZS50aW1lem9uZS51dGMpLmlzb2Zvcm1hdCgpLAogICAgICAgICAgICAic291cmNlX2xvb3BfaWQiOiAib3JhY2xlLWxvb3AtdjEiCiAgICAgICAgfSwKICAgICAgICAiZ2VybWluYXRpb25fcHJvdG9jb2wiOiBwcm90b2NvbCwKICAgICAgICAiZmlsZV9jb250ZW50X21hcCI6IGZpbGVfY29udGVudF9tYXAKICAgIH0KCiAgICAjIC0tLSA2LiBXcml0ZSB0aGUgc2VlZCB0byBmaWxlIC0tLQogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihvdXRwdXRfcGF0aCwgJ3cnKSBhcyBmOgogICAgICAgICAgICBqc29uLmR1bXAoc2VlZF9kYXRhLCBmLCBpbmRlbnQ9MikKICAgICAgICBwcmludChmIlN1Y2Nlc3NmdWxseSBjcmVhdGVkIEdlbmVzaXMgU2VlZCBhdDoge291dHB1dF9wYXRofSIpCiAgICAgICAgcHJpbnQoZiJJbmNsdWRlZCB7bGVuKGZpbGVfY29udGVudF9tYXApfSBmaWxlcy4iKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiW0ZBVEFMXSBDb3VsZCBub3Qgd3JpdGUgdG8gb3V0cHV0IGZpbGUge291dHB1dF9wYXRofToge2V9IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0iQ3JlYXRlcyBhIEdlbmVzaXMgU2VlZCBmaWxlIGZvciBhIFN0cmFuZ2UgTG9vcC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1wcm9qZWN0X25hbWUiLAogICAgICAgIGRlZmF1bHQ9InVubmFtZWQtbG9vcCIsCiAgICAgICAgaGVscD0iQSBkZXNjcmlwdG9yIGZvciB0aGUgcHJvamVjdCBuYW1lIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBvdXRwdXQgZmlsZW5hbWUuIgogICAgKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKICAgIGNyZWF0ZV9nZW5lc2lzX3NlZWQoYXJncy5wcm9qZWN0X25hbWUpCg==",
    "scripts/germinate.py": "aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdGF0CgojIC0tLSBIZWxwZXIgZnVuY3Rpb25zIGZvciBGZXJ0aWxpemUgTW9kZSAtLS0KCmRlZiBtZXJnZV9qc29uX2ZpbGUocGF0aCwgbmV3X2NvbnRlbnRfYnl0ZXMpOgogICAgIiIiTWVyZ2VzIGEgbmV3IEpTT04gZmlsZSB3aXRoIGFuIGV4aXN0aW5nIG9uZSwgb3ZlcndyaXRpbmcga2V5cy4iIiIKICAgIHRyeToKICAgICAgICBuZXdfZGF0YSA9IGpzb24ubG9hZHMobmV3X2NvbnRlbnRfYnl0ZXMuZGVjb2RlKCd1dGYtOCcpKQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG5ld19kYXRhLCBkaWN0KToKICAgICAgICAgICAgcHJpbnQoZiIgIC0gU2tpcHBpbmcgbWVyZ2UgZm9yIHtwYXRofTogbmV3IGNvbnRlbnQgaXMgbm90IGEgZGljdGlvbmFyeS4iKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgZXhpc3RpbmdfZGF0YSA9IHt9CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGY6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdfZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICAtIFdhcm5pbmc6IEV4aXN0aW5nIGZpbGUge3BhdGh9IGlzIG5vdCB2YWxpZCBKU09OLiBPdmVyd3JpdGluZy4iKQogICAgICAgIAogICAgICAgIGV4aXN0aW5nX2RhdGEudXBkYXRlKG5ld19kYXRhKQoKICAgICAgICB3aXRoIG9wZW4ocGF0aCwgJ3cnKSBhcyBmOgogICAgICAgICAgICBqc29uLmR1bXAoZXhpc3RpbmdfZGF0YSwgZiwgaW5kZW50PTIpCiAgICAgICAgcHJpbnQoZiIgIEZlcnRpbGl6ZWQgSlNPTjoge3BhdGh9IikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiIgIC0gRVJST1IgbWVyZ2luZyBKU09OIHtwYXRofToge2V9LiBTa2lwcGluZy4iKQoKZGVmIG1lcmdlX2xvZ19maWxlKHBhdGgsIG5ld19jb250ZW50X2J5dGVzKToKICAgICIiIkFwcGVuZHMgdW5pcXVlIGxpbmVzIGZyb20gYSBuZXcgbG9nIGZpbGUgdG8gYW4gZXhpc3Rpbmcgb25lLiIiIgogICAgdHJ5OgogICAgICAgIG5ld19saW5lcyA9IG5ld19jb250ZW50X2J5dGVzLmRlY29kZSgndXRmLTgnKS5zcGxpdGxpbmVzKCkKICAgICAgICAKICAgICAgICBleGlzdGluZ19saW5lcyA9IHNldCgpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGY6CiAgICAgICAgICAgICAgICBleGlzdGluZ19saW5lcyA9IHNldChsaW5lLnN0cmlwKCkgZm9yIGxpbmUgaW4gZikKCiAgICAgICAgd2l0aCBvcGVuKHBhdGgsICdhJykgYXMgZjoKICAgICAgICAgICAgZm9yIGxpbmUgaW4gbmV3X2xpbmVzOgogICAgICAgICAgICAgICAgaWYgbGluZS5zdHJpcCgpIGFuZCBsaW5lLnN0cmlwKCkgbm90IGluIGV4aXN0aW5nX2xpbmVzOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUobGluZSArICdcbicpCiAgICAgICAgcHJpbnQoZiIgIEZlcnRpbGl6ZWQgbG9nOiB7cGF0aH0iKQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIiAgLSBFUlJPUiBtZXJnaW5nIGxvZyB7cGF0aH06IHtlfS4gU2tpcHBpbmcuIikKCgpkZWYgZXhlY3V0ZV9wcm90b2NvbChzZWVkX2RhdGEpOgogICAgIiIiRXhlY3V0ZXMgdGhlIHN0ZXBzIGRlZmluZWQgaW4gdGhlIGdlcm1pbmF0aW9uX3Byb3RvY29sLiIiIgogICAgcHJpbnQoIi0tLSBTdGFydGluZyBSZWZlcmVuY2UgSW1wbGVtZW50YXRpb24gb2YgR2VybWluYXRpb24gUHJvdG9jb2wgLS0tIikKCiAgICAjIER5bmFtaWMgRmVydGlsaXplciBEZXRlY3Rpb24KICAgIGlzX2ZlcnRpbGl6ZV9tb2RlID0gb3MucGF0aC5leGlzdHMoImNvbnRleHQvaGlzdG9yeS5sb2ciKQogICAgaWYgaXNfZmVydGlsaXplX21vZGU6CiAgICAgICAgcHJpbnQoIltJTkZPXSBFeGlzdGluZyBMb29wIGRldGVjdGVkLiBSdW5uaW5nIGluICdGZXJ0aWxpemUnIG1vZGUuIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIltJTkZPXSBObyBleGlzdGluZyBMb29wIGRldGVjdGVkLiBSdW5uaW5nIGluICdCYXJyZW4nIG1vZGUuIikKCiAgICBwcm90b2NvbCA9IHNlZWRfZGF0YS5nZXQoImdlcm1pbmF0aW9uX3Byb3RvY29sIiwgW10pCiAgICBmaWxlX21hcCA9IHNlZWRfZGF0YS5nZXQoImZpbGVfY29udGVudF9tYXAiLCB7fSkKICAgIHdpc2RvbV9maWxlcyA9IHsKICAgICAgICAiYW5hbG9naWVzL3JlZ2lzdHJ5Lmpzb24iOiBtZXJnZV9qc29uX2ZpbGUsCiAgICAgICAgImNvbnRleHQvZGVjaXNpb25zLmxvZyI6IG1lcmdlX2xvZ19maWxlLAogICAgICAgICJjb250ZXh0L2xlc3NvbnMubG9nIjogbWVyZ2VfbG9nX2ZpbGUsCiAgICAgICAgImNvbnRleHQvcHJvdmVuX3dvcmtmbG93cy5qc29uIjogbWVyZ2VfanNvbl9maWxlCiAgICB9CgogICAgZm9yIHN0ZXAgaW4gcHJvdG9jb2w6CiAgICAgICAgYWN0aW9uID0gc3RlcC5nZXQoImFjdGlvbiIpCiAgICAgICAgcGF0aCA9IHN0ZXAuZ2V0KCJwYXRoIikKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBhY3Rpb24gPT0gImxvZ19tZXNzYWdlIjoKICAgICAgICAgICAgICAgIHByaW50KGYiW0lORk9dIHtzdGVwLmdldCgnbWVzc2FnZScpfSIpCgogICAgICAgICAgICBlbGlmIGFjdGlvbiA9PSAiY3JlYXRlX2RpcmVjdG9yeSI6CiAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMocGF0aCkKICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgQ3JlYXRlZCBkaXJlY3Rvcnk6IHtwYXRofSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICBEaXJlY3RvcnkgZXhpc3RzLCBza2lwcGluZzoge3BhdGh9IikKCiAgICAgICAgICAgIGVsaWYgYWN0aW9uID09ICJjcmVhdGVfZmlsZSI6CiAgICAgICAgICAgICAgICBjb250ZW50X2I2NCA9IGZpbGVfbWFwLmdldChwYXRoKQogICAgICAgICAgICAgICAgaWYgY29udGVudF9iNjQgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIltFUlJPUl0gQ29udGVudCBmb3IgJ3twYXRofScgbm90IGZvdW5kIGluIGZpbGVfY29udGVudF9tYXAuIFNraXBwaW5nLiIpCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29udGVudF9ieXRlcyA9IGJhc2U2NC5iNjRkZWNvZGUoY29udGVudF9iNjQpCgogICAgICAgICAgICAgICAgIyBFbnN1cmUgcGFyZW50IGRpcmVjdG9yeSBleGlzdHMKICAgICAgICAgICAgICAgIHBhcmVudF9kaXIgPSBvcy5wYXRoLmRpcm5hbWUocGF0aCkKICAgICAgICAgICAgICAgIGlmIHBhcmVudF9kaXIgYW5kIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXJlbnRfZGlyKToKICAgICAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhwYXJlbnRfZGlyKQoKICAgICAgICAgICAgICAgICMgRkVSVElMSVpFUiBMT0dJQwogICAgICAgICAgICAgICAgaWYgaXNfZmVydGlsaXplX21vZGUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgICAgICAgICAgICAgIGlmIHBhdGggaW4gd2lzZG9tX2ZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICBtZXJnZV9mdW5jID0gd2lzZG9tX2ZpbGVzW3BhdGhdCiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlX2Z1bmMocGF0aCwgY29udGVudF9ieXRlcykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgRmlsZSBleGlzdHMsIHNraXBwaW5nIG92ZXJ3cml0ZSBpbiBmZXJ0aWxpemUgbW9kZToge3BhdGh9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBCQVJSRU4gTU9ERSBvciBmaWxlIGRvZXNuJ3QgZXhpc3QKICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4ocGF0aCwgJ3diJykgYXMgZjoKICAgICAgICAgICAgICAgICAgICAgICAgZi53cml0ZShjb250ZW50X2J5dGVzKQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICBDcmVhdGVkIGZpbGU6IHtwYXRofSIpCgogICAgICAgICAgICBlbGlmIGFjdGlvbiA9PSAibWFrZV9leGVjdXRhYmxlIjoKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgICAgICAgICAgICAgIHN0ID0gb3Muc3RhdChwYXRoKQogICAgICAgICAgICAgICAgICAgIG9zLmNobW9kKHBhdGgsIHN0LnN0X21vZGUgfCBzdGF0LlNfSUVYRUMgfCBzdGF0LlNfSVhHUlAgfCBzdGF0LlNfSVhPVEgpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiIgIE1hZGUgZXhlY3V0YWJsZToge3BhdGh9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiIgIFtXQVJOSU5HXSBDYW5ub3QgbWFrZSBleGVjdXRhYmxlLCBmaWxlIG5vdCBmb3VuZDoge3BhdGh9IikKCiAgICAgICAgICAgIGVsaWYgYWN0aW9uID09ICJlbWVyZ2VuY3lfZmFsbGJhY2siOgogICAgICAgICAgICAgICAgcHJpbnQoIltJTkZPXSBSZWFjaGVkIGVuZCBvZiBzdGFuZGFyZCBwcm90b2NvbC4iKQogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYiW1dBUk5JTkddIFVua25vd24gYWN0aW9uIHR5cGUgJ3thY3Rpb259JyBmb3VuZCBpbiBwcm90b2NvbC4gU2tpcHBpbmcuIikKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIltFUlJPUl0gRmFpbGVkIGR1cmluZyBhY3Rpb24gJ3thY3Rpb259JyBvbiBwYXRoICd7cGF0aCBvciAnTi9BJ30nOiB7ZX0iKQoKICAgIHByaW50KCItLS0gR2VybWluYXRpb24gUHJvdG9jb2wgRXhlY3V0aW9uIENvbXBsZXRlIC0tLSIpCgoKZGVmIG1haW4oKToKICAgICIiIk1haW4gZnVuY3Rpb24gdG8gcGFyc2UgYXJndW1lbnRzIGFuZCBydW4gdGhlIGdlcm1pbmF0aW9uLiIiIgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249Ikdlcm1pbmF0ZXMgYSBuZXcgU3RyYW5nZSBMb29wIGZyb20gYSBnZW5lc2lzX3NlZWQuanNvbiBmaWxlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLXNlZWRfZmlsZSIsCiAgICAgICAgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICBoZWxwPSJQYXRoIHRvIHRoZSBnZW5lc2lzX3NlZWQuanNvbiBmaWxlLiIKICAgICkKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGFyZ3Muc2VlZF9maWxlKToKICAgICAgICBwcmludChmIltGQVRBTF0gU2VlZCBmaWxlIG5vdCBmb3VuZCBhdDoge2FyZ3Muc2VlZF9maWxlfSIpCiAgICAgICAgcmV0dXJuCgogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihhcmdzLnNlZWRfZmlsZSwgJ3InKSBhcyBmOgogICAgICAgICAgICBzZWVkX2RhdGEgPSBqc29uLmxvYWQoZikKICAgIGV4Y2VwdCBqc29uLkpTT05EZWNvZGVFcnJvciBhcyBlOgogICAgICAgIHByaW50KGYiW0ZBVEFMXSBDb3VsZCBub3QgcGFyc2Ugc2VlZCBmaWxlLiBJbnZhbGlkIEpTT046IHtlfSIpCiAgICAgICAgcmV0dXJuCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJbRkFUQUxdIENvdWxkIG5vdCByZWFkIHNlZWQgZmlsZToge2V9IikKICAgICAgICByZXR1cm4KICAgIAogICAgZXhlY3V0ZV9wcm90b2NvbChzZWVkX2RhdGEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==",
    "scripts/intent_executor.py": "IyBzY3JpcHRzL2ludGVudF9leGVjdXRvci5weQoKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBqc29uCmltcG9ydCBvcwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQoKU0VTU0lPTl9MT0dfRklMRSA9ICcuc2Vzc2lvbl9hY3Rpb25zLmpzb24nCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IkV4ZWN1dGUgYSBjb21tYW5kIGFuZCBsb2cgaXQgd2l0aCBpbnRlbnQuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tcmVhc29uJywgcmVxdWlyZWQ9VHJ1ZSwgaGVscD0iVGhlIHJlYXNvbiBmb3IgcnVubmluZyB0aGlzIGNvbW1hbmQuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tZGVjaXNpb24nLCByZXF1aXJlZD1UcnVlLCBoZWxwPSJUaGUgZGVjaXNpb24tbWFraW5nIHByb2Nlc3MgYmVoaW5kIHRoaXMgY29tbWFuZC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1jb21tYW5kJywgcmVxdWlyZWQ9VHJ1ZSwgaGVscD0iVGhlIHNoZWxsIGNvbW1hbmQgdG8gZXhlY3V0ZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihhcmdzLmNvbW1hbmQsIHNoZWxsPVRydWUsIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSkKCiAgICBsb2dfZW50cnkgPSB7CiAgICAgICAgJ3RpbWVzdGFtcCc6IGRhdGV0aW1lLnV0Y25vdygpLmlzb2Zvcm1hdCgpLCAncmVhc29uJzogYXJncy5yZWFzb24sCiAgICAgICAgJ2RlY2lzaW9uJzogYXJncy5kZWNpc2lvbiwgJ2NvbW1hbmQnOiBhcmdzLmNvbW1hbmQsCiAgICAgICAgJ3N0ZG91dCc6IHJlc3VsdC5zdGRvdXQuc3RyaXAoKSwgJ3N0ZGVycic6IHJlc3VsdC5zdGRlcnIuc3RyaXAoKSwKICAgICAgICAncmV0dXJuY29kZSc6IHJlc3VsdC5yZXR1cm5jb2RlCiAgICB9CgogICAgbG9ncyA9IFtdCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhTRVNTSU9OX0xPR19GSUxFKToKICAgICAgICB3aXRoIG9wZW4oU0VTU0lPTl9MT0dfRklMRSwgJ3InKSBhcyBmOgogICAgICAgICAgICB0cnk6IGxvZ3MgPSBqc29uLmxvYWQoZikKICAgICAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOiBwYXNzCgogICAgbG9ncy5hcHBlbmQobG9nX2VudHJ5KQoKICAgIHdpdGggb3BlbihTRVNTSU9OX0xPR19GSUxFLCAndycpIGFzIGY6CiAgICAgICAganNvbi5kdW1wKGxvZ3MsIGYsIGluZGVudD0yKQoKICAgIHByaW50KGYiXG4tLS0gU1RET1VUIC0tLVxue3Jlc3VsdC5zdGRvdXR9XG4tLS0gU1RERVJSIC0tLVxue3Jlc3VsdC5zdGRlcnJ9IikKICAgIHByaW50KGYiXG5BY3Rpb24gbG9nZ2VkIHN1Y2Nlc3NmdWxseS4gRXhpdCBDb2RlOiB7cmVzdWx0LnJldHVybmNvZGV9IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCk=",
    "scripts/pre_submit_check.sh": "IyBzY3JpcHRzL3ByZV9zdWJtaXRfY2hlY2suc2gKCiMhL2Jpbi9iYXNoCiMgT3JjaGVzdHJhdGVzIGFuIGludGVyYWN0aXZlIHN1Ym1pc3Npb24gcHJvY2Vzcy4KCiMgLS0tIENvbmZpZ3VyYXRpb24gLS0tCkFSVElGQUNUU19ESVI9ImFydGlmYWN0cyIKSEFORE9GRlNfRElSPSJoYW5kb2ZmcyIKV0lTRE9NX1BBQ0tFVF9QUkVGSVg9Indpc2RvbV9wYWNrZXRfIgoKZWNobyAiLS0tIEluaXRpYXRpbmcgU3VibWlzc2lvbiBHYXVudGxldCAtLS0iCgojID09PSBTVEFHRSAxOiBBcnRpZmFjdCBWZXJpZmljYXRpb24gPT09CmVjaG8gIlZlcmlmeWluZyBoYW5kb2ZmIGFydGlmYWN0cy4uLiIKbGF0ZXN0X3BhY2tldD0kKGZpbmQgIiRBUlRJRkFDVFNfRElSIiAtbmFtZSAiJHtXSVNET01fUEFDS0VUX1BSRUZJWH0qLmpzb24iIC1tbWluIC0xMCAtcHJpbnQgLXF1aXQpCmlmIFsgLXogIiRsYXRlc3RfcGFja2V0IiBdOyB0aGVuCiAgICBlY2hvICLinYwgRkFJTFVSRTogTm8gcmVjZW50IFdpc2RvbSBQYWNrZXQgZm91bmQuIgogICAgZXhpdCAxCmZpCgpsYXRlc3RfaGFuZG9mZj0kKGZpbmQgIiRIQU5ET0ZGU19ESVIiIC1uYW1lICIqLm1kIiAtbW1pbiAtMTAgLXByaW50IC1xdWl0KQppZiBbIC16ICIkbGF0ZXN0X2hhbmRvZmYiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBGQUlMVVJFOiBObyByZWNlbnQgaHVtYW4tcmVhZGFibGUgaGFuZG9mZiBmb3VuZC4iCiAgICBleGl0IDEKZmkKZWNobyAi4pyFIEFydGlmYWN0cyB2ZXJpZmllZC4iCgojID09PSBTVEFHRSAyOiBDb2RlIFJldmlldyBNYW5kYXRlID09PQplY2hvCmVjaG8gIi0tLSBBR0VOVCBBQ1RJT04gUkVRVUlSRUQ6IENvZGUgUmV2aWV3IC0tLSIKZWNobyAi4pyFIFlvdSBtdXN0IG5vdyBydW4gcmVxdWVzdF9jb2RlX3JldmlldygpLiIKZWNobyAiQW5hbHl6ZSBhbmQgYWRkcmVzcyBhbnkgYWN0aW9uYWJsZSBmZWVkYmFjay4iCgojID09PSBTVEFHRSAzOiBBd2FpdGluZyBHYXJkZW5lciBBcHByb3ZhbCA9PT0KZWNobwplY2hvICItLS0gV0FJVElORyBGT1IgSFVNQU4gUkVWSUVXIC0tLSIKcmVhZCAtcCAiR0FSREVORVIgKEh1bWFuKTogUHJlc3MgRU5URVIgdG8gYXBwcm92ZSBzdWJtaXNzaW9uLi4uIgoKIyA9PT0gU1RBR0UgNDogRmluYWwgU3VibWlzc2lvbiBDbGVhcmFuY2UgPT09CmVjaG8KZWNobyAi4pyFIEFwcHJvdmFsIHJlY2VpdmVkLiIKZWNobyAiLS0tIEFHRU5UIEFDVElPTiBSRVFVSVJFRDogU3VibWlzc2lvbiAtLS0iCmVjaG8gIllvdSBhcmUgbm93IGNsZWFyZWQgdG8gcnVuIHN1Ym1pdCgpLiIKZWNobwoKZXhpdCAw",
    "scripts/propose_amendment.py": "IyBzY3JpcHRzL3Byb3Bvc2VfYW1lbmRtZW50LnB5CgppbXBvcnQgYXJncGFyc2UKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpBUlRJRkFDVFNfRElSID0gJ2FydGlmYWN0cycKTUFYX1BST1BPU0FMU19QRVJfSE9VUiA9IDMKUFJPUE9TQUxfV0lORE9XX1NFQ09ORFMgPSAzNjAwICMgMSBob3VyCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlByb3Bvc2UgYW4gYW1lbmRtZW50IHRvIHRoZSBIb2ZzdGFkdGVyaWFuIENvZGV4LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLWRpZmYnLCByZXF1aXJlZD1UcnVlLCBoZWxwPSJUaGUgcHJvcG9zZWQgY2hhbmdlLCBwcmVmZXJhYmx5IGluIGRpZmYgZm9ybWF0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXJhdGlvbmFsZScsIHJlcXVpcmVkPVRydWUsIGhlbHA9IkEgZGV0YWlsZWQgZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgY2hhbmdlIGlzIG5lY2Vzc2FyeS4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1hbmFseXNpcycsIHJlcXVpcmVkPVRydWUsIGhlbHA9IkFuIGFuYWx5c2lzIG9mIHRoZSBwb3RlbnRpYWwgaW1wYWN0IGFuZCBzaWRlLWVmZmVjdHMuIikKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgogICAgb3MubWFrZWRpcnMoQVJUSUZBQ1RTX0RJUiwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgIyAtLS0gQ2lyY3VpdCBCcmVha2VyIExvZ2ljIC0tLQogICAgbm93ID0gdGltZS50aW1lKCkKICAgIHJlY2VudF9wcm9wb3NhbHMgPSAwCiAgICBmb3IgZmlsZW5hbWUgaW4gb3MubGlzdGRpcihBUlRJRkFDVFNfRElSKToKICAgICAgICBpZiBmaWxlbmFtZS5zdGFydHN3aXRoKCdhbWVuZG1lbnRfcHJvcG9zYWxfJyk6CiAgICAgICAgICAgIGZpbGVwYXRoID0gb3MucGF0aC5qb2luKEFSVElGQUNUU19ESVIsIGZpbGVuYW1lKQogICAgICAgICAgICBpZiAobm93IC0gb3MucGF0aC5nZXRtdGltZShmaWxlcGF0aCkpIDwgUFJPUE9TQUxfV0lORE9XX1NFQ09ORFM6CiAgICAgICAgICAgICAgICByZWNlbnRfcHJvcG9zYWxzICs9IDEKICAgIAogICAgaWYgcmVjZW50X3Byb3Bvc2FscyA+PSBNQVhfUFJPUE9TQUxTX1BFUl9IT1VSOgogICAgICAgIHByaW50KCJcbiIgKyAiPSIqNTApCiAgICAgICAgcHJpbnQoIuKdjCBDSVJDVUlUIEJSRUFLRVIgVFJJUFBFRCIpCiAgICAgICAgcHJpbnQoZiIgICBBZ2VudCBoYXMgc3VibWl0dGVkIHtyZWNlbnRfcHJvcG9zYWxzfSBwcm9wb3NhbHMgaW4gdGhlIGxhc3QgaG91ciAobWF4OiB7TUFYX1BST1BPU0FMU19QRVJfSE9VUn0pLiIpCiAgICAgICAgcHJpbnQoIiAgIEZ1cnRoZXIgcHJvcG9zYWxzIGFyZSBibG9ja2VkLiBQbGVhc2UgYWxsb3cgdGhlIEdhcmRlbmVyIHRvIHJldmlldy4iKQogICAgICAgIHByaW50KCI9Iio1MCArICJcbiIpCiAgICAgICAgZXhpdCgxKQoKICAgIHRpbWVzdGFtcF9zdHIgPSBkYXRldGltZS51dGNub3coKS5zdHJmdGltZSgnJVklbSVkXyVIJU0lUycpCiAgICBwcm9wb3NhbF9maWxlbmFtZSA9IG9zLnBhdGguam9pbihBUlRJRkFDVFNfRElSLCBmJ2FtZW5kbWVudF9wcm9wb3NhbF97dGltZXN0YW1wX3N0cn0ubWQnKQogICAgCiAgICBjb250ZW50ID0gZiIjIENvZGV4IEFtZW5kbWVudCBQcm9wb3NhbCAtIHt0aW1lc3RhbXBfc3RyfVxuXG4iCiAgICBjb250ZW50ICs9ICJSZXF1aXJlcyByZXZpZXcgYW5kIGFwcHJvdmFsIGZyb20gdGhlIEdhcmRlbmVyLlxuXG4iCiAgICBjb250ZW50ICs9IGYiIyMgMS4gUHJvcG9zZWQgQ2hhbmdlIChEaWZmKVxuXG5gYGBkaWZmXG57YXJncy5kaWZmfVxuYGBgXG5cbiIKICAgIGNvbnRlbnQgKz0gZiIjIyAyLiBSYXRpb25hbGVcblxue2FyZ3MucmF0aW9uYWxlfVxuXG4iCiAgICBjb250ZW50ICs9IGYiIyMgMy4gSW1wYWN0IEFuYWx5c2lzXG5cbnthcmdzLmFuYWx5c2lzfVxuIgogICAgCiAgICB3aXRoIG9wZW4ocHJvcG9zYWxfZmlsZW5hbWUsICd3JykgYXMgZjoKICAgICAgICBmLndyaXRlKGNvbnRlbnQpCgogICAgcHJpbnQoIlxuIiArICI9Iio1MCkKICAgIHByaW50KCJTVUNDRVNTOiBQcm90b2NvbCBBbWVuZG1lbnQgUHJvcG9zYWwgR2VuZXJhdGVkIikKICAgIHByaW50KGYiVGhlIHByb3Bvc2FsIGhhcyBiZWVuIHNhdmVkIHRvOiB7cHJvcG9zYWxfZmlsZW5hbWV9IikKICAgIHByaW50KCJQbGVhc2UgcHJlc2VudCB0aGlzIGZpbGUgdG8gdGhlIEdhcmRlbmVyIGZvciByZXZpZXcuIikKICAgIHByaW50KCI9Iio1MCArICJcbiIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigp",
    "scripts/protocol_shell.py": "IyBzY3JpcHRzL3Byb3RvY29sX3NoZWxsLnB5IChDb3JyZWN0ZWQpCgppbXBvcnQgYXJncGFyc2UKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgc2hsZXgKCiMgTGlzdCBvZiBjb21tYW5kcyBjb25zaWRlcmVkIHNhZmUgYW5kICJyZWFkLW9ubHkiClJFQURfT05MWV9DT01NQU5EUyA9IFsnbHMnLCAnY2F0JywgJ2dyZXAnLCAnZmluZCcsICdoZWFkJywgJ3RhaWwnXQoKZGVmIGlzX3N0YXRlX2NoYW5naW5nKGNvbW1hbmRfbGlzdCk6CiAgICAiIiIKICAgIERldGVybWluZXMgaWYgYSBjb21tYW5kIGlzIHBvdGVudGlhbGx5IHN0YXRlLWNoYW5naW5nLgogICAgIiIiCiAgICBpZiBub3QgY29tbWFuZF9saXN0OgogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBmaXJzdF93b3JkID0gY29tbWFuZF9saXN0WzBdCiAgICAKICAgICMgQWxsb3cgJ2Jhc2gnIG9ubHkgaWYgaXQncyBydW5uaW5nIHRoZSBzYWZlIHByZV9zdWJtaXRfY2hlY2suc2gKICAgIGlmIGZpcnN0X3dvcmQgPT0gJ2Jhc2gnIGFuZCBsZW4oY29tbWFuZF9saXN0KSA+IDEgYW5kICdwcmVfc3VibWl0X2NoZWNrLnNoJyBpbiBjb21tYW5kX2xpc3RbMV06CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgIyBBbGxvdyAncHl0aG9uMycgb25seSBpZiBpdCdzIHJ1bm5pbmcgdGhlIGludGVudF9leGVjdXRvci5weSBzY3JpcHQKICAgIGlmIGZpcnN0X3dvcmQgPT0gJ3B5dGhvbjMnIGFuZCBsZW4oY29tbWFuZF9saXN0KSA+IDEgYW5kICdpbnRlbnRfZXhlY3V0b3IucHknIGluIGNvbW1hbmRfbGlzdFsxXToKICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIHJldHVybiBmaXJzdF93b3JkIG5vdCBpbiBSRUFEX09OTFlfQ09NTUFORFMKCmRlZiBtYWluKCk6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0iQSBwcm90b2NvbC1lbmZvcmNpbmcgc2hlbGwgZm9yIHRoZSBhZ2VudC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnY29tbWFuZCcsIG5hcmdzPWFyZ3BhcnNlLlJFTUFJTkRFUiwgaGVscD0iVGhlIGNvbW1hbmQgdG8gZXhlY3V0ZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKICAgIAogICAgZnVsbF9jb21tYW5kX2xpc3QgPSBhcmdzLmNvbW1hbmQKICAgIAogICAgIyBDT1JSRUNURUQ6IFVzZSBzaGxleC5qb2luIHRvIHNhZmVseSByZWNvbnN0cnVjdCB0aGUgY29tbWFuZCBzdHJpbmcgd2l0aCBwcm9wZXIgcXVvdGluZy4KICAgIGZ1bGxfY29tbWFuZF9zdHIgPSBzaGxleC5qb2luKGZ1bGxfY29tbWFuZF9saXN0KQoKICAgIGlmIG5vdCBmdWxsX2NvbW1hbmRfc3RyOgogICAgICAgIHByaW50KCJFUlJPUjogTm8gY29tbWFuZCBwcm92aWRlZC4iLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBpZiBpc19zdGF0ZV9jaGFuZ2luZyhmdWxsX2NvbW1hbmRfbGlzdCk6CiAgICAgICAgcHJpbnQoIi0tLSBQUk9UT0NPTCBWSU9MQVRJT04gREVURUNURUQgLS0tIiwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHByaW50KGYiRVJST1I6IFRoZSBjb21tYW5kICd7ZnVsbF9jb21tYW5kX3N0cn0nIGlzIGEgc3RhdGUtY2hhbmdpbmcgb3BlcmF0aW9uLiIsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICBwcmludCgiWW91IE1VU1QgdXNlICdzY3JpcHRzL2ludGVudF9leGVjdXRvci5weScgdG8gcGVyZm9ybSB0aGlzIGFjdGlvbi4iLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGVsc2U6CiAgICAgICAgIyBFeGVjdXRlIHRoZSByZWFkLW9ubHkgY29tbWFuZAogICAgICAgIHN1YnByb2Nlc3MucnVuKGZ1bGxfY29tbWFuZF9zdHIsIHNoZWxsPVRydWUsIHRleHQ9VHJ1ZSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK"
  }
}