{
  "amendment_id": "amendment_20250916143833.json",
  "timestamp_utc": "2025-09-16T14:38:33.761615+00:00",
  "status": "proposed",
  "target_file": "scripts/meta_monitor.py",
  "justification": "This refactoring consolidates configuration into a single file (meta_triggers.yaml) and removes the obsolete read_only_commands.json file, improving maintainability.",
  "proposed_changes": "# scripts/meta_monitor.py\n# v14.2: Proactive meta-cognitive monitor.\n\nimport time\nimport json\nimport os\nimport yaml\nfrom datetime import datetime, timezone\n\nSESSION_LOG_FILE = \"session.log\"\nTRIGGERS_FILE = \"config/meta_triggers.yaml\"\nSUGGESTIONS_LOG = \"suggestions.log\"\nSLEEP_INTERVAL = 10\n\nlast_processed_line = 0\n\ndef load_file(filepath, loader, default):\n    try:\n        with open(filepath, 'r') as f:\n            return loader(f)\n    except Exception:\n        return default\n\ndef log_suggestion(message):\n    with open(SUGGESTIONS_LOG, 'a') as f:\n        f.write(f\"[{datetime.now(timezone.utc).isoformat()}] {message}\\n\")\n\ndef check_for_patterns(log_entries, triggers):\n    if not log_entries: return\n    history_window = 10\n    if len(log_entries) < 2: return\n\n    for pattern in triggers.get('patterns', []):\n        if pattern['name'] == 'Analysis Paralysis':\n            threshold = pattern.get('threshold', 5)\n            whitelist = pattern.get('tools', [])\n            if not whitelist: continue # Skip if no tools are defined for this check\n\n            command_entries = [e for e in log_entries if e.get('type') == 'command_result']\n\n            if len(command_entries) < threshold: continue\n            \n            recent_commands = command_entries[-threshold:]\n            is_paralysis = True\n            command_list = []\n            for entry in recent_commands:\n                cmd_base = entry.get('command', ' ').split()[0]\n                command_list.append(cmd_base)\n                if cmd_base not in whitelist:\n                    is_paralysis = False\n                    break\n            \n            if is_paralysis:\n                log_suggestion(pattern['message'].format(count=threshold, tool_list=\", \".join(command_list)))\n                return\n\n        elif pattern['name'] == 'Tool Fixation':\n            threshold = pattern.get('threshold', 3)\n            failures = {}\n            for entry in log_entries[-history_window:]:\n                if entry.get('type') == 'command_result' and entry.get('returncode') != 0:\n                    tool_name = entry.get('command', ' ').split()[0]\n                    failures[tool_name] = failures.get(tool_name, 0) + 1\n            \n            for tool, count in failures.items():\n                if count >= threshold:\n                    log_suggestion(pattern['message'].format(tool_name=tool, count=count))\n                    return\n\ndef main():\n    global last_processed_line\n    log_suggestion(\"Meta-cognitive monitor initialized and running.\")\n\n    triggers = load_file(TRIGGERS_FILE, yaml.safe_load, {})\n\n    if not triggers:\n        log_suggestion(f\"ERROR: Missing triggers config file '{TRIGGERS_FILE}'. Monitor will not run effectively.\")\n        return\n\n    while True:\n        try:\n            if os.path.exists(SESSION_LOG_FILE):\n                with open(SESSION_LOG_FILE, 'r') as f:\n                    lines = f.readlines()\n                \n                if len(lines) > last_processed_line:\n                    all_log_entries = [json.loads(line) for line in lines if line.strip()]\n                    check_for_patterns(all_log_entries, triggers)\n                    last_processed_line = len(lines)\n        except Exception as e:\n            log_suggestion(f\"MONITOR-ERROR: An exception occurred: {e}\")\n\n        time.sleep(SLEEP_INTERVAL)\n\nif __name__ == \"__main__\":\n    main()"
}