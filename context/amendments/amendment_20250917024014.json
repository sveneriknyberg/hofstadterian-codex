{
  "amendment_id": "amendment_20250917024014.json",
  "timestamp_utc": "2025-09-17T02:40:14.453203+00:00",
  "status": "proposed",
  "target_file": "scripts/consolidate_handoff.py",
  "justification": "The handoff notes parser was incorrectly reading placeholder text from the template as real data. This fix adds logic to identify and filter out these placeholder strings, preventing data corruption in wisdom.json.",
  "proposed_changes": "# scripts/consolidate_handoff.py\n# v14.2: Creates the JSON handoff and merges new wisdom into the Loop's brain.\n\nimport json\nimport os\nimport uuid\nimport re\nfrom datetime import datetime, timezone\nimport argparse\nimport base64\nimport subprocess\n\nHANDOFF_DIR = 'context/handoffs'\nHANDOFF_NOTES_FILE = 'context/handoff_notes.md'\nWISDOM_FILE = 'context/wisdom.json'\n\ndef get_command_output(command):\n    try:\n        return subprocess.run(command, shell=True, check=True, capture_output=True, text=True).stdout.strip()\n    except Exception as e:\n        return f\"Error executing command '{command}': {e}\"\n\ndef parse_handoff_notes():\n    notes = {\"summary\": \"No summary provided.\", \"decisions\": [], \"lessons\": []}\n    if not os.path.exists(HANDOFF_NOTES_FILE):\n        return notes\n    \n    with open(HANDOFF_NOTES_FILE, 'r') as f:\n        content = f.read()\n\n    # Define placeholders to ignore\n    summary_placeholder = \"(Provide a one-paragraph summary of the work accomplished in this session.)\"\n    decisions_placeholder = \"(List the significant decisions made, one per line, starting with a hyphen.)\"\n    lessons_placeholder = \"(List any important lessons learned from errors or unexpected behavior, one per line, starting with a hyphen.)\"\n\n    summary_match = re.search(r'## Summary\\s*\\n(.*?)(?=\\n--|$)', content, re.DOTALL)\n    if summary_match:\n        summary_text = summary_match.group(1).strip()\n        if summary_text != summary_placeholder:\n            notes['summary'] = summary_text\n    \n    decisions_match = re.search(r'## Key Decisions\\s*\\n(.*?)(?=\\n--|$)', content, re.DOTALL)\n    if decisions_match:\n        all_decisions = [line.strip('- ').strip() for line in decisions_match.group(1).strip().split('\\n') if line.strip().startswith('- ')]\n        # Filter out the placeholder text\n        notes['decisions'] = [d for d in all_decisions if d != decisions_placeholder]\n\n    lessons_match = re.search(r'## Lessons Learned\\s*\\n(.*?)(?=\\n--|$)', content, re.DOTALL)\n    if lessons_match:\n        all_lessons = [line.strip('- ').strip() for line in lessons_match.group(1).strip().split('\\n') if line.strip().startswith('- ')]\n        # Filter out the placeholder text\n        notes['lessons'] = [l for l in all_lessons if l != lessons_placeholder]\n        \n    return notes\n\ndef update_wisdom(new_wisdom):\n    os.makedirs(os.path.dirname(WISDOM_FILE), exist_ok=True)\n    try:\n        with open(WISDOM_FILE, 'r') as f:\n            wisdom = json.load(f)\n    except (FileNotFoundError, json.JSONDecodeError):\n        wisdom = {\"decisions\": [], \"lessons\": [], \"analogies\": {}, \"proven_workflows\": []}\n\n    timestamp = datetime.now(timezone.utc).isoformat()\n    for decision in new_wisdom['decisions']:\n        if decision not in [d.get('decision') for d in wisdom.get('decisions', [])]:\n             wisdom['decisions'].append({\"timestamp\": timestamp, \"decision\": decision, \"source\": \"session_handoff\"})\n    for lesson in new_wisdom['lessons']:\n        if lesson not in [l.get('lesson') for l in wisdom.get('lessons', [])]:\n            wisdom['lessons'].append({\"timestamp\": timestamp, \"lesson\": lesson, \"source\": \"session_handoff\"})\n    \n    with open(WISDOM_FILE, 'w') as f:\n        json.dump(wisdom, f, indent=2)\n    print(f\"\u2705 Wisdom file updated.\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"v14.2 Consolidate Handoff\")\n    parser.add_argument(\"--session-data\", help=\"Base64 encoded session log data.\")\n    args = parser.parse_args()\n\n    os.makedirs(HANDOFF_DIR, exist_ok=True)\n    \n    session_log = []\n    if args.session_data:\n        try:\n            log_content = base64.b64decode(args.session_data).decode('utf-8')\n            session_log = [json.loads(line) for line in log_content.strip().split('\\n') if line]\n        except Exception: pass\n\n    notes = parse_handoff_notes()\n    update_wisdom(notes)\n\n    handoff_data = {\n        \"handoff_id\": str(uuid.uuid4()),\n        \"timestamp_utc\": datetime.now(timezone.utc).isoformat(),\n        \"protocol_version\": \"14.2\",\n        \"summary\": notes['summary'],\n        \"state\": {\n            \"git_status\": get_command_output(\"git status --porcelain\"),\n            \"git_diff_staged\": get_command_output(\"git diff --staged\")\n        },\n        \"full_session_log\": session_log\n    }\n    \n    ts_str = datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')\n    handoff_filename = os.path.join(HANDOFF_DIR, f\"handoff_{ts_str}.json\")\n    \n    with open(handoff_filename, 'w') as f:\n        json.dump(handoff_data, f, indent=2)\n        \n    if os.path.exists(HANDOFF_NOTES_FILE):\n        os.remove(HANDOFF_NOTES_FILE)\n        \n    print(f\"\u2705 Handoff complete. Packaged into: {handoff_filename}\")\n\nif __name__ == \"__main__\":\n    main()"
}