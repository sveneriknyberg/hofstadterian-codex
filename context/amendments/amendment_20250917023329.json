{
  "amendment_id": "amendment_20250917023329.json",
  "timestamp_utc": "2025-09-17T02:33:29.492802+00:00",
  "status": "proposed",
  "target_file": "scripts/run.py",
  "justification": "Fix a bug in the command gateway where it incorrectly injects an argument into any command that contains the name of the handoff script, breaking other tools. The fix makes the check more specific.",
  "proposed_changes": "# scripts/run.py\n# The v14.2 Unified Command Gateway\n\nimport subprocess\nimport argparse\nimport json\nimport os\nimport sys\nimport base64\nfrom datetime import datetime, timezone\n\nSESSION_LOG_FILE = 'session.log'\n\ndef log_action(log_entry):\n    with open(SESSION_LOG_FILE, 'a') as f:\n        f.write(json.dumps(log_entry) + '\\n')\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"v14.2 Unified Command Gateway: Logs intent and executes a command.\")\n    parser.add_argument(\"--intent\", required=True, help=\"The agent's intent for this action.\")\n    parser.add_argument(\"--command\", required=True, help=\"The command to execute.\")\n    args = parser.parse_args()\n\n    log_action({\n        \"type\": \"intent\",\n        \"details\": args.intent,\n        \"timestamp\": datetime.now(timezone.utc).isoformat()\n    })\n\n    command_to_run = args.command\n    \n    # Check if the command is specifically for running the handoff script.\n    # The original check was a broad substring search, which was buggy.\n    command_parts = command_to_run.strip().split()\n    is_handoff_execution = (\n        len(command_parts) >= 2 and\n        'python' in command_parts[0] and # handles python, python3\n        command_parts[1] == 'scripts/consolidate_handoff.py'\n    )\n\n    if is_handoff_execution:\n        if os.path.exists(SESSION_LOG_FILE):\n            with open(SESSION_LOG_FILE, 'rb') as f:\n                session_data_b64 = base64.b64encode(f.read()).decode('utf-8')\n            command_to_run += f\" --session-data '{session_data_b64}'\"\n\n    try:\n        result = subprocess.run(command_to_run, shell=True, check=True, capture_output=True, text=True, executable='/bin/bash')\n        stdout, stderr, returncode = result.stdout, result.stderr, result.returncode\n    except subprocess.CalledProcessError as e:\n        stdout, stderr, returncode = e.stdout, e.stderr, e.returncode\n    \n    log_action({\n        \"type\": \"command_result\",\n        \"command\": args.command,\n        \"returncode\": returncode,\n        \"stdout\": stdout.strip(),\n        \"stderr\": stderr.strip(),\n        \"timestamp\": datetime.now(timezone.utc).isoformat()\n    })\n\n    if stdout:\n        print(stdout)\n    if stderr:\n        print(stderr, file=sys.stderr)\n        \n    sys.exit(returncode)\n\nif __name__ == \"__main__\":\n    main()"
}